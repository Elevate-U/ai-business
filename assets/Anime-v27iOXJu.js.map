{"version":3,"file":"Anime-v27iOXJu.js","sources":["../../src/pages/Anime.jsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useEffect, useCallback } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport { useStore } from '../store';\nimport MovieCard from '../components/MovieCard';\nimport { getLastWatchedEpisodeWithProgress } from '../utils/watchHistory';\nimport { useAuth } from '../context/Auth';\nimport { API_BASE_URL } from '../config';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport './Home.css';\nimport './Anime.css';\n\nconst Anime = () => {\n    const [loading, setLoading] = useState(true);\n    const [trending, setTrending] = useState([]);\n    const [airingToday, setAiringToday] = useState([]);\n    const [onTheAir, setOnTheAir] = useState([]);\n    const [popular, setPopular] = useState([]);\n    const [topRated, setTopRated] = useState([]);\n    const [error, setError] = useState(null);\n    const [videasyAvailable, setVideasyAvailable] = useState(true);\n\n    const { user } = useAuth();\n    const {\n        continueWatching,\n        continueWatchingFetched,\n        fetchContinueWatching\n    } = useStore();\n\n    useEffect(() => {\n        if (user && !continueWatchingFetched) {\n            fetchContinueWatching(user.id);\n        }\n    }, [user, continueWatchingFetched, fetchContinueWatching]);\n\n    const animeWatchHistory = continueWatching.filter(item => item.type === 'anime');\n\n\tconst fetchTmdbData = useCallback(async (endpoint, retries = 3) => {\n\t    try {\n\t        const response = await fetch(`${API_BASE_URL}/tmdb/discover/tv?with_genres=16&${endpoint}`);\n\t        if (!response.ok) {\n\t            throw new Error(`TMDB API error: ${response.status}`);\n\t        }\n\t        const data = await response.json();\n\t        return data.results.map(item => ({ ...item, media_type: 'tv' }));\n\t    } catch (error) {\n\t        console.error(`Error fetching from TMDB endpoint ${endpoint}:`, error);\n\t        if (retries > 0) {\n\t            await new Promise(resolve => setTimeout(resolve, 1000 * (4 - retries)));\n\t            return fetchTmdbData(endpoint, retries - 1);\n\t        }\n\t        return []; // Return empty array on failure\n\t    }\n\t}, []);\n\n    const handleAnimeClick = useCallback(async (animeItem) => {\n        if (user) {\n            const nextEpisode = await getLastWatchedEpisodeWithProgress(user.id, animeItem.id);\n            if (nextEpisode) {\n                route(`/watch/tv/${animeItem.id}/season/${nextEpisode.season}/episode/${nextEpisode.episode}`);\n            } else {\n                // Default to S1E1 if no history\n                route(`/watch/tv/${animeItem.id}/season/1/episode/1`);\n            }\n        } else {\n            // Fallback for non-logged-in users\n            route(`/tv/${animeItem.id}`);\n        }\n    }, [user]);\n\n    const checkServiceAvailability = useCallback(async () => {\n        try {\n            const videasyCheck = await fetch(`${API_BASE_URL}/health/videasy`, {\n                method: 'GET',\n                signal: AbortSignal.timeout(5000)\n            });\n            setVideasyAvailable(videasyCheck.ok);\n        } catch (error) {\n            console.warn('Videasy availability check failed:', error);\n            setVideasyAvailable(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        checkServiceAvailability();\n    }, [checkServiceAvailability]);\n\n    useEffect(() => {\n        const fetchAllAnimeData = async () => {\n            setLoading(true);\n            setError(null);\n\n            try {\n                const [\n                    trendingData,\n                    airingTodayData,\n                    onTheAirData,\n                    popularData,\n                    topRatedData\n                ] = await Promise.all([\n                    fetchTmdbData('sort_by=popularity.desc&page=1'), // Trending\n                    fetchTmdbData('air_date.gte=2024-01-01&sort_by=popularity.desc'), // Airing Today (example)\n                    fetchTmdbData('sort_by=popularity.desc&page=2'), // On The Air (example)\n                    fetchTmdbData('sort_by=popularity.desc&page=3'), // Popular\n                    fetchTmdbData('sort_by=vote_average.desc&vote_count.gte=100') // Top Rated\n                ]);\n\n                setTrending(trendingData);\n                setAiringToday(airingTodayData);\n                setOnTheAir(onTheAirData);\n                setPopular(popularData);\n                setTopRated(topRatedData);\n\n            } catch (error) {\n                console.error('Error fetching anime data from TMDB:', error);\n                setError('Failed to load anime data. Please refresh the page.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchAllAnimeData();\n    }, [fetchTmdbData]);\n\n    const renderSection = (title, items) => {\n        if (!items || items.length === 0) {\n            return null;\n        }\n        \n        return (\n            <section class=\"home-section\">\n                <h2>{title}</h2>\n                <div class=\"scrolling-row\">\n                    {items.map(item => (\n                        <MovieCard\n                            key={`${title}-${item.id}`}\n                            item={item}\n                            type=\"anime\"\n                            onClick={() => handleAnimeClick(item)}\n                        />\n                    ))}\n                </div>\n            </section>\n        );\n    };\n\n    const ServiceStatusIndicator = () => (\n        <div class=\"service-status\">\n            <div class={`status-indicator ${videasyAvailable ? 'online' : 'offline'}`}>\n                <span class=\"status-dot\"></span>\n                Videasy: {videasyAvailable ? 'Online' : 'Offline'}\n            </div>\n        </div>\n    );\n\n    const ErrorDisplay = ({ error, onRetry }) => (\n        <div class=\"error-container\">\n            <div class=\"error-message\">\n                <h3>Something went wrong</h3>\n                <p>{error}</p>\n                <button onClick={onRetry} class=\"retry-button\">Try Again</button>\n            </div>\n            <ServiceStatusIndicator />\n        </div>\n    );\n\n    if (loading) {\n        return (\n            <div class=\"container home-page anime-page\">\n                <h1 class=\"main-title\">Anime</h1>\n                <ServiceStatusIndicator />\n                <LoadingSpinner text={'Loading anime...'} />\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div class=\"container home-page anime-page\">\n                <h1 class=\"main-title\">Anime</h1>\n                <ErrorDisplay\n                    error={error}\n                    onRetry={() => {\n                        setError(null);\n                        checkServiceAvailability();\n                        // re-fetch data\n                    }}\n                />\n            </div>\n        );\n    }\n\n    return (\n        <div class=\"container home-page anime-page\">\n            <h1 class=\"main-title\">Anime</h1>\n            \n            <div class=\"anime-controls\">\n                <ServiceStatusIndicator />\n            </div>\n            \n            {animeWatchHistory.length > 0 && (\n                <section class=\"home-section\">\n                    <h2>Continue Watching</h2>\n                    <div class=\"scrolling-row scrolling-row--compact\">\n                        {animeWatchHistory.map(item => (\n                            <MovieCard\n                                key={`continue-watching-${item.id}`}\n                                item={item}\n                                type=\"anime\"\n                                progress={item.progress_seconds}\n                                duration={item.duration_seconds}\n                                onClick={() => handleAnimeClick(item)}\n                            />\n                        ))}\n                    </div>\n                </section>\n            )}\n            \n            {renderSection('Trending Now', trending)}\n            {renderSection('Airing Today', airingToday)}\n            {renderSection('Currently On The Air', onTheAir)}\n            {renderSection('Popular Anime', popular)}\n            {renderSection('Top Rated Anime', topRated)}\n            \n            {!loading &&\n             trending.length === 0 &&\n             popular.length === 0 &&\n             topRated.length === 0 && (\n                <div class=\"no-content\">\n                    <h3>No anime content available</h3>\n                    <p>Please check your connection and try again.</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Anime;"],"names":["Anime","loading","setLoading","useState","trending","setTrending","airingToday","setAiringToday","onTheAir","setOnTheAir","popular","setPopular","topRated","setTopRated","error","setError","videasyAvailable","setVideasyAvailable","user","useAuth","continueWatching","continueWatchingFetched","fetchContinueWatching","useStore","useEffect","animeWatchHistory","item","fetchTmdbData","useCallback","endpoint","retries","response","API_BASE_URL","resolve","handleAnimeClick","animeItem","nextEpisode","getLastWatchedEpisodeWithProgress","route","checkServiceAvailability","videasyCheck","trendingData","airingTodayData","onTheAirData","popularData","topRatedData","renderSection","title","items","jsxs","jsx","MovieCard","ServiceStatusIndicator","ErrorDisplay","onRetry","LoadingSpinner"],"mappings":"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"}