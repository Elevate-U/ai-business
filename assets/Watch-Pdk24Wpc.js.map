{"version":3,"file":"Watch-Pdk24Wpc.js","sources":["../../src/utils/favorites.js","../../src/pages/Watch.jsx"],"sourcesContent":["import { supabase } from '../supabase';\nimport { useStore } from '../store';\nimport { route } from 'preact-router';\nimport toast from '../components/Toast';\n\n/**\n * Adds a show to the user's favorites.\n *\n * @param {object} show - The show object to add.\n * @returns {Promise<void>}\n */\nexport const addFavoriteShow = async (show) => {\n  const { data: { user } } = await supabase.auth.getUser();\n  if (!user) {\n    toast.error('You need to be logged in to save favorites.');\n    // Optionally, you could offer a button inside the toast to redirect to login\n    // For now, just showing the error is a good first step.\n    return;\n  }\n\n  const showId = show.id;\n  const { getState, setState } = useStore;\n  const state = getState();\n\n  // Prevent adding if already favorited\n  const favoriteKey = `${showId}-tv`;\n  if (state.favoritedMedia.has(favoriteKey)) {\n    return;\n  }\n\n  // Optimistic update\n  setState((currentState) => ({\n    favorites: [{ ...show, type: 'tv' }, ...currentState.favorites],\n    favoritedMedia: new Set(currentState.favoritedMedia).add(favoriteKey),\n  }));\n\n  // Show a notification\n  toast.success(`'${show.name || show.title}' has been added to your Favorites.`);\n  \n  // Add to Supabase\n  const { error } = await supabase.from('favorites').insert({\n    user_id: user.id,\n    media_id: showId,\n    media_type: 'tv',\n  });\n\n  if (error) {\n    console.error('Error adding favorite show:', error);\n    // Revert on error\n    setState((currentState) => {\n        const newFavoritedMedia = new Set(currentState.favoritedMedia);\n        newFavoritedMedia.delete(favoriteKey);\n        return {\n            favoritedMedia: newFavoritedMedia,\n            favorites: currentState.favorites.filter(f => f.id !== showId)\n        };\n    });\n  }\n};\n\n/**\n * Removes a show from the user's favorites after confirmation.\n *\n * @param {object} show - The show object to remove.\n * @returns {Promise<void>}\n */\nexport const removeFavoriteShow = async (show) => {\n  const { data: { user } } = await supabase.auth.getUser();\n  if (!user) return;\n\n  const showId = show.id;\n  const { getState, setState } = useStore;\n  const favoriteKey = `${showId}-tv`;\n\n  const originalFavorites = getState().favorites;\n  const originalFavoritedMedia = getState().favoritedMedia;\n\n  // Optimistic update\n  setState((currentState) => ({\n    favorites: currentState.favorites.filter(fav => fav.id !== showId),\n    favoritedMedia: new Set([...currentState.favoritedMedia].filter(id => id !== favoriteKey)),\n  }));\n\n  // Show a notification\n  toast.error(`'${show.name || show.title}' has been removed from your Favorites.`);\n\n  // Remove from Supabase\n  const { error } = await supabase.from('favorites').delete().match({ user_id: user.id, media_id: showId, media_type: 'tv' });\n\n  if (error) {\n      console.error('Error removing favorite show:', error);\n      // Revert on error\n      setState({ favorites: originalFavorites, favoritedMedia: originalFavoritedMedia });\n      toast.error(`Failed to remove '${show.name || show.title}' from favorites.`);\n  }\n};\n\n/**\n * Checks if a show is favorited.\n *\n * @param {number} showId - The ID of the show.\n * @returns {boolean}\n */\nexport const isShowFavorited = (showId) => {\n  return useStore.getState().favoritedMedia.has(`${showId}-tv`);\n};","import { h } from 'preact';\nimport { useState, useEffect, useRef, useMemo, useCallback } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport Helmet from 'preact-helmet';\nimport { useStore } from '../store';\nimport MovieCard from '../components/MovieCard';\nimport { getWatchProgressForMedia, saveWatchProgress, getSeriesHistory, getLastWatchedEpisode, getLastWatchedEpisodeWithProgress, addWatchHistoryEntry } from '../utils/watchHistory';\nimport { useAuth } from '../context/Auth';\nimport { addFavoriteShow, removeFavoriteShow, isShowFavorited } from '../utils/favorites';\nimport './Watch.css';\nimport { API_BASE_URL, IMAGE_BASE_URL, getProxiedImageUrl } from '../config';\n\nconst Watch = (props) => {\n    const [mediaDetails, setMediaDetails] = useState(null);\n    const [videos, setVideos] = useState([]);\n    const [recommendations, setRecommendations] = useState([]);\n    const [streamUrl, setStreamUrl] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [currentSeason, setCurrentSeason] = useState(null);\n    const [currentEpisode, setCurrentEpisode] = useState(null);\n    const [currentSource, setCurrentSource] = useState('videasy');\n    const [availableSources, setAvailableSources] = useState(['videasy', 'vidsrc', 'embedsu']);\n    const [seasonDetails, setSeasonDetails] = useState(null);\n    const [episodesLoading, setEpisodesLoading] = useState(false);\n    const [isDubbed, setIsDubbed] = useState(false);\n    // Removed showNextEpisodePrompt and nextEpisodeCountdown - Videasy handles this automatically\n    const [streamError, setStreamError] = useState(null);\n    const [isRetrying, setIsRetrying] = useState(false);\n\n    const [isDirectSource, setIsDirectSource] = useState(false);\n    const [qualities, setQualities] = useState([]);\n    const videoRef = useRef(null);\n    const [seriesWatchHistory, setSeriesWatchHistory] = useState([]);\n    const [movieProgress, setMovieProgress] = useState(null);\n    const [playerReady, setPlayerReady] = useState(false);\n    const [progressToResume, setProgressToResume] = useState(0);\n    const [currentEpisodePage, setCurrentEpisodePage] = useState(1);\n    const [initialPageSet, setInitialPageSet] = useState(false);\n    const episodesPerPage = 6;\n    const sourceUpdatedFromBackend = useRef(false); // Track if source change is from backend\n    const previousEpisodeRef = useRef(null); // Track previous episode to detect navigation\n    const userNavigatedRef = useRef(false); // Track if user manually navigated to prevent auto-override\n    const hasLoadedResumeData = useRef(false); // Track if we've already loaded resume data once\n    const isAutoNavigating = useRef(false); // Track if navigation is driven by the player\n    const lastPlayerEventNavigation = useRef(null); // Track last PLAYER_EVENT navigation to prevent conflicts\n    const playerEventModeEnabled = useRef(false); // Track if PLAYER_EVENT mode is active\n    const navigationTimeouts = useRef(new Set()); // Track active navigation timeouts\n    const lastPlayerEventTime = useRef(0); // Debounce rapid PLAYER_EVENT messages\n    const lastRouteChange = useRef(0); // Debounce route changes to prevent loops\n    const routeChangeDebounceTime = 1000; // 1 second debounce for route changes\n    const ignoredLegacyNavigation = useRef(null); // Track ignored legacy navigation to prevent log spam\n\n    const { id, type, season, episode } = props.matches;\n    const { user } = useAuth(); // Get authentication state\n\n    const { setCurrentMediaItem, favoritesFetched } = useStore();\n\n    // Initialize season and episode from URL parameters immediately\n    useEffect(() => {\n        if (type === 'tv' || type === 'anime') {\n            const hasExplicitEpisode = season && episode && !isNaN(parseInt(season)) && !isNaN(parseInt(episode));\n            if (hasExplicitEpisode) {\n                const newSeason = parseInt(season, 10);\n                const newEpisode = parseInt(episode, 10);\n                setCurrentSeason(newSeason);\n                setCurrentEpisode(newEpisode);\n            } else {\n                // Default to season 1, episode 1 if no explicit values\n                setCurrentSeason(1);\n                setCurrentEpisode(1);\n            }\n        } else {\n            // For movies, set to null\n            setCurrentSeason(null);\n            setCurrentEpisode(null);\n        }\n    }, [type, season, episode]);\n\n    // Calculate movie progress percentage with a memoized hook for efficiency\n    const movieProgressPercent = useMemo(() => {\n        if (type !== 'movie' || !movieProgress || !movieProgress.progress_seconds || movieProgress.progress_seconds <= 0) {\n            return 0;\n        }\n        if (movieProgress.duration_seconds > 0) {\n            return Math.min(100, (movieProgress.progress_seconds / movieProgress.duration_seconds) * 100);\n        }\n        // Fallback for when duration is missing: 5% if over 30s, otherwise 2%\n        return movieProgress.progress_seconds > 30 ? 5 : 2;\n    }, [type, movieProgress]);\n\n    // Calculate and set initial episode page based on current episode\n    const calculateInitialEpisodePage = useCallback((targetEpisode, totalEpisodes) => {\n        if (!targetEpisode || !totalEpisodes) return 1;\n        \n        const page = Math.ceil(targetEpisode / episodesPerPage);\n        return Math.max(1, Math.min(page, Math.ceil(totalEpisodes / episodesPerPage)));\n    }, [episodesPerPage]);\n\n    // Create stable user ID reference to prevent unnecessary re-renders\n    const userId = user?.id;\n    const userIdRef = useRef(userId);\n    const lastProgressSaveTime = useRef(0); // For throttling\n    \n    // Update ref when userId changes but don't trigger re-renders\n    useEffect(() => {\n        userIdRef.current = userId;\n    }, [userId]);\n\n    // Helper function to debounce route changes and prevent loops\n    const debouncedRoute = (url, replace = false) => {\n        const now = Date.now();\n        if (now - lastRouteChange.current < routeChangeDebounceTime) {\n            console.log('🚫 Route change debounced to prevent refresh loop');\n            return;\n        }\n        lastRouteChange.current = now;\n        route(url, replace);\n    };\n\n    // Clear all navigation timeouts when component unmounts or episode changes\n    useEffect(() => {\n        return () => {\n            navigationTimeouts.current.forEach(timeout => clearTimeout(timeout));\n            navigationTimeouts.current.clear();\n        };\n    }, [currentSeason, currentEpisode]);\n\n    useEffect(() => {\n        // When the component mounts or mediaDetails changes, update the global state\n        if (mediaDetails) {\n            setCurrentMediaItem({ ...mediaDetails, type });\n        }\n        \n        // When the component unmounts, clear the global state\n        return () => {\n            setCurrentMediaItem(null);\n        };\n    }, [mediaDetails, type, setCurrentMediaItem]);\n\n    useEffect(() => {\n        if (!id || !type) {\n            route('/');\n            return;\n        }\n\n        // Reset state on new content\n        setStreamUrl('');\n        setIsDirectSource(false);\n        setQualities([]);\n        setMediaDetails(null);\n        setLoading(true);\n        // Removed prompt reset - Videasy handles this automatically\n        setSeriesWatchHistory([]);\n        // Reset navigation tracking for new content\n        userNavigatedRef.current = false;\n        hasLoadedResumeData.current = false;\n        isAutoNavigating.current = false;\n        lastPlayerEventNavigation.current = null;\n        playerEventModeEnabled.current = false;\n        // Reset pagination state for new content\n        setCurrentEpisodePage(1);\n        setInitialPageSet(false);\n        // Clear any pending navigation timeouts\n        navigationTimeouts.current.forEach(timeout => clearTimeout(timeout));\n        navigationTimeouts.current.clear();\n        // Reset debounce timer\n        lastPlayerEventTime.current = 0;\n        // Reset ignored navigation log\n        ignoredLegacyNavigation.current = null;\n\n        const fetchAllData = async () => {\n            setLoading(true);\n            try {\n                // Create abort controller for timeout handling\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout\n                \n                // Fetch data with better error handling\n                const [detailsData, videosData, recommendationsData] = await Promise.all([\n                    fetch(`${API_BASE_URL}/tmdb/${type}/${id}`, { signal: controller.signal })\n                        .then(res => {\n                            if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n                            return res.json();\n                        })\n                        .catch(err => {\n                            console.error('Error fetching media details:', err);\n                            throw err;\n                        }),\n                    fetch(`${API_BASE_URL}/tmdb/${type}/${id}/videos`, { signal: controller.signal })\n                        .then(res => {\n                            if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n                            return res.json();\n                        })\n                        .catch(err => {\n                            console.error('Error fetching videos:', err);\n                            return { results: [] }; // Return empty array on error\n                        }),\n                    fetch(`${API_BASE_URL}/tmdb/${type}/${id}/recommendations`, { signal: controller.signal })\n                        .then(res => {\n                            if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n                            return res.json();\n                        })\n                        .catch(err => {\n                            console.error('Error fetching recommendations:', err);\n                            return { results: [] }; // Return empty array on error\n                        })\n                ]);\n                \n                clearTimeout(timeoutId);\n                setMediaDetails(detailsData);\n                setVideos(videosData.results || []);\n                setRecommendations(recommendationsData.results || []);\n                \n                // Season and episode initialization is now handled in a separate effect\n            } catch (error) {\n                setMediaDetails(null);\n                setVideos([]);\n                setRecommendations([]);\n            } finally {\n                setLoading(false);\n            }\n        };\n        fetchAllData();\n    }, [id, type, season, episode]); // Remove user from dependencies to prevent remount\n\n    // Separate effect to handle authentication-dependent data loading - ONLY run once to avoid overriding user selections\n    useEffect(() => {\n        const loadUserSpecificData = async () => {\n            if (!user || !mediaDetails || !id || !type) {\n                // Reset progress states when no user is authenticated\n                if (type === 'movie') {\n                    setMovieProgress(null);\n                } else if (type === 'tv' || type === 'anime') {\n                    setSeriesWatchHistory([]);\n                }\n                return;\n            }\n            \n            try {\n                // Only fetch user-specific data when user is authenticated\n                if ((type === 'tv' || type === 'anime') && mediaDetails.seasons && mediaDetails.seasons.length > 0) {\n                    const hasExplicitEpisode = season && episode && !isNaN(parseInt(season)) && !isNaN(parseInt(episode));\n                    \n                    // Modified logic: Always try to get continue watching when no explicit episode in URL\n                    if (!hasExplicitEpisode && !hasLoadedResumeData.current && currentSeason !== null && currentEpisode !== null) {\n                        console.log('🎬 Checking for continue watching episode...');\n                        const lastWatchedWithProgress = await getLastWatchedEpisodeWithProgress(id);\n                        if (lastWatchedWithProgress && lastWatchedWithProgress.season && lastWatchedWithProgress.episode) {\n                            console.log(`🔄 Continue watching: S${lastWatchedWithProgress.season}E${lastWatchedWithProgress.episode}`);\n                            // Use a timeout to prevent immediate re-render loops\n                            setTimeout(() => {\n                                setCurrentSeason(lastWatchedWithProgress.season);\n                                setCurrentEpisode(lastWatchedWithProgress.episode);\n                                // Update URL to reflect the continue watching episode\n                                const newUrl = `/watch/${type}/${id}/season/${lastWatchedWithProgress.season}/episode/${lastWatchedWithProgress.episode}`;\n                                route(newUrl, true);\n                            }, 100);\n                        } else {\n                            console.log('📭 No continue watching data found, starting from beginning');\n                        }\n                        hasLoadedResumeData.current = true;\n                    }\n                }\n                \n                if (type === 'tv' || type === 'anime') {\n                    const history = await getSeriesHistory(id);\n                    setSeriesWatchHistory(history);\n                } else if (type === 'movie') {\n                    // Load movie progress data\n                    const progressData = await getWatchProgressForMedia(id, type);\n                    console.log('Movie progress data loaded:', progressData);\n                    setMovieProgress(progressData);\n                }\n            } catch (error) {\n                console.error('Error loading user-specific data:', error);\n            }\n        };\n        \n        loadUserSpecificData();\n    }, [user, mediaDetails, id, type]); // Remove season and episode from dependencies to prevent re-running when user changes selection\n\n    // Reset pagination when season changes, but respect initial page setting\n    useEffect(() => {\n        if (currentSeason !== null && !initialPageSet) {\n            setCurrentEpisodePage(1);\n        }\n    }, [currentSeason]);\n\n    // Pagination state is now completely independent\n\n    // Removed auto-navigation - pagination is now completely independent\n\n    useEffect(() => {\n        const fetchSeasonDetails = async () => {\n            if (type !== 'tv' && type !== 'anime' || !id || !currentSeason || currentSeason === null) return;\n            setEpisodesLoading(true);\n            try {\n                // Use the existing TMDB proxy route to fetch season details with timeout\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n                \n                const res = await fetch(`${API_BASE_URL}/tmdb/${type}/${id}/season/${currentSeason}`, {\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                \n                if (res.ok) {\n                    const data = await res.json();\n                    setSeasonDetails(data);\n                    \n                    // Calculate and set initial page based on current episode\n                    if (currentEpisode && data.episodes && !initialPageSet) {\n                        const page = Math.ceil(currentEpisode / episodesPerPage);\n                        const maxPage = Math.ceil(data.episodes.length / episodesPerPage);\n                        const initialPage = Math.max(1, Math.min(page, maxPage));\n                        setCurrentEpisodePage(initialPage);\n                        setInitialPageSet(true);\n                    }\n                } else {\n                    setSeasonDetails(null);\n                }\n            } catch (error) {\n                setSeasonDetails(null);\n            } finally {\n                setEpisodesLoading(false);\n            }\n        };\n        fetchSeasonDetails();\n    }, [id, type, currentSeason, currentEpisode, initialPageSet]);\n\n    useEffect(() => {\n        // Check if this is due to episode navigation\n        const currentEpisodeKey = `${currentSeason}-${currentEpisode}`;\n        const episodeChanged = previousEpisodeRef.current && previousEpisodeRef.current !== currentEpisodeKey;\n        previousEpisodeRef.current = currentEpisodeKey;\n\n        if (sourceUpdatedFromBackend.current && !episodeChanged) {\n            sourceUpdatedFromBackend.current = false;\n            return;\n        }\n\n        if (episodeChanged) {\n            sourceUpdatedFromBackend.current = false;\n        }\n\n        const fetchStreamUrl = async () => {\n            if (!id || !type) return;\n            \n            // For TV shows and anime, wait until season and episode are set\n            if ((type === 'tv' || type === 'anime') && (currentSeason === null || currentEpisode === null)) {\n                return;\n            }\n\n            // Removed prompt reset - Videasy handles this automatically\n            setStreamError(null);\n            setIsRetrying(false);\n\n            // Fetch progress directly to avoid race conditions and ensure URL is up-to-date\n            let existingProgress = 0;\n            if (userIdRef.current) {\n                try {\n                    const progressData = await getWatchProgressForMedia(id, type, currentSeason, currentEpisode);\n                    if (progressData && progressData.progress_seconds > 30) {\n                        existingProgress = progressData.progress_seconds;\n                        setProgressToResume(progressData.progress_seconds); // Update state for UI elements\n                    } else {\n                        setProgressToResume(0);\n                    }\n                } catch (error) {\n                    console.error('Error fetching progress for stream URL:', error);\n                    setProgressToResume(0);\n                }\n            } else {\n                setProgressToResume(0);\n            }\n\n            let url = `${API_BASE_URL}/stream-url?type=${type}&id=${id}&source=${currentSource}`;\n            if (type === 'tv' || type === 'anime') {\n                url += `&season=${currentSeason}&episode=${currentEpisode}`;\n                if (type === 'anime') {\n                    url += `&dub=${isDubbed}`;\n                }\n            }\n            \n            // Add Videasy-specific parameters for enhanced functionality\n            if (currentSource === 'videasy') {\n                // Add progress for resume functionality  \n                if (existingProgress > 30) {\n                    url += `&progress=${Math.floor(existingProgress)}`;\n                }\n                \n                // For TV shows and anime, enable all Videasy features\n                if (type === 'tv' || type === 'anime') {\n                    url += `&nextEpisode=true&episodeSelector=true&autoplayNextEpisode=true`;\n                }\n            }\n\n            try {\n                // Add timeout to stream URL fetch\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), 20000); // 20 second timeout for streams\n                \n                const response = await fetch(url, { signal: controller.signal });\n                clearTimeout(timeoutId);\n                const streamUrlData = await response.json();\n\n                if (!response.ok) {\n                    throw new Error(streamUrlData.message || `HTTP ${response.status}`);\n                }\n\n                let finalStreamUrl = streamUrlData.url;\n\n                if (!finalStreamUrl) {\n                    throw new Error(\"The streaming service did not provide a valid URL. This content might not be available.\");\n                }\n                \n                if (streamUrlData.isDirectSource) {\n                    setStreamUrl(finalStreamUrl);\n                    setQualities(streamUrlData.qualities || []);\n                    setIsDirectSource(true);\n                } else {\n                    setStreamUrl(finalStreamUrl);\n                    setIsDirectSource(false);\n                    setQualities([]);\n                }\n\n                if (streamUrlData.currentSource && streamUrlData.currentSource !== currentSource) {\n                    sourceUpdatedFromBackend.current = true;\n                    setCurrentSource(streamUrlData.currentSource);\n                }\n\n                if (streamUrlData.availableSources) {\n                    setAvailableSources(streamUrlData.availableSources);\n                }\n\n                setStreamError(null);\n            } catch (error) {\n                let errorMessage = \"Could not load the video stream.\";\n                let canRetry = true;\n                \n                if (error.name === 'AbortError') {\n                    errorMessage = \"Stream request timed out. Please try again.\";\n                } else if (error.message.includes('unavailable')) {\n                    errorMessage = \"All streaming sources are currently unavailable. This is usually temporary.\";\n                } else if (error.message.includes('503')) {\n                    errorMessage = \"Streaming service is temporarily down. Please try again in a few minutes.\";\n                } else if (error.message.includes('404')) {\n                    errorMessage = \"This content is not available from the current source.\";\n                } else if (error.message.includes('NetworkError') || error.message.includes('fetch')) {\n                    errorMessage = \"Network connection issue. Please check your internet and try again.\";\n                } else {\n                    errorMessage = \"Unable to load video stream. This might be due to leaving and returning to the browser.\";\n                }\n                \n                // Prevent debugger from opening in production\n                if (process.env.NODE_ENV === 'production') {\n                    console.log('Video stream error:', error.message);\n                } else {\n                    console.error('Video stream error:', error);\n                }\n                \n                setStreamError({ message: errorMessage, canRetry });\n                setStreamUrl('');\n                setIsDirectSource(false);\n            }\n        };\n\n        fetchStreamUrl();\n    }, [id, type, currentSeason, currentEpisode, currentSource, isDubbed]); // Add back necessary dependencies but with smart prevention\n\n    // Removed handleNextEpisode and countdown logic - Videasy handles episode navigation automatically\n\n    // Add immediate watch history entry when user navigates to watch page (throttled)\n    useEffect(() => {\n        if (user && mediaDetails) {\n            const historyKey = `${id}-${type}-${currentSeason}-${currentEpisode}`;\n            const now = Date.now();\n            const lastHistoryUpdate = window.lastHistoryUpdate || {};\n            \n            if (!lastHistoryUpdate[historyKey] || now - lastHistoryUpdate[historyKey] > 5000) {\n                console.log('📝 Adding immediate watch history entry:', {\n                    mediaId: id,\n                    type,\n                    season: currentSeason,\n                    episode: currentEpisode,\n                    title: mediaDetails.title || mediaDetails.name\n                });\n                \n                addWatchHistoryEntry(\n                    { ...mediaDetails, id: mediaDetails.id, type, season: currentSeason, episode: currentEpisode }\n                ).then(() => {\n                    console.log('✅ Watch history entry added successfully');\n                }).catch(error => {\n                    console.error('❌ Failed to add watch history entry:', error);\n                });\n                \n                window.lastHistoryUpdate = { ...lastHistoryUpdate, [historyKey]: now };\n            }\n        }\n    }, [user, mediaDetails, type, currentSeason, currentEpisode, id]);\n\n    // Progress tracking for different streaming services\n    useEffect(() => {\n        if (user) {\n            console.log('🔐 Progress tracking setup:', { \n                hasUser: true, \n                userId: user.id, \n                hasMediaDetails: !!mediaDetails \n            });\n        }\n        \n        if (!user || !mediaDetails) {\n            if (user && !mediaDetails) {\n                console.log('⚠️ Progress tracking disabled - media details not yet available');\n            }\n            return;\n        }\n\n        const handleProgressUpdate = async (progressData, messageType) => {\n            console.log(`📊 Progress update received via ${messageType}:`, progressData);\n            \n            // Determine the season and episode to save progress for.\n            // Prioritize data from the event, then fall back to component state.\n            const seasonToSave = progressData.season || currentSeason;\n            const episodeToSave = progressData.episode || currentEpisode;\n\n            if (progressData && progressData.progress >= 0 && progressData.duration > 0) {\n                const now = Date.now();\n                const progressKey = `${id}-${type}-${seasonToSave}-${episodeToSave}`;\n                const lastProgressSave = window.lastProgressSave || {};\n                \n                if (!lastProgressSave[progressKey] || now - lastProgressSave[progressKey] > 5000) {\n                    console.log(`🎬 Attempting to save progress for ${type} ${id}:`, {\n                        progress: progressData.progress,\n                        duration: progressData.duration,\n                        season: seasonToSave,\n                        episode: episodeToSave\n                    });\n                    \n                    const saveResult = await saveWatchProgress(\n                        { ...mediaDetails, id: mediaDetails.id, type, season: seasonToSave, episode: episodeToSave },\n                        progressData.progress,\n                        progressData.duration\n                    );\n                    \n                    if (saveResult) {\n                        console.log('✅ Progress saved successfully');\n                        window.lastProgressSave = { ...lastProgressSave, [progressKey]: now };\n\n                        // Update state in real-time only if the progress applies to the currently viewed item\n                        if (seasonToSave === currentSeason && episodeToSave === currentEpisode) {\n                            if (type === 'movie') {\n                                setMovieProgress({\n                                    progress_seconds: progressData.progress,\n                                    duration_seconds: progressData.duration\n                                });\n                            } else if (type === 'tv' || type === 'anime') {\n                                setSeriesWatchHistory(prevHistory => {\n                                    const historyCopy = [...prevHistory];\n                                    const index = historyCopy.findIndex(\n                                        h => h.season_number === seasonToSave && h.episode_number === episodeToSave\n                                    );\n                            \n                                    const newProgressData = {\n                                        media_id: parseInt(id, 10),\n                                        media_type: type,\n                                        season_number: seasonToSave,\n                                        episode_number: episodeToSave,\n                                        progress_seconds: progressData.progress,\n                                        duration_seconds: progressData.duration,\n                                    };\n                            \n                                    if (index > -1) {\n                                        historyCopy[index] = { ...historyCopy[index], ...newProgressData };\n                                    } else {\n                                        historyCopy.push(newProgressData);\n                                    }\n                            \n                                    return historyCopy;\n                                });\n                            }\n                        }\n                    } else {\n                        console.error('❌ Failed to save progress');\n                    }\n                } else {\n                    console.log('⏭️ Progress save skipped (too recent):', {\n                        timeSinceLastSave: now - lastProgressSave[progressKey],\n                        threshold: 5000\n                    });\n                }\n\n                // Removed next episode prompt logic - Videasy handles autoplay automatically\n                const timeRemaining = progressData.duration - progressData.progress;\n                // Videasy will handle next episode prompts automatically\n            } else {\n                console.log('⚠️ Progress update ignored (insufficient data):', {\n                    hasProgressData: !!progressData,\n                    progress: progressData?.progress,\n                    duration: progressData?.duration,\n                    meetsThreshold: progressData?.progress >= 0 && progressData?.duration > 0\n                });\n            }\n        };\n\n        let progressHandler;\n        let messageListener;\n\n        if (isDirectSource) {\n            // Handle direct video sources (like MP4 files)\n            const videoElement = videoRef.current;\n            if (!videoElement) return;\n\n            const handleLoadedMetadata = async () => {\n                const history = await getWatchProgressForMedia(id, type, currentSeason, currentEpisode);\n                if (history && history.progress_seconds) {\n                    videoElement.currentTime = history.progress_seconds;\n                }\n            };\n\n            const handleTimeUpdate = async () => {\n                if (videoElement.currentTime > 0) {\n                    const now = Date.now();\n                    const progressKey = `${id}-${type}-${currentSeason}-${currentEpisode}`;\n                    const lastProgressSave = window.lastProgressSave || {};\n                    \n                    if (!lastProgressSave[progressKey] || now - lastProgressSave[progressKey] > 5000) {\n                        const progressData = {\n                            progress: Math.round(videoElement.currentTime),\n                            duration: Math.round(videoElement.duration),\n                            percentage: videoElement.duration > 0 ? (videoElement.currentTime / videoElement.duration) * 100 : 0\n                        };\n                        \n                        console.log(`🎬 Direct video - saving progress:`, progressData);\n                        \n                        const saveResult = await saveWatchProgress(\n                            { ...mediaDetails, id: mediaDetails.id, type, season: currentSeason, episode: currentEpisode },\n                            progressData.progress,\n                            progressData.duration\n                        );\n                        \n                        if (saveResult) {\n                            console.log('✅ Direct video progress saved successfully');\n                            window.lastProgressSave = { ...lastProgressSave, [progressKey]: now };\n\n                            // Update state in real-time\n                            if (type === 'movie') {\n                                setMovieProgress({\n                                    progress_seconds: progressData.progress,\n                                    duration_seconds: progressData.duration\n                                });\n                            } else if (type === 'tv' || type === 'anime') {\n                                setSeriesWatchHistory(prevHistory => {\n                                    const historyCopy = [...prevHistory];\n                                    const index = historyCopy.findIndex(\n                                        h => h.season_number === currentSeason && h.episode_number === currentEpisode\n                                    );\n                            \n                                    const newProgressData = {\n                                        media_id: parseInt(id, 10),\n                                        media_type: type,\n                                        season_number: currentSeason,\n                                        episode_number: currentEpisode,\n                                        progress_seconds: progressData.progress,\n                                        duration_seconds: progressData.duration,\n                                    };\n                            \n                                    if (index > -1) {\n                                        historyCopy[index] = { ...historyCopy[index], ...newProgressData };\n                                    } else {\n                                        historyCopy.push(newProgressData);\n                                    }\n                            \n                                    return historyCopy;\n                                });\n                            }\n                        } else {\n                            console.error('❌ Failed to save direct video progress');\n                        }\n\n                        // Removed next episode prompt logic - Videasy handles autoplay automatically\n                        const timeRemaining = progressData.duration - progressData.progress;\n                        // Videasy will handle next episode prompts automatically\n                    }\n                }\n            };\n\n            videoElement.addEventListener('loadedmetadata', handleLoadedMetadata);\n            videoElement.addEventListener('timeupdate', handleTimeUpdate);\n\n            return () => {\n                videoElement.removeEventListener('loadedmetadata', handleLoadedMetadata);\n                videoElement.removeEventListener('timeupdate', handleTimeUpdate);\n            };\n        } else {\n            messageListener = (event) => {\n                const trustedDomains = ['player.videasy.net', 'vidsrc.to', 'embed.su', 'vidsrc.xyz', 'vidsrc.in', 'vidsrc.pm'];\n                const origin = new URL(event.origin);\n                \n                if (!trustedDomains.includes(origin.hostname)) {\n                    return;\n                }\n\n                try {\n                    // Attempt to parse the data if it's a string, otherwise use it directly\n                    const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\n\n                    // New: Efficient `PROGRESS_UPDATE` format from Videasy/other players\n                    if (data && data.type === 'PROGRESS_UPDATE' && data.data) {\n                        const progressData = {\n                            progress: data.data.progress?.watched,\n                            duration: data.data.progress?.duration,\n                            // Ensure season/episode from the message are used if available\n                            season: data.data.season || currentSeason,\n                            episode: data.data.episode || currentEpisode\n                        };\n                        handleProgressUpdate(progressData, 'PROGRESS_UPDATE');\n                        return; // Exit after handling\n                    }\n\n                    // Deprecated: Legacy `MEDIA_DATA` format for backward compatibility\n                    if (data.type === 'MEDIA_DATA' && data.data) {\n                        console.warn(\"Legacy 'MEDIA_DATA' format detected. Player should be updated.\");\n                        \n                        let mediaData = data.data;\n                        if (typeof mediaData === 'string') {\n                            try {\n                                mediaData = JSON.parse(mediaData);\n                            } catch (e) {\n                                console.error('Error parsing double-encoded MEDIA_DATA string:', e);\n                                return;\n                            }\n                        }\n\n                        // The data can be an object keyed by `tv-id`.\n                        const mediaKey = `${type}-${id}`;\n                        const media = mediaData[mediaKey];\n                        \n                        if (media && media.progress) {\n                            const normalizedProgress = {\n                                progress: media.progress.watched,\n                                duration: media.progress.duration,\n                                season: media.last_season_watched,\n                                episode: media.last_episode_watched,\n                            };\n                            handleProgressUpdate(normalizedProgress, 'MEDIA_DATA');\n                        }\n                        return; // Exit after handling\n                    }\n\n                    // Generic event handling for other player messages\n                    if (data.type === 'PLAYER_EVENT' && data.data) {\n                        if (data.data.event === 'timeupdate') {\n                            const progressData = {\n                                progress: data.data.time,\n                                duration: data.data.duration\n                            };\n                            if (progressData.progress && progressData.duration) {\n                                handleProgressUpdate(progressData, 'PLAYER_EVENT');\n                            }\n                        } else if (data.data.event === 'ended' && (type === 'tv' || type === 'anime')) {\n                            console.log('Player reported \"ended\" event - Videasy will handle next episode automatically.');\n                            // Removed handleNextEpisode() - Videasy handles this automatically\n                        } else if (data.data.event === 'player_ready') {\n                            console.log('Player is ready.');\n                            setPlayerReady(true);\n                        }\n                    }\n\n                } catch (error) {\n                    // This will catch JSON parsing errors or other exceptions\n                    console.error(\"Error processing message from player:\", {\n                        origin: event.origin,\n                        data: event.data,\n                        error: error.message\n                    });\n                }\n            };\n            \n            window.addEventListener('message', messageListener);\n            \n            // Fallback for players that don't send `player_ready`\n            const readyTimeout = setTimeout(() => {\n                if (!playerReady) {\n                    console.log('Player ready timeout, starting fallback progress tracking.');\n                    startFallbackTracking();\n                }\n            }, 5000);\n\n            return () => {\n                window.removeEventListener('message', messageListener);\n                if (progressHandler) clearInterval(progressHandler);\n                clearTimeout(readyTimeout);\n            };\n        }\n    }, [user, mediaDetails, isDirectSource, videoRef, currentSeason, currentEpisode, playerReady]);\n\n    const startFallbackTracking = () => {\n        // Fallback progress tracking if player doesn't post messages\n        // This is a failsafe and should ideally not be relied upon\n        const progressHandler = setInterval(() => {\n            if (document.hasFocus()) {\n                console.log('Fallback: Checking for progress...');\n                // You would need a way to get progress from the iframe if possible,\n                // but cross-origin restrictions make this very difficult.\n                // This is a placeholder for a potential future implementation.\n            }\n        }, 15000);\n\n        return () => clearInterval(progressHandler);\n    };\n\n    if (loading) {\n        return (\n            <div class=\"loading-state\">\n                <div class=\"loading-spinner\"></div>\n                <p>Loading media details...</p>\n            </div>\n        );\n    }\n\n    if (!mediaDetails) {\n        return (\n            <div class=\"container\">\n                <div class=\"error-state\">\n                    <h2>Unable to Load Media</h2>\n                    <p>We couldn't load the details for this content. This could be due to:</p>\n                    <ul>\n                        <li>Network connectivity issues</li>\n                        <li>The content may no longer be available</li>\n                        <li>Server maintenance</li>\n                    </ul>\n                    <button \n                        onClick={() => window.location.reload()} \n                        class=\"btn btn-primary\"\n                        style={{ marginTop: '20px' }}\n                    >\n                        Try Again\n                    </button>\n                </div>\n            </div>\n        );\n    }\n    \n    const { title, name, overview, vote_average, release_date, first_air_date, runtime, number_of_seasons, genres, poster_path } = mediaDetails;\n    \n    // For TV episodes, check if this specific episode is favorited\n    const favorited = isShowFavorited(mediaDetails.id);\n    \n    const year = release_date || first_air_date ? new Date(release_date || first_air_date).getFullYear() : '';\n\n    const handleFavoriteClick = () => {\n        if (favorited) {\n            removeFavoriteShow(mediaDetails);\n        } else {\n            addFavoriteShow({ ...mediaDetails, type });\n        }\n    };\n\n    return (\n        <div>\n            <Helmet>\n                <title>{title || name} - FreeStream</title>\n            </Helmet>\n            <div class=\"player-container\">\n                {!streamUrl && streamError && (\n                    <div class=\"stream-error-message\">\n                        <p>{streamError.message}</p>\n                        {streamError.canRetry && (\n                            <div class=\"error-actions\">\n                                <button \n                                    onClick={async () => {\n                                        setIsRetrying(true);\n                                        // Wait a bit then retry\n                                        setTimeout(() => {\n                                            const fetchStreamUrl = async () => {\n                                                const url = `${API_BASE_URL}/stream-url?type=${type}&id=${id}&source=${currentSource}${(type === 'tv' || type === 'anime') ? `&season=${currentSeason}&episode=${currentEpisode}` : ''}${type === 'anime' ? `&dub=${isDubbed}` : ''}`;\n                                                \n                                                try {\n                                                    const response = await fetch(url);\n                                                    const streamUrlData = await response.json();\n                                                    \n                                                    if (response.ok) {\n                                                        setStreamUrl(streamUrlData.url);\n                                                        setIsDirectSource(streamUrlData.isDirectSource);\n                                                        setQualities(streamUrlData.qualities || []);\n                                                        setStreamError(null);\n                                                    } else {\n                                                        throw new Error(streamUrlData.message);\n                                                    }\n                                                } catch (error) {\n                                                    console.error('Retry failed:', error);\n                                                    setStreamError({ \n                                                        message: \"Retry failed. Please try selecting a different source.\", \n                                                        canRetry: true \n                                                    });\n                                                }\n                                                setIsRetrying(false);\n                                            };\n                                            fetchStreamUrl();\n                                        }, 1000);\n                                    }}\n                                    disabled={isRetrying}\n                                    class=\"btn retry-btn\"\n                                >\n                                    {isRetrying ? 'Retrying...' : 'Retry'}\n                                </button>\n                                <p>Or try selecting a different source from the list below.</p>\n                            </div>\n                        )}\n                    </div>\n                )}\n                {!streamUrl && !streamError && (\n                    <div class=\"stream-loading\">\n                        <p>Loading video stream...</p>\n                    </div>\n                )}\n                {isDirectSource ? (\n                    <video ref={videoRef} src={streamUrl} controls autoPlay width=\"100%\"></video>\n                ) : (\n                    streamUrl && (\n                        <iframe \n                            src={streamUrl}\n                            width=\"100%\"\n                            height=\"100%\"\n                            style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}\n                            frameBorder=\"0\"\n                            allowFullScreen\n                            allow=\"autoplay; picture-in-picture\"\n                            sandbox=\"allow-forms allow-pointer-lock allow-same-origin allow-scripts allow-top-navigation\"\n                            title=\"Video Player\"\n                            loading=\"eager\"\n                            referrerPolicy=\"no-referrer-when-downgrade\"\n                            importance=\"high\"\n                            onLoad={() => {\n                                console.log('🎬 Player iframe loaded');\n                                setPlayerReady(true);\n                                \n                                // Handle progress restoration via postMessage (only for non-Videasy sources)\n                                // Videasy handles progress natively via URL parameters for faster loading\n                                if (currentSource !== 'videasy' && progressToResume > 30) {\n                                    setTimeout(() => {\n                                        const iframe = document.querySelector('iframe');\n                                        if (iframe && iframe.contentWindow) {\n                                            try {\n                                                iframe.contentWindow.postMessage({\n                                                    type: 'SEEK_TO',\n                                                    time: progressToResume\n                                                }, '*');\n                                                console.log(`📍 Sent seek command to restore progress: ${progressToResume}s`);\n                                            } catch (e) {\n                                                console.log('Could not send seek command:', e);\n                                            }\n                                        }\n                                    }, 500); // Reduced to 500ms for faster response\n                                } else if (currentSource === 'videasy') {\n                                    console.log('📍 Videasy native resume - no seeking needed');\n                                } else {\n                                    console.log('📍 No significant progress to resume, starting from beginning');\n                                }\n                            }}\n                        ></iframe>\n                    )\n                )}\n                {/* Removed next episode prompt UI - Videasy handles this automatically */}\n            </div>\n            <div class=\"container\">\n                <div class=\"media-details-layout\">\n                    <div class=\"poster\">\n                        <img src={getProxiedImageUrl(poster_path ? `${IMAGE_BASE_URL}${poster_path}` : 'https://via.placeholder.com/500x750.png?text=No+Image')} alt={title || name} />\n                        {movieProgressPercent > 0 && (\n                            <div class=\"movie-progress-container\">\n                                <div class=\"movie-progress-bar\">\n                                    <div \n                                        class=\"movie-progress\" \n                                        style={{ width: `${Math.max(2, movieProgressPercent)}%` }}\n                                    ></div>\n                                </div>\n                                <div class=\"movie-progress-text\">\n                                    {movieProgress.duration_seconds > 0 \n                                        ? `${Math.floor(movieProgress.progress_seconds / 60)}m / ${Math.floor(movieProgress.duration_seconds / 60)}m watched`\n                                        : `${Math.floor(movieProgress.progress_seconds / 60)}m watched`\n                                    }\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                                            <div class=\"details\">\n                        <div class=\"title-container\">\n                            <h1>{title || name}</h1>\n                            <button\n                                onClick={handleFavoriteClick}\n                                class={`favorite-btn ${favorited ? 'favorited' : ''}`}\n                                disabled={!favoritesFetched}\n                            >\n                                {favoritesFetched ? (favorited ? '♥ Favorited' : '♡ Favorite') : '...'}\n                            </button>\n                            {!user && (\n                                <span class=\"login-hint\">\n                                    <small>\n                                        <a href=\"/login\" style={{ color: '#007bff', textDecoration: 'none' }}>\n                                            Log in\n                                        </a> to save favorites, track progress & continue watching\n                                    </small>\n                                </span>\n                            )}\n                        </div>\n                        <div class=\"meta\">\n                            <span class=\"rating\">★ {mediaDetails.vote_average ? mediaDetails.vote_average.toFixed(1) : 'N/A'}</span>\n                            {year && <span>{year}</span>}\n                            {runtime && <span>{runtime} min</span>}\n                            {number_of_seasons && <span>{number_of_seasons} Seasons</span>}\n                        </div>\n                        <div class=\"genres\">\n                            {genres && genres.map(g => <span class=\"genre-tag\">{g.name}</span>)}\n                        </div>\n                        <p class=\"overview\">{overview}</p>\n                        {qualities.length > 0 && (\n                            <div class=\"quality-selector\">\n                                <label>Quality:</label>\n                                {qualities.map(q => (\n                                    <button \n                                        class={`quality-btn ${streamUrl === q.url ? 'active' : ''}`}\n                                        onClick={() => setStreamUrl(q.url)}\n                                    >\n                                        {q.quality}p\n                                    </button>\n                                ))}\n                            </div>\n                        )}\n                    </div>\n                </div>\n                \n                {type === 'anime' && (\n                    <div class=\"select-container\">\n                        <label for=\"dub-select\">Audio:</label>\n                        <select\n                            id=\"dub-select\"\n                            value={isDubbed}\n                            onChange={(e) => setIsDubbed(e.target.value === 'true')}\n                        >\n                            <option value=\"false\">Subbed</option>\n                            <option value=\"true\">Dubbed</option>\n                        </select>\n                    </div>\n                )}\n\n                <div class=\"selectors-container\">\n                    {(type === 'tv' || type === 'anime') && mediaDetails && mediaDetails.seasons && (\n                        <div class=\"select-container\">\n                            <label>Season:</label>\n                            <div class=\"selector-buttons\">\n                                {mediaDetails.seasons\n                                    .filter(s => s.season_number > 0)\n                                    .map(s => (\n                                        <button\n                                            key={s.id}\n                                            class={`selector-btn ${currentSeason === s.season_number ? 'active' : ''}`}\n                                            onClick={() => {\n                                                console.log(`🎯 User manually selected season ${s.season_number}`);\n                                                userNavigatedRef.current = true;\n                                                ignoredLegacyNavigation.current = null; // Reset ignored navigation log\n                                                const newUrl = `/watch/${type}/${id}/season/${s.season_number}/episode/1`;\n                                                route(newUrl, true);\n                                            }}\n                                        >\n                                            {s.name}\n                                        </button>\n                                    ))}\n                            </div>\n                        </div>\n                    )}\n                    {availableSources.length > 1 && (\n                         <div class=\"select-container\">\n                            <label>Source:</label>\n                            <div class=\"selector-buttons\">\n                                {availableSources.map(source => (\n                                    <button\n                                        key={source}\n                                        class={`selector-btn ${currentSource === source ? 'active' : ''}`}\n                                        onClick={() => setCurrentSource(source)}\n                                    >\n                                        {source}\n                                    </button>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </div>\n\n                {(type === 'tv' || type === 'anime') && currentSeason !== null && currentEpisode !== null && (\n                    <div class=\"episodes-container\">\n                        <h3>Episodes</h3>\n                        {episodesLoading ? (\n                            <div class=\"loading-spinner\"></div>\n                        ) : (\n                            <>\n                                <div class=\"episode-list\">\n                                    {seasonDetails?.episodes\n                                        ?.slice((currentEpisodePage - 1) * episodesPerPage, currentEpisodePage * episodesPerPage)\n                                        ?.map(episode => {\n                                            // Find the progress for this specific episode from the array\n                                            const episodeHistory = seriesWatchHistory.find(\n                                                h => h.season_number === currentSeason && h.episode_number === episode.episode_number\n                                            );\n                                            \n                                            // Calculate progress percentage with better error handling and fallback\n                                            const progressPercent = (() => {\n                                                if (episodeHistory && episodeHistory.progress_seconds > 0) {\n                                                    if (episodeHistory.duration_seconds && episodeHistory.duration_seconds > 0) {\n                                                        return Math.min(100, (episodeHistory.progress_seconds / episodeHistory.duration_seconds) * 100);\n                                                    }\n                                                    // Fallback for when duration is not available.\n                                                    // Show 5% for >30s, otherwise 2% to indicate some progress.\n                                                    return episodeHistory.progress_seconds > 30 ? 5 : 2;\n                                                }\n                                                return 0;\n                                            })();\n\n                                            return (\n                                                <div \n                                                    key={episode.id}\n                                                    class={`episode-card ${episode.episode_number === currentEpisode ? 'active' : ''}`}\n                                                    onClick={() => {\n                                                        console.log(`🎯 User manually selected episode ${episode.episode_number}`);\n                                                        userNavigatedRef.current = true;\n                                                        ignoredLegacyNavigation.current = null; // Reset ignored navigation log\n                                                        const newUrl = `/watch/${type}/${id}/season/${currentSeason}/episode/${episode.episode_number}`;\n                                                        route(newUrl, true);\n                                                    }}\n                                                >\n                                                    <div class=\"episode-card-image\">\n                                                        <img src={getProxiedImageUrl(episode.still_path ? `${IMAGE_BASE_URL}${episode.still_path}` : `https://via.placeholder.com/300x169.png?text=${encodeURIComponent(episode.name)}`)} alt={episode.name} />\n                                                        <div class=\"episode-number-badge\">{episode.episode_number}</div>\n                                                        {progressPercent > 0 && (\n                                                            <div class=\"episode-progress-bar\">\n                                                                <div class=\"episode-progress\" style={{width: `${Math.max(2, progressPercent)}%`}}></div>\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                    <div class=\"episode-card-content\">\n                                                        <h4>{episode.name}</h4>\n                                                        <p class=\"episode-overview\">{episode.overview}</p>\n                                                    </div>\n                                                </div>\n                                            );\n                                        })}\n                                </div>\n\n                                {/* Pagination Controls */}\n                                {seasonDetails?.episodes && seasonDetails.episodes.length > episodesPerPage && (\n                                    <div class=\"pagination-controls\">\n                                        <button \n                                            class=\"pagination-btn\" \n                                            onClick={() => setCurrentEpisodePage(prev => Math.max(1, prev - 1))}\n                                            disabled={currentEpisodePage === 1}\n                                        >\n                                            ← Previous\n                                        </button>\n                                        \n                                        <div class=\"pagination-info\">\n                                            <span class=\"page-numbers\">\n                                                {Array.from({ length: Math.ceil(seasonDetails.episodes.length / episodesPerPage) }, (_, i) => i + 1).map(pageNum => (\n                                                    <button\n                                                        key={pageNum}\n                                                        class={`page-number ${pageNum === currentEpisodePage ? 'active' : ''}`}\n                                                        onClick={() => setCurrentEpisodePage(pageNum)}\n                                                    >\n                                                        {pageNum}\n                                                    </button>\n                                                ))}\n                                            </span>\n                                            <span class=\"page-text\">\n                                                Page {currentEpisodePage} of {Math.ceil(seasonDetails.episodes.length / episodesPerPage)} \n                                                ({seasonDetails.episodes.length} episodes)\n                                            </span>\n                                        </div>\n                                        \n                                        <button \n                                            class=\"pagination-btn\" \n                                            onClick={() => setCurrentEpisodePage(prev => Math.min(Math.ceil(seasonDetails.episodes.length / episodesPerPage), prev + 1))}\n                                            disabled={currentEpisodePage === Math.ceil(seasonDetails.episodes.length / episodesPerPage)}\n                                        >\n                                            Next →\n                                        </button>\n                                    </div>\n                                )}\n                            </>\n                        )}\n                    </div>\n                )}\n\n                {recommendations.length > 0 && (\n                    <div class=\"recommendations\">\n                        <h2>More Like This</h2>\n                        <div class=\"movie-grid\">\n                            {recommendations.map(item => (\n                                <MovieCard \n                                    key={`${item.media_type || type}-${item.id}`}\n                                    item={item} \n                                    type={type} \n                                    progress={null}\n                                    duration={null}\n                                />\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Watch; "],"names":["addFavoriteShow","show","user","supabase","toast","showId","getState","setState","useStore","state","favoriteKey","currentState","error","newFavoritedMedia","f","removeFavoriteShow","originalFavorites","originalFavoritedMedia","fav","id","isShowFavorited","Watch","props","mediaDetails","setMediaDetails","useState","videos","setVideos","recommendations","setRecommendations","streamUrl","setStreamUrl","loading","setLoading","isPlaying","setIsPlaying","currentSeason","setCurrentSeason","currentEpisode","setCurrentEpisode","currentSource","setCurrentSource","availableSources","setAvailableSources","seasonDetails","setSeasonDetails","episodesLoading","setEpisodesLoading","isDubbed","setIsDubbed","streamError","setStreamError","isRetrying","setIsRetrying","isDirectSource","setIsDirectSource","qualities","setQualities","videoRef","useRef","seriesWatchHistory","setSeriesWatchHistory","movieProgress","setMovieProgress","playerReady","setPlayerReady","progressToResume","setProgressToResume","currentEpisodePage","setCurrentEpisodePage","initialPageSet","setInitialPageSet","episodesPerPage","sourceUpdatedFromBackend","previousEpisodeRef","userNavigatedRef","hasLoadedResumeData","isAutoNavigating","lastPlayerEventNavigation","playerEventModeEnabled","navigationTimeouts","lastPlayerEventTime","ignoredLegacyNavigation","type","season","episode","useAuth","setCurrentMediaItem","favoritesFetched","useEffect","newSeason","newEpisode","movieProgressPercent","useMemo","useCallback","targetEpisode","totalEpisodes","page","userId","userIdRef","timeout","route","controller","timeoutId","detailsData","videosData","recommendationsData","API_BASE_URL","res","err","lastWatchedWithProgress","getLastWatchedEpisodeWithProgress","newUrl","history","getSeriesHistory","progressData","getWatchProgressForMedia","data","maxPage","initialPage","currentEpisodeKey","episodeChanged","existingProgress","url","response","streamUrlData","finalStreamUrl","errorMessage","canRetry","historyKey","now","lastHistoryUpdate","addWatchHistoryEntry","handleProgressUpdate","messageType","seasonToSave","episodeToSave","progressKey","lastProgressSave","saveWatchProgress","prevHistory","historyCopy","index","h","newProgressData","messageListener","videoElement","handleLoadedMetadata","handleTimeUpdate","event","trustedDomains","origin","mediaData","e","mediaKey","media","normalizedProgress","readyTimeout","startFallbackTracking","progressHandler","jsxs","jsx","title","name","overview","vote_average","release_date","first_air_date","runtime","number_of_seasons","genres","poster_path","favorited","year","handleFavoriteClick","Helmet","iframe","getProxiedImageUrl","IMAGE_BASE_URL","g","q","s","source","Fragment","episodeHistory","progressPercent","prev","_","i","pageNum","item","MovieCard"],"mappings":"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"}