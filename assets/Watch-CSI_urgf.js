import{b as le,s as ie,e as ae,a as ls,$ as ne,A as W,f as cs,h as ds,i as Te,j as Be,u as e,k as ze,I as Ge}from"./index-YjXO4OFY.js";import{d as g,A as v,y as E,T as us,q as ms,k as gs}from"./react-vendor-BYlzYzcd.js";import{H as fs}from"./Helmet-BI-ZgFnF.js";import{M as hs}from"./MovieCard-CPq16vlW.js";const ps=async w=>{const{data:{user:a}}=await ie.auth.getUser();if(!a){ae.error("You need to be logged in to save favorites.");return}const T=w.id,{getState:Y,setState:R}=le,H=Y(),A=`${T}-tv`;if(H.favoritedMedia.has(A))return;R(y=>({favorites:[{...w,type:"tv"},...y.favorites],favoritedMedia:new Set(y.favoritedMedia).add(A)})),ae.success(`'${w.name||w.title}' has been added to your Favorites.`);const{error:p}=await ie.from("favorites").insert({user_id:a.id,media_id:T,media_type:"tv"});p&&(console.error("Error adding favorite show:",p),R(y=>{const D=new Set(y.favoritedMedia);return D.delete(A),{favoritedMedia:D,favorites:y.favorites.filter(k=>k.id!==T)}}))},vs=async w=>{const{data:{user:a}}=await ie.auth.getUser();if(!a)return;const T=w.id,{getState:Y,setState:R}=le,H=`${T}-tv`,A=Y().favorites,p=Y().favoritedMedia;R(D=>({favorites:D.favorites.filter(k=>k.id!==T),favoritedMedia:new Set([...D.favoritedMedia].filter(k=>k!==H))})),ae.error(`'${w.name||w.title}' has been removed from your Favorites.`);const{error:y}=await ie.from("favorites").delete().match({user_id:a.id,media_id:T,media_type:"tv"});y&&(console.error("Error removing favorite show:",y),R({favorites:A,favoritedMedia:p}),ae.error(`Failed to remove '${w.name||w.title}' from favorites.`))},ys=w=>le.getState().favoritedMedia.has(`${w}-tv`),Ts=w=>{const[a,T]=g(null),[Y,R]=g([]),[H,A]=g([]),[p,y]=g(""),[D,k]=g(!0),[bs,ws]=g(!1),[d,Q]=g(null),[f,J]=g(null),[I,Me]=g("videasy"),[ke,Qe]=g(["videasy","vidsrc","embedsu"]),[x,ce]=g(null),[Je,Ie]=g(!1),[X,Xe]=g(!1),[U,K]=g(null),[Re,de]=g(!1),[Ae,xe]=g(!1),ue=v(),[Le,Ze]=g(null),[L,O]=g(!1),[De,Z]=g([]),ee=v(null),[es,V]=g([]),[S,se]=g(null),[me,Ue]=g(!1),[ge,re]=g(0),[q,j]=g(1),[fe,Ce]=g(!1),P=10,te=v(!1),he=v(null),pe=v(!1),ve=v(!1),ss=v(!1),rs=v(null),ts=v(!1),oe=v(new Set),os=v(0);v(0);const ye=v(null);v({});const be=v({});v(0);const we=v({}),{id:u,type:r,season:C,episode:F}=w.matches,{user:M}=ls(),{setCurrentMediaItem:$e,favoritesFetched:Fe}=le();E(()=>{if(r==="tv"||r==="anime")if(C&&F&&!isNaN(parseInt(C))&&!isNaN(parseInt(F))){const o=parseInt(C,10),t=parseInt(F,10);Q(o),J(t)}else Q(1),J(1);else Q(null),J(null)},[r,C,F]);const Ne=us(()=>r!=="movie"||!S||!S.progress_seconds||S.progress_seconds<=0?0:S.duration_seconds>0?Math.min(100,S.progress_seconds/S.duration_seconds*100):S.progress_seconds>30?5:2,[r,S]);ms((s,o)=>{if(!s||!o)return 1;const t=Math.ceil(s/P);return Math.max(1,Math.min(t,Math.ceil(o/P)))},[P]);const _e=M?.id,We=v(_e);E(()=>{We.current=_e},[_e]),E(()=>()=>{oe.current.forEach(s=>clearTimeout(s)),oe.current.clear()},[d,f]),E(()=>(a&&$e({...a,type:r}),()=>{$e(null)}),[a,r,$e]),E(()=>{if(!u||!r){ne("/");return}y(""),O(!1),Z([]),T(null),k(!0),V([]),pe.current=!1,ve.current=!1,ss.current=!1,rs.current=null,ts.current=!1,j(1),Ce(!1),oe.current.forEach(o=>clearTimeout(o)),oe.current.clear(),os.current=0,ye.current=null,(async()=>{k(!0);try{const o=new AbortController,t=setTimeout(()=>o.abort(),15e3),[c,h,i]=await Promise.all([fetch(`${W}/tmdb/${r}/${u}`,{signal:o.signal}).then(n=>{if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);return n.json()}).catch(n=>{throw console.error("Error fetching media details:",n),n}),fetch(`${W}/tmdb/${r}/${u}/videos`,{signal:o.signal}).then(n=>{if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);return n.json()}).catch(n=>(console.error("Error fetching videos:",n),{results:[]})),fetch(`${W}/tmdb/${r}/${u}/recommendations`,{signal:o.signal}).then(n=>{if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);return n.json()}).catch(n=>(console.error("Error fetching recommendations:",n),{results:[]}))]);if(clearTimeout(t),T(c),R(h.results||[]),A(i.results||[]),r==="anime"&&c.id)try{const n=await fetch(`${W}/anilist/from-tmdb/${c.id}`);if(n.ok){const l=await n.json();l.id&&Ze(l.id)}}catch(n){console.error("Error fetching AniList ID:",n)}}catch{T(null),R([]),A([])}finally{k(!1)}})()},[u,r,C,F]),E(()=>{(async()=>{if(!M||!a||!u||!r){r==="movie"?se(null):(r==="tv"||r==="anime")&&V([]);return}try{if((r==="tv"||r==="anime")&&a.seasons&&a.seasons.length>0&&!(C&&F&&!isNaN(parseInt(C))&&!isNaN(parseInt(F)))&&!ve.current&&d!==null&&f!==null){console.log("🎬 Checking for continue watching episode...");const t=await cs(u);t&&t.season&&t.episode?(console.log(`🔄 Continue watching: S${t.season}E${t.episode}`),setTimeout(()=>{Q(t.season),J(t.episode);const c=`/watch/${r}/${u}/season/${t.season}/episode/${t.episode}`;ne(c,!0)},100)):console.log("📭 No continue watching data found, starting from beginning"),ve.current=!0}if(r==="tv"||r==="anime"){const o=await ds(u);V(o)}else if(r==="movie"){const o=await Te(u,r);console.log("Movie progress data loaded:",o),se(o)}}catch(o){console.error("Error loading user-specific data:",o)}})()},[M,a,u,r]),E(()=>{d!==null&&!fe&&j(1)},[d]),E(()=>{(async()=>{if(!(r!=="tv"&&r!=="anime"||!u||!d||d===null)){Ie(!0);try{const o=new AbortController,t=setTimeout(()=>o.abort(),1e4),c=await fetch(`${W}/tmdb/${r}/${u}/season/${d}`,{signal:o.signal});if(clearTimeout(t),c.ok){const h=await c.json();if(ce(h),f&&h.episodes&&!fe){const i=Math.ceil(f/P),n=Math.ceil(h.episodes.length/P),l=Math.max(1,Math.min(i,n));j(l),Ce(!0)}}else ce(null)}catch{ce(null)}finally{Ie(!1)}}})()},[u,r,d,f,fe]),E(()=>{const s=`${d}-${f}`,o=he.current&&he.current!==s;if(he.current=s,te.current&&!o){te.current=!1;return}o&&(te.current=!1),(async()=>{if(!u||!r||!a)return;const c=r==="anime"?Le:u;if(!c){r==="anime"&&console.log("Waiting for AniList ID...");return}const h=r==="anime"&&a&&(!a.seasons||a.seasons.length===0);if((r==="tv"||r==="anime"&&!h)&&(d===null||f===null))return;K(null),de(!1);let i=0;if(We.current)try{const l=await Te(u,r,d,f);l&&l.progress_seconds>30?(i=l.progress_seconds,re(l.progress_seconds)):re(0)}catch(l){console.error("Error fetching progress for stream URL:",l),re(0)}else re(0);let n=`${W}/stream-url?type=${r}&id=${c}&source=${I}`;(r==="tv"||r==="anime"&&!h)&&(n+=`&season=${d}&episode=${f}`),r==="anime"&&X&&(n+="&dub=true"),I==="videasy"&&(i>30&&(n+=`&progress=${Math.floor(i)}`),(r==="tv"||r==="anime")&&(n+="&nextEpisode=true&episodeSelector=true&autoplayNextEpisode=true"));try{const l=new AbortController,m=setTimeout(()=>l.abort(),2e4),$=await fetch(n,{signal:l.signal});clearTimeout(m);const _=await $.json();if(!$.ok)throw new Error(_.message||`HTTP ${$.status}`);let b=_.url;if(!b)throw new Error("The streaming service did not provide a valid URL. This content might not be available.");_.isDirectSource?(y(b),Z(_.qualities||[]),O(!0)):(y(b),O(!1),Z([])),_.currentSource&&_.currentSource!==I&&(te.current=!0,Me(_.currentSource)),_.availableSources&&Qe(_.availableSources),K(null)}catch(l){let m="Could not load the video stream.",$=!0;l.name==="AbortError"?m="Stream request timed out. Please try again.":l.message.includes("unavailable")?m="All streaming sources are currently unavailable. This is usually temporary.":l.message.includes("503")?m="Streaming service is temporarily down. Please try again in a few minutes.":l.message.includes("404")?m="This content is not available from the current source.":l.message.includes("NetworkError")||l.message.includes("fetch")?m="Network connection issue. Please check your internet and try again.":m="Unable to load video stream. This might be due to leaving and returning to the browser.",K({message:m,canRetry:$}),y(""),O(!1)}})()},[u,r,d,f,I,X,a,Le]),E(()=>{if(M&&console.log("🔐 Progress tracking setup:",{hasUser:!0,userId:M.id,hasMediaDetails:!!a}),!M||!a){M&&!a&&console.log("⚠️ Progress tracking disabled - media details not yet available");return}const s=async(t,c)=>{console.log(`📊 Progress update received via ${c}: `,t);const h=t.season||d,i=t.episode||f;if(t&&t.progress>=0&&t.duration>0){const n=Date.now(),l=`${u}-${r}-${h}-${i}`,m=be.current;if(we.current[l]){console.log(`⏭️ Progress save skipped (already in progress for ${l})`);return}if(!m[l]||n-m[l]>5e3){we.current[l]=!0;try{console.log(`🎬 Attempting to save progress for ${r} ${u}:`,{progress:t.progress,duration:t.duration,season:h,episode:i}),await Be(M?.id,{...a,id:a.id,type:r,season:h,episode:i},t.progress,t.duration)?(console.log("✅ Progress saved successfully"),be.current[l]=n,h===d&&i===f&&(r==="movie"?se({progress_seconds:t.progress,duration_seconds:t.duration}):(r==="tv"||r==="anime")&&V(_=>{const b=[..._],N=b.findIndex(G=>G.season_number===h&&G.episode_number===i),z={media_id:parseInt(u,10),media_type:r,season_number:h,episode_number:i,progress_seconds:t.progress,duration_seconds:t.duration};return N>-1?b[N]={...b[N],...z}:b.push(z),b}))):console.error("❌ Failed to save progress")}catch($){console.error("❌ An unexpected error occurred while saving progress:",$)}finally{we.current[l]=!1}}else console.log("⏭️ Progress save skipped (too recent):",{timeSinceLastSave:n-(m[l]||0),threshold:5e3});t.duration-t.progress}else console.log("⚠️ Progress update ignored (insufficient data):",{hasProgressData:!!t,progress:t?.progress,duration:t?.duration,meetsThreshold:t?.progress>=0&&t?.duration>0})};let o;if(L){const t=ee.current;if(!t)return;const c=async()=>{const i=await Te(u,r,d,f);i&&i.progress_seconds&&(t.currentTime=i.progress_seconds)},h=async()=>{if(t.currentTime>0){const i=Date.now(),n=`${u}-${r}-${d}-${f}`,l=be.current;if(!l[n]||i-l[n]>5e3){const m={progress:Math.round(t.currentTime),duration:Math.round(t.duration),percentage:t.duration>0?t.currentTime/t.duration*100:0};console.log("🎬 Direct video - saving progress:",m),await Be(M?.id,{...a,id:a.id,type:r,season:d,episode:f},m.progress,m.duration)?(console.log("✅ Direct video progress saved successfully"),l[n]=i,r==="movie"?se({progress_seconds:m.progress,duration_seconds:m.duration}):(r==="tv"||r==="anime")&&V(_=>{const b=[..._],N=b.findIndex(G=>G.season_number===d&&G.episode_number===f),z={media_id:parseInt(u,10),media_type:r,season_number:d,episode_number:f,progress_seconds:m.progress,duration_seconds:m.duration};return N>-1?b[N]={...b[N],...z}:b.push(z),b})):console.error("❌ Failed to save direct video progress")}}};return t.addEventListener("loadedmetadata",c),t.addEventListener("timeupdate",h),()=>{t.removeEventListener("loadedmetadata",c),t.removeEventListener("timeupdate",h)}}else return o=t=>{const c=["player.videasy.net","vidsrc.to","embed.su","vidsrc.xyz","vidsrc.in","vidsrc.pm"],h=new URL(t.origin);if(c.includes(h.hostname))try{const i=typeof t.data=="string"?JSON.parse(t.data):t.data;if(i&&i.type==="PROGRESS_UPDATE"&&i.data){const n={progress:i.data.progress?.watched,duration:i.data.progress?.duration,season:i.data.season||d,episode:i.data.episode||f};s(n,"PROGRESS_UPDATE");return}if(i.type==="MEDIA_DATA"&&i.data){let n=i.data;if(typeof n=="string")try{n=JSON.parse(n)}catch($){console.error("Error parsing double-encoded MEDIA_DATA string:",$);return}const l=`${r}-${u}`,m=n[l];if(m&&m.progress){const $={progress:m.progress.watched,duration:m.progress.duration,season:m.last_season_watched,episode:m.last_episode_watched};s($,"MEDIA_DATA")}return}if(i.type==="PLAYER_EVENT"&&i.data)if(i.data.event==="timeupdate"){const n={progress:i.data.time,duration:i.data.duration};n.progress&&n.duration&&s(n,"PLAYER_EVENT")}else i.data.event==="ended"&&(r==="tv"||r==="anime")?console.log('Player reported "ended" event - Videasy will handle next episode automatically.'):i.data.event==="player_ready"&&(console.log("Player is ready."),Ue(!0))}catch(i){console.error("Error processing message from player:",{origin:t.origin,data:t.data,error:i.message})}},window.addEventListener("message",o),()=>{window.removeEventListener("message",o)}},[M,a,L,ee,d,f]),E(()=>{if(p&&!L&&!me){const s=setTimeout(()=>{me||(console.warn("Player ready timeout, starting fallback progress tracking."),ns())},1e4);return()=>clearTimeout(s)}},[p,L,me]);const ns=()=>{const s=setInterval(()=>{document.hasFocus()&&console.log("Fallback: Checking for progress...")},15e3);return()=>clearInterval(s)};if(E(()=>(xe(!1),!p&&!U&&(ue.current=setTimeout(()=>{xe(!0),console.log("Stream timeout error")},25e3)),()=>{ue.current&&clearTimeout(ue.current)}),[p,U,d,f,I]),E(()=>{const s=async()=>{if(!document.pictureInPictureEnabled)return;const o=ee.current;if(document.visibilityState==="hidden"){if(L&&o&&!o.paused){if(document.pictureInPictureElement!==o)try{await o.requestPictureInPicture()}catch(t){console.error("Failed to enter PiP mode for direct video:",t)}}else if(!L&&p){const t=document.querySelector("iframe");t&&t.contentWindow&&(t.contentWindow.postMessage({type:"REQUEST_PIP"},"*"),console.log("Attempted to request Picture-in-Picture from iframe."))}}};return document.addEventListener("visibilitychange",s),()=>{document.removeEventListener("visibilitychange",s)}},[L,p]),D)return e("div",{class:"loading-state",children:[e("div",{class:"loading-spinner"}),e("p",{children:"Loading media details..."}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]});if(!a)return e("div",{class:"container",children:e("div",{class:"error-state",children:[e("h2",{children:"Unable to Load Media"}),e("p",{children:"We couldn't load the details for this content. This could be due to:"}),e("ul",{children:[e("li",{children:"Network connectivity issues"}),e("li",{children:"The content may no longer be available"}),e("li",{children:"Server maintenance"})]}),e("button",{onClick:()=>window.location.reload(),class:"btn btn-primary",style:{marginTop:"20px"},children:"Try Again"})]})});const{title:Ee,name:Se,overview:is,vote_average:$s,release_date:He,first_air_date:B,last_air_date:qe,runtime:je,number_of_seasons:Ye,genres:Ke,poster_path:Oe,status:Ve}=a,Pe=ys(a.id);(He||B)&&new Date(He||B).getFullYear();const as=()=>{Pe?vs(a):ps({...a,type:r})};return e("div",{children:[e(fs,{children:e("title",{children:[Ee||Se," - Fovi"]})}),e("div",{class:"player-container",children:[!p&&U&&e("div",{class:"stream-error-message",children:[e("p",{children:U.message}),U.canRetry&&e("div",{class:"error-actions",children:[e("button",{onClick:async()=>{de(!0),setTimeout(()=>{(async()=>{const o=`${W}/stream-url?type=${r}&id=${u}&source=${I}${r==="tv"||r==="anime"?`&season=${d}&episode=${f}`:""}${r==="anime"?`&dub=${X}`:""}`;try{const t=await fetch(o),c=await t.json();if(t.ok)y(c.url),O(c.isDirectSource),Z(c.qualities||[]),K(null);else throw new Error(c.message)}catch(t){console.error("Retry failed:",t),K({message:"Retry failed. Please try selecting a different source.",canRetry:!0})}de(!1)})()},1e3)},disabled:Re,class:"btn retry-btn",children:Re?"Retrying...":"Retry"}),e("p",{children:"Or try selecting a different source from the list below."})]})]}),!p&&!U&&!Ae&&e("div",{class:"stream-loading",children:[e("p",{children:"Loading video stream... "}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]}),!p&&!U&&Ae&&e("div",{class:"stream-error-message",children:[e("p",{children:"Sorry, this episode failed to load. Please refresh the page."}),e("div",{class:"error-actions",children:[e("button",{onClick:()=>window.location.reload(),class:"btn retry-btn",children:"Refresh"}),e("p",{children:"Or try selecting a different source from the list below if refreshing doesn't work."})]})]}),L?e("video",{ref:ee,src:p,controls:!0,autoPlay:!0,width:"100%"}):p&&e("iframe",{src:p,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"},frameBorder:"0",allowFullScreen:!0,allow:"autoplay; picture-in-picture",sandbox:"allow-forms allow-pointer-lock allow-same-origin allow-scripts allow-top-navigation",title:"Video Player",loading:"eager",referrerPolicy:"no-referrer-when-downgrade",importance:"high",onLoad:()=>{console.log("🎬 Player iframe loaded"),Ue(!0),I!=="videasy"&&ge>30?setTimeout(()=>{const s=document.querySelector("iframe");if(s&&s.contentWindow)try{s.contentWindow.postMessage({type:"SEEK_TO",time:ge},"*"),console.log(`📍 Sent seek command to restore progress: ${ge}s`)}catch(o){console.log("Could not send seek command:",o)}},500):console.log(I==="videasy"?"📍 Videasy native resume - no seeking needed":"📍 No significant progress to resume, starting from beginning")}})]}),e("div",{class:"container",children:[e("div",{class:"media-details-layout",children:[e("div",{class:"poster",children:[e("img",{src:ze(Oe?`${Ge}${Oe}`:"https://via.placeholder.com/500x750.png?text=No+Image"),alt:Ee||Se}),Ne>0&&e("div",{class:"movie-progress-container",children:[e("div",{class:"movie-progress-bar",children:e("div",{class:"movie-progress",style:{width:`${Math.max(2,Ne)}%`}})}),e("div",{class:"movie-progress-text",children:S.duration_seconds>0?`${Math.floor(S.progress_seconds/60)}m / ${Math.floor(S.duration_seconds/60)}m watched`:`${Math.floor(S.progress_seconds/60)}m watched`})]})]}),e("div",{class:"details",children:[e("div",{class:"title-container",children:[e("h1",{children:Ee||Se}),e("button",{onClick:as,class:`favorite-btn ${Pe?"favorited":""}`,disabled:!Fe,children:Fe?Pe?"♥ Favorited":"♡ Favorite":"..."}),!M&&e("span",{class:"login-hint",children:e("small",{children:[e("a",{href:"/login",style:{color:"#007bff",textDecoration:"none"},children:"Log in"})," to save favorites, track progress & continue watching"]})})]}),e("div",{class:"meta",children:[e("span",{class:"rating",children:["★ ",a.vote_average?a.vote_average.toFixed(1):"N/A"]}),(r==="tv"||r==="anime")&&B&&e("span",{style:{marginLeft:8},children:(()=>{const s=B?new Date(B).getFullYear():null;let o=null;return qe?o=new Date(qe).getFullYear():Ve&&Ve.toLowerCase()==="ended"&&(o=s),s&&o&&s===o?`${s}`:s&&o&&o!==s?`${s} - ${o}`:s?`${s} -`:""})()}),je&&e("span",{children:[je," min"]}),Ye&&e("span",{children:[Ye," Seasons"]})]}),e("div",{class:"genres",children:Ke&&Ke.map(s=>e("span",{class:"genre-tag",children:s.name}))}),e("p",{class:"overview",children:is}),De.length>0&&e("div",{class:"quality-selector",children:[e("label",{children:"Quality:"}),De.map(s=>e("button",{class:`quality-btn ${p===s.url?"active":""}`,onClick:()=>y(s.url),children:[s.quality,"p"]}))]})]})]}),r==="anime"&&e("div",{class:"select-container",children:[e("label",{for:"dub-select",children:"Audio:"}),e("select",{id:"dub-select",value:X,onChange:s=>Xe(s.target.value==="true"),children:[e("option",{value:"false",children:"Subbed"}),e("option",{value:"true",children:"Dubbed"})]})]}),e("div",{class:"selectors-container",children:[(r==="tv"||r==="anime")&&a&&a.seasons&&e("div",{class:"select-container",children:[e("label",{children:"Season:"}),e("div",{class:"selector-buttons",children:a.seasons.filter(s=>s.season_number>0).map(s=>e("button",{class:`selector-btn ${d===s.season_number?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected season ${s.season_number}`),pe.current=!0,ye.current=null;const o=`/watch/${r}/${u}/season/${s.season_number}/episode/1`;ne(o,!0)},children:s.name},s.id))})]}),ke.length>1&&e("div",{class:"select-container",children:[e("label",{children:"Source:"}),e("div",{class:"selector-buttons",children:ke.map(s=>e("button",{class:`selector-btn ${I===s?"active":""}`,onClick:()=>Me(s),children:s},s))})]})]}),(r==="tv"||r==="anime")&&d!==null&&f!==null&&e("div",{class:"episodes-container",children:[e("h3",{children:"Episodes"}),Je?e("div",{class:"loading-spinner"}):e(gs,{children:[e("div",{class:"episode-list",children:x?.episodes?.slice((q-1)*P,q*P)?.map(s=>{const o=es.find(c=>c.season_number===d&&c.episode_number===s.episode_number),t=o&&o.progress_seconds>0?o.duration_seconds&&o.duration_seconds>0?Math.min(100,o.progress_seconds/o.duration_seconds*100):o.progress_seconds>30?5:2:0;return e("div",{class:`episode-card ${s.episode_number===f?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected episode ${s.episode_number}`),pe.current=!0,ye.current=null;const c=`/watch/${r}/${u}/season/${d}/episode/${s.episode_number}`;ne(c,!0)},children:[e("div",{class:"episode-card-image",children:[e("img",{src:ze(s.still_path?`${Ge}${s.still_path}`:`https://via.placeholder.com/300x169.png?text=${encodeURIComponent(s.name)}`),alt:s.name}),e("div",{class:"episode-number-badge",children:s.episode_number}),t>0&&e("div",{class:"episode-progress-bar",children:e("div",{class:"episode-progress",style:{width:`${Math.max(2,t)}%`}})})]}),e("div",{class:"episode-card-content",children:[e("h4",{children:[s.name,s.air_date&&e("span",{style:{color:"#aaa",fontWeight:400,fontSize:"0.95em",marginLeft:8},children:["• ",(()=>{const c=new Date(s.air_date);return isNaN(c)?null:c.toLocaleDateString(void 0,{month:"short",day:"numeric",year:"numeric"})})()]})]}),e("p",{class:"episode-overview",children:s.overview})]})]},s.id)})}),x?.episodes&&x.episodes.length>P&&e("div",{class:"pagination-controls",children:[e("button",{class:"pagination-btn",onClick:()=>j(s=>Math.max(1,s-1)),disabled:q===1,children:"← Previous"}),e("div",{class:"pagination-info",children:[e("span",{class:"page-numbers",children:Array.from({length:Math.ceil(x.episodes.length/P)},(s,o)=>o+1).map(s=>e("button",{class:`page-number ${s===q?"active":""}`,onClick:()=>j(s),children:s},s))}),e("span",{class:"page-text",children:["Page ",q," of ",Math.ceil(x.episodes.length/P),"(",x.episodes.length," episodes)"]})]}),e("button",{class:"pagination-btn",onClick:()=>j(s=>Math.min(Math.ceil(x.episodes.length/P),s+1)),disabled:q===Math.ceil(x.episodes.length/P),children:"Next →"})]})]})]}),H.length>0&&e("div",{class:"recommendations",children:[e("h2",{children:"More Like This"}),e("div",{class:"movie-grid",children:H.map(s=>e(hs,{item:s,type:r,progress:null,duration:null},`${s.media_type||r}-${s.id}`))})]})]})]})};export{Ts as default};
//# sourceMappingURL=Watch-CSI_urgf.js.map
