{"version":3,"file":"seoUtils-Dl604mDg.js","sources":["../../src/utils/seoUtils.js"],"sourcesContent":["/**\n * SEO Utilities for Dynamic Meta Tags and Structured Data\n * Enhances search engine optimization with dynamic content\n */\n\n// Update document title dynamically\nexport const updatePageTitle = (title, suffix = 'Fylm') => {\n    if (typeof document !== 'undefined') {\n        document.title = title ? `${title} | ${suffix}` : suffix;\n    }\n};\n\n// Update meta description\nexport const updateMetaDescription = (description) => {\n    if (typeof document !== 'undefined') {\n        let metaDesc = document.querySelector('meta[name=\"description\"]');\n        if (!metaDesc) {\n            metaDesc = document.createElement('meta');\n            metaDesc.name = 'description';\n            document.head.appendChild(metaDesc);\n        }\n        metaDesc.content = description;\n    }\n};\n\n// Update Open Graph meta tags\nexport const updateOpenGraphTags = (data) => {\n    if (typeof document === 'undefined') return;\n    \n    const ogTags = {\n        'og:title': data.title,\n        'og:description': data.description,\n        'og:image': data.image,\n        'og:url': data.url || window.location.href,\n        'og:type': data.type || 'website'\n    };\n    \n    Object.entries(ogTags).forEach(([property, content]) => {\n        if (content) {\n            let metaTag = document.querySelector(`meta[property=\"${property}\"]`);\n            if (!metaTag) {\n                metaTag = document.createElement('meta');\n                metaTag.setAttribute('property', property);\n                document.head.appendChild(metaTag);\n            }\n            metaTag.content = content;\n        }\n    });\n};\n\n// Update Twitter Card meta tags\nexport const updateTwitterCardTags = (data) => {\n    if (typeof document === 'undefined') return;\n    \n    const twitterTags = {\n        'twitter:title': data.title,\n        'twitter:description': data.description,\n        'twitter:image': data.image,\n        'twitter:card': 'summary_large_image'\n    };\n    \n    Object.entries(twitterTags).forEach(([name, content]) => {\n        if (content) {\n            let metaTag = document.querySelector(`meta[name=\"${name}\"]`);\n            if (!metaTag) {\n                metaTag = document.createElement('meta');\n                metaTag.name = name;\n                document.head.appendChild(metaTag);\n            }\n            metaTag.content = content;\n        }\n    });\n};\n\n// Add structured data (JSON-LD)\nexport const addStructuredData = (data) => {\n    if (typeof document === 'undefined') return;\n    \n    // Remove existing structured data\n    const existingScript = document.querySelector('script[type=\"application/ld+json\"]');\n    if (existingScript) {\n        existingScript.remove();\n    }\n    \n    // Add new structured data\n    const script = document.createElement('script');\n    script.type = 'application/ld+json';\n    script.textContent = JSON.stringify(data);\n    document.head.appendChild(script);\n};\n\n// Generate movie/TV show structured data\nexport const generateMovieStructuredData = (mediaDetails, type) => {\n    const baseData = {\n        '@context': 'https://schema.org',\n        '@type': type === 'movie' ? 'Movie' : 'TVSeries',\n        'name': mediaDetails.title || mediaDetails.name,\n        'description': mediaDetails.overview,\n        'image': mediaDetails.poster_path ? `https://image.tmdb.org/t/p/w500${mediaDetails.poster_path}` : null,\n        'datePublished': mediaDetails.release_date || mediaDetails.first_air_date,\n        'genre': mediaDetails.genres?.map(g => g.name) || [],\n        'aggregateRating': mediaDetails.vote_average ? {\n            '@type': 'AggregateRating',\n            'ratingValue': mediaDetails.vote_average,\n            'ratingCount': mediaDetails.vote_count,\n            'bestRating': 10,\n            'worstRating': 0\n        } : undefined\n    };\n    \n    if (type === 'movie') {\n        baseData.duration = mediaDetails.runtime ? `PT${mediaDetails.runtime}M` : undefined;\n        baseData.director = mediaDetails.credits?.crew?.find(c => c.job === 'Director')?.name;\n    } else {\n        baseData.numberOfSeasons = mediaDetails.number_of_seasons;\n        baseData.numberOfEpisodes = mediaDetails.number_of_episodes;\n    }\n    \n    // Add cast information\n    if (mediaDetails.credits?.cast) {\n        baseData.actor = mediaDetails.credits.cast.slice(0, 5).map(actor => ({\n            '@type': 'Person',\n            'name': actor.name\n        }));\n    }\n    \n    return baseData;\n};\n\n// Generate anime structured data\nexport const generateAnimeStructuredData = (animeDetails) => {\n    return {\n        '@context': 'https://schema.org',\n        '@type': 'TVSeries',\n        'name': animeDetails.title || animeDetails.name,\n        'description': animeDetails.overview || animeDetails.description,\n        'image': animeDetails.poster_path || animeDetails.image,\n        'genre': animeDetails.genres || [],\n        'aggregateRating': animeDetails.vote_average || animeDetails.rating ? {\n            '@type': 'AggregateRating',\n            'ratingValue': animeDetails.vote_average || animeDetails.rating,\n            'bestRating': 10,\n            'worstRating': 0\n        } : undefined,\n        'numberOfEpisodes': animeDetails.episodes || animeDetails.episode_count\n    };\n};\n\n// SEO-friendly URL generation\nexport const generateSEOFriendlySlug = (title) => {\n    return title\n        .toLowerCase()\n        .replace(/[^a-z0-9\\s-]/g, '') // Remove special characters\n        .replace(/\\s+/g, '-') // Replace spaces with hyphens\n        .replace(/-+/g, '-') // Replace multiple hyphens with single\n        .trim();\n};\n\n// Generate comprehensive SEO data for media items\nexport const generateMediaSEOData = (mediaDetails, type, currentSeason = null, currentEpisode = null) => {\n    const title = mediaDetails.title || mediaDetails.name;\n    const year = mediaDetails.release_date || mediaDetails.first_air_date ? \n        new Date(mediaDetails.release_date || mediaDetails.first_air_date).getFullYear() : '';\n    \n    let pageTitle = title;\n    let description = mediaDetails.overview || `Watch ${title} online for free in HD quality.`;\n    \n    // Customize for episodes\n    if (type === 'tv' && currentSeason && currentEpisode) {\n        pageTitle = `${title} - Season ${currentSeason} Episode ${currentEpisode}`;\n        description = `Watch ${title} Season ${currentSeason} Episode ${currentEpisode} online for free in HD quality. ${mediaDetails.overview || ''}`;\n    } else if (type === 'anime' && currentSeason && currentEpisode) {\n        pageTitle = `${title} - Episode ${currentEpisode}`;\n        description = `Watch ${title} Episode ${currentEpisode} online for free in HD quality. ${mediaDetails.overview || ''}`;\n    } else if (type === 'movie') {\n        pageTitle = `${title}${year ? ` (${year})` : ''}`;\n        description = `Watch ${title}${year ? ` (${year})` : ''} online for free in HD quality. ${mediaDetails.overview || ''}`;\n    }\n    \n    const image = mediaDetails.poster_path ? \n        `https://image.tmdb.org/t/p/w500${mediaDetails.poster_path}` : \n        mediaDetails.image || '/android-chrome-512x512.png';\n    \n    return {\n        title: pageTitle,\n        description: description.substring(0, 160), // Limit to 160 characters\n        image,\n        url: window.location.href,\n        type: type === 'movie' ? 'video.movie' : 'video.tv_show'\n    };\n};\n\n// Update all SEO elements for a media page\nexport const updateMediaPageSEO = (mediaDetails, type, currentSeason = null, currentEpisode = null) => {\n    const seoData = generateMediaSEOData(mediaDetails, type, currentSeason, currentEpisode);\n    \n    updatePageTitle(seoData.title);\n    updateMetaDescription(seoData.description);\n    updateOpenGraphTags(seoData);\n    updateTwitterCardTags(seoData);\n    \n    // Add structured data\n    let structuredData;\n    if (type === 'anime') {\n        structuredData = generateAnimeStructuredData(mediaDetails);\n    } else {\n        structuredData = generateMovieStructuredData(mediaDetails, type);\n    }\n    \n    if (structuredData) {\n        addStructuredData(structuredData);\n    }\n};\n\n// Generate breadcrumb structured data\nexport const generateBreadcrumbData = (breadcrumbs) => {\n    return {\n        '@context': 'https://schema.org',\n        '@type': 'BreadcrumbList',\n        'itemListElement': breadcrumbs.map((crumb, index) => ({\n            '@type': 'ListItem',\n            'position': index + 1,\n            'name': crumb.name,\n            'item': crumb.url\n        }))\n    };\n};\n\n// SEO optimization for search pages\nexport const updateSearchPageSEO = (query, resultsCount = 0) => {\n    const title = query ? `Search Results for \"${query}\"` : 'Search Movies & TV Shows';\n    const description = query ? \n        `Found ${resultsCount} results for \"${query}\". Watch movies and TV shows online for free in HD quality.` :\n        'Search thousands of movies and TV shows. Watch online for free in HD quality.';\n    \n    updatePageTitle(title);\n    updateMetaDescription(description);\n    updateOpenGraphTags({\n        title,\n        description,\n        image: '/android-chrome-512x512.png'\n    });\n};\n\n// SEO optimization for category pages\nexport const updateCategoryPageSEO = (category) => {\n    const titles = {\n        movies: 'Free Movies Online - Watch HD Movies',\n        tv: 'Free TV Shows Online - Watch HD Series',\n        anime: 'Free Anime Online - Watch HD Anime Series',\n        favorites: 'My Favorites - Saved Movies & TV Shows',\n        history: 'Watch History - Continue Watching'\n    };\n    \n    const descriptions = {\n        movies: 'Watch thousands of free movies online in HD quality. No registration required. Stream action, comedy, horror, drama and more.',\n        tv: 'Watch free TV shows and series online in HD quality. Stream popular shows, new episodes, and classic series.',\n        anime: 'Watch free anime series and movies online in HD quality. Stream popular anime, new episodes, and classic series.',\n        favorites: 'Access your saved favorite movies and TV shows. Continue watching where you left off.',\n        history: 'View your watch history and continue watching movies and TV shows where you left off.'\n    };\n    \n    const title = titles[category] || 'Fylm - Free Movies & TV Shows';\n    const description = descriptions[category] || 'Watch free movies and TV shows online in HD quality.';\n    \n    updatePageTitle(title);\n    updateMetaDescription(description);\n    updateOpenGraphTags({\n        title,\n        description,\n        image: '/android-chrome-512x512.png'\n    });\n};\n\n// Add canonical URL\nexport const updateCanonicalUrl = (url) => {\n    if (typeof document === 'undefined') return;\n    \n    let canonical = document.querySelector('link[rel=\"canonical\"]');\n    if (!canonical) {\n        canonical = document.createElement('link');\n        canonical.rel = 'canonical';\n        document.head.appendChild(canonical);\n    }\n    canonical.href = url || window.location.href;\n};\n\n// Generate sitemap data (for future sitemap generation)\nexport const generateSitemapEntry = (url, lastmod = new Date(), changefreq = 'weekly', priority = '0.8') => {\n    return {\n        url,\n        lastmod: lastmod.toISOString().split('T')[0],\n        changefreq,\n        priority\n    };\n};"],"names":["updatePageTitle","title","suffix","updateMetaDescription","description","metaDesc","updateOpenGraphTags","data","ogTags","property","content","metaTag","addStructuredData","existingScript","script","updateCanonicalUrl","url","canonical"],"mappings":"AAMY,MAACA,EAAkB,CAACC,EAAOC,EAAS,SAAW,CACnD,OAAO,SAAa,MACpB,SAAS,MAAQD,EAAQ,GAAGA,CAAK,MAAMC,CAAM,GAAKA,EAE1D,EAGaC,EAAyBC,GAAgB,CAClD,GAAI,OAAO,SAAa,IAAa,CACjC,IAAIC,EAAW,SAAS,cAAc,0BAA0B,EAC3DA,IACDA,EAAW,SAAS,cAAc,MAAM,EACxCA,EAAS,KAAO,cAChB,SAAS,KAAK,YAAYA,CAAQ,GAEtCA,EAAS,QAAUD,CACvB,CACJ,EAGaE,EAAuBC,GAAS,CACzC,GAAI,OAAO,SAAa,IAAa,OAErC,MAAMC,EAAS,CACX,WAAYD,EAAK,MACjB,iBAAkBA,EAAK,YACvB,WAAYA,EAAK,MACjB,SAAUA,EAAK,KAAO,OAAO,SAAS,KACtC,UAAWA,EAAK,MAAQ,SAChC,EAEI,OAAO,QAAQC,CAAM,EAAE,QAAQ,CAAC,CAACC,EAAUC,CAAO,IAAM,CACpD,GAAIA,EAAS,CACT,IAAIC,EAAU,SAAS,cAAc,kBAAkBF,CAAQ,IAAI,EAC9DE,IACDA,EAAU,SAAS,cAAc,MAAM,EACvCA,EAAQ,aAAa,WAAYF,CAAQ,EACzC,SAAS,KAAK,YAAYE,CAAO,GAErCA,EAAQ,QAAUD,CACtB,CACJ,CAAC,CACL,EA2BaE,EAAqBL,GAAS,CACvC,GAAI,OAAO,SAAa,IAAa,OAGrC,MAAMM,EAAiB,SAAS,cAAc,oCAAoC,EAC9EA,GACAA,EAAe,OAAM,EAIzB,MAAMC,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,KAAO,sBACdA,EAAO,YAAc,KAAK,UAAUP,CAAI,EACxC,SAAS,KAAK,YAAYO,CAAM,CACpC,EA0LaC,EAAsBC,GAAQ,CACvC,GAAI,OAAO,SAAa,IAAa,OAErC,IAAIC,EAAY,SAAS,cAAc,uBAAuB,EACzDA,IACDA,EAAY,SAAS,cAAc,MAAM,EACzCA,EAAU,IAAM,YAChB,SAAS,KAAK,YAAYA,CAAS,GAEvCA,EAAU,KAAOD,GAAO,OAAO,SAAS,IAC5C"}