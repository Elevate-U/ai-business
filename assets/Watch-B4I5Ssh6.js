import{a as ps,b as vs,s as ys,$ as Y,A as I,e as bs,f as _s,h as Je,i as Ke,u as e,j as Qe,I as Xe}from"./index-B0HLLm9N.js";import{d,A as v,y as b,T as ws,q as $s,k as Es}from"./react-vendor-BYlzYzcd.js";import{H as Ss}from"./Helmet-9jX2g0R5.js";import{M as Ts}from"./MovieCard-Cvi8SSEv.js";import{r as Ps,a as ks}from"./favorites-ojAq-jdj.js";/* empty css                  */const Ws=Ze=>{const[u,re]=d(null),[we,$e]=d([]),[Ee,Se]=d([]),[E,q]=d(""),[es,te]=d(!0),[Is,Ls]=d(!1);v(null);const[m,z]=d(null),[f,V]=d(null),[L,Te]=d("videasy"),[Pe,ss]=d(["videasy","vidsrc","embedsu"]),[j,ke]=d(null),[rs,Ie]=d(!1),[B,ts]=d(!1),[A,D]=d(null),[Le,Re]=d(!1),[Ce,G]=d(!1),T=v(),[Ae,Rs]=d(null),{id:l,type:r,season:R,episode:C}=Ze.matches,[P,N]=d(r==="anime"?null:l),[M,ne]=d(r==="anime"?"anime":r),[ns,oe]=d(!1),[F,ae]=d(!1),[Me,ie]=d([]),le=v(null),[os,W]=d([]),[w,J]=d(null),[ce,K]=d(!1),[U,Cs]=d(0),[de,Q]=d(1),[ue,xe]=d(1),[me,Ue]=d(!1),x=10,X=v(!1),ge=v(null),he=v(!1),fe=v(!1),as=v(!1),is=v(null),ls=v(!1),Z=v(new Set),cs=v(0);v(0);const pe=v(null);v({});const ee=v(0),{user:De}=ps(),y=De?.id,se="tv",{setCurrentMediaItem:ve,favoritesFetched:Ne,fetchContinueWatching:ds,isShowFavorited:us}=vs();b(()=>{if(r==="tv"||r==="anime")if(R&&C&&!isNaN(parseInt(R))&&!isNaN(parseInt(C))){const n=parseInt(R,10),i=parseInt(C,10);z(n),V(i)}else z(1),V(1);else z(null),V(null)},[r,R,C]);const Fe=ws(()=>r!=="movie"||!w||!w.progress_seconds||w.progress_seconds<=0?0:w.duration_seconds>0?Math.min(100,w.progress_seconds/w.duration_seconds*100):w.progress_seconds>30?5:2,[r,w]),We=$s((s,n)=>{if(!s||!n)return 1;const i=Math.ceil(s/x);return Math.max(1,Math.min(i,Math.ceil(n/x)))},[x]),Oe=v(y);b(()=>{Oe.current=y},[y]);const ms=()=>{we.find(n=>n.type==="Trailer"&&n.site==="YouTube")?oe(!0):alert("No trailer available for this movie.")};b(()=>()=>{Z.current.forEach(s=>clearTimeout(s)),Z.current.clear()},[m,f]),b(()=>{const s=()=>{document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||(console.log("📱 Exited fullscreen mode, syncing progress..."),setTimeout(()=>{ys(y).catch(i=>{console.error("Error syncing offline progress after fullscreen:",i)})},1e3))};return document.addEventListener("fullscreenchange",s),document.addEventListener("webkitfullscreenchange",s),document.addEventListener("mozfullscreenchange",s),()=>{document.removeEventListener("fullscreenchange",s),document.removeEventListener("webkitfullscreenchange",s),document.removeEventListener("mozfullscreenchange",s)}},[y]),b(()=>(u&&ve({...u,type:r}),()=>{ve(null)}),[u,r,ve]),b(()=>{if(!l||!r){Y("/");return}r==="anime"?(ne("anime"),N(null)):(N(l),ne(r))},[l,r]),b(()=>{if(r!=="anime"&&!P||r==="anime"&&!l)return;q(""),ae(!1),ie([]),re(null),te(!0),W([]),he.current=!1,fe.current=!1,as.current=!1,is.current=null,ls.current=!1,Q(1),Ue(!1),Z.current.forEach(n=>clearTimeout(n)),Z.current.clear(),cs.current=0,pe.current=null,(async()=>{te(!0);try{const n=new AbortController,i=setTimeout(()=>n.abort(),15e3),t=l,p=r==="anime"?`${I}/tmdb/anime/${t}/enhanced`:`${I}/tmdb/${M}/${P}`,c=r==="anime"?null:`${I}/tmdb/${M}/${P}/videos`,o=r==="anime"?`${I}/tmdb/anime/${t}/recommendations`:`${I}/tmdb/${M}/${P}/recommendations`,a=async($,k)=>{if(!$)return null;try{const _=await fetch($,{signal:n.signal});if(!_.ok)throw new Error(`HTTP ${_.status}: ${_.statusText}`);const H=await _.json();return r==="anime"&&H._conversion?.tmdbId&&N(H._conversion.tmdbId),r==="anime"&&H.tmdb_id&&N(H.tmdb_id),H}catch(_){if(console.error(`${k}:`,_),k.includes("videos")||k.includes("recommendations"))return{results:[]};throw _}};let S,h,g;r==="anime"?(S=await a(p,"Error fetching anime details"),h={results:S?.videos?.results||[]},g=await a(o,"Error fetching recommendations")):[S,h,g]=await Promise.all([a(p,"Error fetching media details"),a(c,"Error fetching videos"),a(o,"Error fetching recommendations")]),clearTimeout(i),re(S),$e(h.results||[]),Se(g.results||[])}catch{re(null),$e([]),Se([])}finally{te(!1)}})()},[P,M,R,C,y]),b(()=>{(async()=>{if(!y||!u||!l||!r){r==="movie"?J(null):(r==="tv"||r==="anime")&&W([]);return}try{if((r==="tv"||r==="anime")&&u.seasons&&u.seasons.length>0&&!(R&&C&&!isNaN(parseInt(R))&&!isNaN(parseInt(C)))&&!fe.current&&m!==null&&f!==null){console.log("🎬 Checking for continue watching episode...");const t=await bs(y,l,se);t&&t.season_number&&t.episode_number?(console.log(`🔄 Continue watching: S${t.season_number}E${t.episode_number}`),setTimeout(()=>{z(t.season_number),V(t.episode_number);const p=`/watch/${r}/${l}/season/${t.season_number}/episode/${t.episode_number}`;Y(p,!0)},100)):console.log("📭 No continue watching data found, starting from beginning"),fe.current=!0}if(r==="tv"||r==="anime"){const i=await _s(y,l,se);console.log(`📺 [Watch] Series history loaded for ${r} ${l}:`,i),W(i)}const n=await Je(y,l,r);console.log("Progress data loaded:",n),J(n)}catch(n){console.error("Error loading user-specific data:",n)}})()},[y,u,l,r,R,C,se]),b(()=>{m!==null&&!me&&Q(1)},[m]),b(()=>{(async()=>{if(r!=="tv"&&r!=="anime"||!m||m===null)return;const n=r==="anime"?l:P;if(n){Ie(!0);try{const i=r==="anime"?`${I}/tmdb/anime/${n}/season/${m}`:`${I}/tmdb/${M}/${n}/season/${m}`,t=await fetch(i);if(!t.ok)throw new Error(`Failed to fetch season details: ${t.statusText}`);const p=await t.json();if(ke(p),!me){const c=p.episodes.length,o=We(f,c);Q(o),Ue(!0)}}catch(i){console.error("Error fetching season details:",i),ke(null)}finally{Ie(!1)}}})()},[l,r,se,m,f,me,We]),b(()=>{const s=`${m}-${f}`,n=ge.current&&ge.current!==s;if(ge.current=s,X.current&&!n){X.current=!1;return}n&&(X.current=!1),(async()=>{if(!P||!M)return;const t=r==="anime"?l:P;if(!t)return;D(null),G(!1),T.current&&clearTimeout(T.current),T.current=setTimeout(()=>G(!0),1e4);const p=r==="anime"&&u&&(!u.seasons||u.seasons.length===0);if((r==="tv"||r==="anime")&&!p&&(m===null||f===null)){console.log("Season/episode not set, aborting stream URL fetch."),clearTimeout(T.current);return}try{let c=`${I}/stream-url?type=${r}&id=${t}&source=${L}`;(r==="tv"||r==="anime"&&!p)&&(c+=`&season=${m}&episode=${f}`),r==="anime"&&B&&(c+="&dub=true"),L==="videasy"&&(U>0&&(c+=`&progress=${Math.round(U)}`),(r==="tv"||r==="anime")&&(c+="&nextEpisode=true&episodeSelector=true&autoplayNextEpisode=true")),console.log(`Fetching stream URL: ${c}`);const o=await fetch(c);if(!o.ok)throw new Error(`Server responded with ${o.status}`);const a=await o.json();if(clearTimeout(T.current),a.url)console.log(`Stream URL generated: ${a.url}`),q(a.url),ae(a.isDirectSource||!1),ie(a.qualities||[]),a.availableSources&&a.availableSources.length>0&&ss(a.availableSources),a.currentSource&&(X.current=!0,Te(a.currentSource)),D(null),K(!0);else throw new Error(a.message||"No stream URL returned from API")}catch(c){clearTimeout(T.current),console.error("Error fetching stream URL:",c.message),D(`Failed to load video: ${c.message}. Try changing the source or refreshing.`),K(!1)}})()},[P,M,m,f,L,B,u,U,y]),b(()=>{const s=Oe.current;if(s&&console.log("🔐 Progress tracking setup:",{hasUser:!0,userId:s,hasMediaDetails:!!u}),!s||!u){s&&!u&&console.log("⚠️ Progress tracking disabled - media details not yet available");return}const n=async(t,p)=>{console.log(`📊 Progress update received via ${p}: `,t);const c=t.season||m,o=t.episode||f;if(t&&t.progress>=0&&t.duration>0){const a=Date.now();if(a-ee.current<3e3)return;ee.current=a;try{console.log(`🎬 Attempting to save progress for ${r} ${l}:`,{progress:t.progress,duration:t.duration,season:c,episode:o}),await Ke(s,{...u,id:u.id,type:r,season:c,episode:o},t.progress,t.duration).catch(h=>{if(console.error("❌ Progress save error caught:",h),h.message?.includes("timeout")||h.message?.includes("auth")){const g=`offline_progress_${r}_${l}_${c||0}_${o||0}`,$={media_id:l,media_type:r,season_number:c,episode_number:o,progress_seconds:t.progress,duration_seconds:t.duration,timestamp:new Date().toISOString()};return localStorage.setItem(g,JSON.stringify($)),console.log("📱 Saved to localStorage after error"),!0}return!1})?(console.log("✅ Progress saved successfully"),ds(),c===m&&o===f&&(r==="movie"?J({progress_seconds:t.progress,duration_seconds:t.duration}):(r==="tv"||r==="anime")&&W(h=>{const g=[...h],$=g.findIndex(_=>_.season_number===c&&_.episode_number===o),k={media_id:parseInt(l,10),media_type:r,season_number:c,episode_number:o,progress_seconds:t.progress,duration_seconds:t.duration};return $>-1?g[$]={...g[$],...k}:g.push(k),g}))):console.error("❌ Failed to save progress, will retry on next update")}catch(S){console.error("❌ An unexpected error occurred while saving progress:",S);try{const h=`offline_progress_${r}_${l}_${c||0}_${o||0}`,g={media_id:l,media_type:r,season_number:c,episode_number:o,progress_seconds:t.progress,duration_seconds:t.duration,timestamp:new Date().toISOString()};localStorage.setItem(h,JSON.stringify(g)),console.log("📱 Saved to localStorage after exception")}catch(h){console.error("💔 All save mechanisms failed:",h)}}}else console.log("⚠️ Progress update ignored (insufficient data):",{hasProgressData:!!t,progress:t?.progress,duration:t?.duration,meetsThreshold:t?.progress>=0&&t?.duration>0})};let i;if(F){const t=le.current;if(!t)return;const p=async()=>{const o=await Je(y,l,r,m,f);o&&o.progress_seconds&&(t.currentTime=o.progress_seconds)},c=async()=>{if(t.currentTime>0){const o=Date.now();if(o-ee.current<1e3)return;ee.current=o;const a={progress:Math.round(t.currentTime),duration:Math.round(t.duration),percentage:t.duration>0?t.currentTime/t.duration*100:0};console.log("🎬 Direct video - saving progress:",a),await Ke(y,{...u,id:u.id,type:r,season:m,episode:f},a.progress,a.duration)?(console.log("✅ Direct video progress saved successfully"),r==="movie"?J({progress_seconds:a.progress,duration_seconds:a.duration}):(r==="tv"||r==="anime")&&W(h=>{const g=[...h],$=g.findIndex(_=>_.season_number===m&&_.episode_number===f),k={media_id:parseInt(l,10),media_type:r,season_number:m,episode_number:f,progress_seconds:a.progress,duration_seconds:a.duration};return $>-1?g[$]={...g[$],...k}:g.push(k),g})):console.error("❌ Failed to save direct video progress")}};return t.addEventListener("loadedmetadata",p),t.addEventListener("timeupdate",c),()=>{t.removeEventListener("loadedmetadata",p),t.removeEventListener("timeupdate",c)}}else return i=t=>{const p=["player.videasy.net","vidsrc.to","embed.su","vidsrc.xyz","vidsrc.in","vidsrc.pm"],c=new URL(t.origin);if(p.includes(c.hostname))try{const o=typeof t.data=="string"?JSON.parse(t.data):t.data;if(o&&o.type==="PROGRESS_UPDATE"&&o.data){const a={progress:o.data.progress?.watched,duration:o.data.progress?.duration,season:o.data.season||m,episode:o.data.episode||f};n(a,"PROGRESS_UPDATE");return}if(o.type==="MEDIA_DATA"&&o.data){let a=o.data;if(typeof a=="string")try{a=JSON.parse(a)}catch(g){console.error("Error parsing double-encoded MEDIA_DATA string:",g);return}const S=`${r}-${l}`,h=a[S];if(h&&h.progress){const g={progress:h.progress.watched,duration:h.progress.duration,season:h.last_season_watched,episode:h.last_episode_watched};n(g,"MEDIA_DATA")}return}if(o.type==="PLAYER_EVENT"&&o.data)if(o.data.event==="timeupdate"){const a={progress:o.data.time,duration:o.data.duration};a.progress&&a.duration&&n(a,"PLAYER_EVENT")}else o.data.event==="ended"&&(r==="tv"||r==="anime")?console.log('Player reported "ended" event - Videasy will handle next episode automatically.'):o.data.event==="player_ready"&&(console.log("Player is ready."),K(!0))}catch(o){console.error("Error processing message from player:",{origin:t.origin,data:t.data,error:o.message})}},window.addEventListener("message",i),()=>{window.removeEventListener("message",i)}},[u,F,le,m,f,y]),b(()=>{if(E&&!F&&!ce){const s=setTimeout(()=>{ce||(console.warn("Player ready timeout, starting fallback progress tracking."),gs())},1e4);return()=>clearTimeout(s)}},[E,F,ce]);const gs=()=>{const s=setInterval(()=>{document.hasFocus()&&console.log("Fallback: Checking for progress...")},15e3);return()=>clearInterval(s)};if(b(()=>(G(!1),!E&&!A&&(T.current=setTimeout(()=>{G(!0),console.log("Stream timeout error")},25e3)),()=>{T.current&&clearTimeout(T.current)}),[E,A,m,f,L]),Ae)return e("div",{class:"container",style:{textAlign:"center",marginTop:"50px"},children:e("div",{class:"error-state",children:[e("h2",{children:"An Error Occurred"}),e("p",{children:Ae}),e("button",{onClick:()=>Y("/"),class:"btn btn-primary",children:"Go Home"})]})});if(es)return e("div",{class:"loading-state",children:[e("div",{class:"loading-spinner"}),e("p",{children:"Loading media details..."}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]});if(!u)return e("div",{class:"container",children:e("div",{class:"error-state",children:[e("h2",{children:"Unable to Load Media"}),e("p",{children:"We couldn't load the details for this content. This could be due to:"}),e("ul",{children:[e("li",{children:"Network connectivity issues"}),e("li",{children:"The content may no longer be available"}),e("li",{children:"Server maintenance"})]}),e("button",{onClick:()=>window.location.reload(),class:"btn btn-primary",style:{marginTop:"20px"},children:"Try Again"})]})});const{title:ye,name:be,overview:hs,vote_average:As,release_date:He,first_air_date:O,last_air_date:Ye,runtime:qe,number_of_seasons:ze,genres:Ve,poster_path:je,status:Be}=u,Ge=r==="anime"?l:u.id,_e=us(Ge,r);(He||O)&&new Date(He||O).getFullYear();const fs=()=>{const s={...u,id:Ge,type:r};_e?Ps(s):ks(s)};return e("div",{children:[e(Ss,{children:e("title",{children:[ye||be," - Fovi"]})}),ns&&e("div",{className:"trailer-modal",onClick:()=>oe(!1),children:e("div",{className:"trailer-content",onClick:s=>s.stopPropagation(),children:[e("span",{className:"close-trailer",onClick:()=>oe(!1),children:"×"}),e("iframe",{src:`https://www.youtube.com/embed/${we.find(s=>s.type==="Trailer")?.key}?autoplay=1`,frameBorder:"0",allow:"autoplay; encrypted-media; fullscreen",allowFullScreen:!0,title:"Trailer"})]})}),e("div",{class:"player-container",children:[!E&&A&&e("div",{class:"stream-error-message",children:[e("p",{children:A.message}),A.canRetry&&e("div",{class:"error-actions",children:[e("button",{onClick:async()=>{Re(!0),setTimeout(()=>{(async()=>{const n=`${I}/stream-url?type=${r}&id=${l}&source=${L}${r==="tv"||r==="anime"?`&season=${m}&episode=${f}`:""}${r==="anime"?`&dub=${B}`:""}`;try{const i=await fetch(n),t=await i.json();if(i.ok)q(t.url),ae(t.isDirectSource),ie(t.qualities||[]),D(null);else throw new Error(t.message)}catch(i){console.error("Retry failed:",i),D({message:"Retry failed. Please try selecting a different source.",canRetry:!0})}Re(!1)})()},1e3)},disabled:Le,class:"btn retry-btn",children:Le?"Retrying...":"Retry"}),e("p",{children:"Or try selecting a different source from the list below."})]})]}),!E&&!A&&!Ce&&e("div",{class:"stream-loading",children:[e("p",{children:"Loading video stream... "}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]}),!E&&!A&&Ce&&e("div",{class:"stream-error-message",children:[e("p",{children:"Sorry, this episode failed to load. Please refresh the page."}),e("div",{class:"error-actions",children:[e("button",{onClick:()=>window.location.reload(),class:"btn retry-btn",children:"Refresh"}),e("p",{children:"Or try selecting a different source from the list below if refreshing doesn't work."})]})]}),F?e("video",{ref:le,src:E,controls:!0,autoPlay:!0,width:"100%"}):E&&e("iframe",{src:E,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"},frameBorder:"0",allowFullScreen:!0,allow:"autoplay; fullscreen; picture-in-picture",sandbox:"allow-forms allow-pointer-lock allow-same-origin allow-scripts allow-top-navigation",title:"Video Player",loading:"eager",referrerPolicy:"no-referrer-when-downgrade",importance:"high",onLoad:()=>{console.log("🎬 Player iframe loaded"),K(!0),L!=="videasy"&&U>30?setTimeout(()=>{const s=document.querySelector("iframe");if(s&&s.contentWindow)try{s.contentWindow.postMessage({type:"SEEK_TO",time:U},"*"),console.log(`📍 Sent seek command to restore progress: ${U}s`)}catch(n){console.log("Could not send seek command:",n)}},500):console.log(L==="videasy"?"📍 Videasy native resume - no seeking needed":"📍 No significant progress to resume, starting from beginning")}})]}),e("div",{class:"container",children:[e("div",{class:"media-details-layout",children:[e("div",{class:"poster",children:[e("img",{src:Qe(je?`${Xe}${je}`:"https://via.placeholder.com/500x750.png?text=No+Image"),alt:ye||be}),Fe>0&&e("div",{class:"movie-progress-container",children:[e("div",{class:"movie-progress-bar",children:e("div",{class:"movie-progress",style:{width:`${Math.max(2,Fe)}%`}})}),e("div",{class:"movie-progress-text",children:w.duration_seconds>0?`${Math.floor(w.progress_seconds/60)}m / ${Math.floor(w.duration_seconds/60)}m watched`:`${Math.floor(w.progress_seconds/60)}m watched`})]})]}),e("div",{class:"details",children:[e("div",{class:"title-container",children:[e("h1",{children:ye||be}),e("button",{onClick:fs,class:`favorite-btn ${_e?"favorited":""}`,disabled:!Ne,children:Ne?_e?"♥ Favorited":"♡ Favorite":"..."}),e("button",{onClick:ms,class:"favorite-btn trailer-btn",children:[e("i",{class:"fas fa-film"})," Trailer"]}),!De&&e("span",{class:"login-hint",children:e("small",{children:[e("a",{href:"/login",style:{color:"#007bff",textDecoration:"none"},children:"Log in"})," to save favorites, track progress & continue watching"]})})]}),e("div",{class:"meta",children:[e("span",{class:"rating",children:["★ ",u.vote_average?u.vote_average.toFixed(1):"N/A"]}),(r==="tv"||r==="anime")&&O&&e("span",{style:{marginLeft:8},children:(()=>{const s=O?new Date(O).getFullYear():null;let n=null;return Ye?n=new Date(Ye).getFullYear():Be&&Be.toLowerCase()==="ended"&&(n=s),s&&n&&s===n?`${s}`:s&&n&&n!==s?`${s} - ${n}`:s?`${s} -`:""})()}),qe&&e("span",{children:[qe," min"]}),ze&&e("span",{children:[ze," Seasons"]})]}),e("div",{class:"genres",children:Ve&&Ve.map(s=>e("span",{class:"genre-tag",children:s.name}))}),e("p",{class:"overview",children:hs}),Me.length>0&&e("div",{class:"quality-selector",children:[e("label",{children:"Quality:"}),Me.map(s=>e("button",{class:`quality-btn ${E===s.url?"active":""}`,onClick:()=>q(s.url),children:[s.quality,"p"]}))]})]})]}),r==="anime"&&e("div",{class:"select-container",children:[e("label",{for:"dub-select",children:"Audio:"}),e("select",{id:"dub-select",value:B,onChange:s=>ts(s.target.value==="true"),children:[e("option",{value:"false",children:"Subbed"}),e("option",{value:"true",children:"Dubbed"})]})]}),e("div",{class:"selectors-container",children:[(r==="tv"||r==="anime")&&u&&u.seasons&&e("div",{class:"select-container",children:[e("label",{children:"Season:"}),e("div",{class:"selector-buttons",children:u.seasons.filter(s=>s.season_number>0).map(s=>e("button",{class:`selector-btn ${m===s.season_number?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected season ${s.season_number}`),he.current=!0,pe.current=null;const n=`/watch/${r}/${l}/season/${s.season_number}/episode/1`;Y(n,!0)},children:s.name},s.id))})]}),Pe.length>1&&e("div",{class:"select-container",children:[e("label",{children:"Source:"}),e("div",{class:"selector-buttons",children:Pe.map(s=>e("button",{class:`selector-btn ${L===s?"active":""}`,onClick:()=>Te(s),children:s},s))})]})]}),(r==="tv"||r==="anime")&&m!==null&&f!==null&&e("div",{class:"episodes-container",children:[e("h3",{children:"Episodes"}),rs?e("div",{class:"loading-spinner"}):e(Es,{children:[e("div",{class:"episode-list",children:j?.episodes?.slice((de-1)*x,de*x)?.map(s=>{const n=os.find(t=>t.season_number===m&&t.episode_number===s.episode_number),i=n&&n.progress_seconds>0?n.duration_seconds&&n.duration_seconds>0?Math.min(100,n.progress_seconds/n.duration_seconds*100):n.progress_seconds>30?5:2:0;return n&&n.progress_seconds>0&&console.log(`📊 Episode ${s.episode_number} progress:`,{progress_seconds:n.progress_seconds,duration_seconds:n.duration_seconds,progressPercent:i}),e("div",{class:`episode-card ${s.episode_number===f?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected episode ${s.episode_number}`),he.current=!0,pe.current=null;const t=`/watch/${r}/${l}/season/${m}/episode/${s.episode_number}`;Y(t,!0)},children:[e("div",{class:"episode-card-image",children:[e("img",{src:Qe(s.still_path?s.still_path.startsWith("/anilist_images/")||s.still_path.startsWith("http")?s.still_path:`${Xe}${s.still_path}`:`https://via.placeholder.com/300x169.png?text=${encodeURIComponent(s.name)}`),alt:s.name}),e("div",{class:"episode-number-badge",children:s.episode_number}),i>0&&e("div",{class:"episode-progress-container",children:[e("div",{class:"episode-progress-bar",children:e("div",{class:"episode-progress",style:{width:`${Math.max(2,i)}%`}})}),e("div",{class:"episode-progress-text",children:n&&n.duration_seconds>0?`${Math.floor(n.progress_seconds/60)}m / ${Math.floor(n.duration_seconds/60)}m`:`${Math.floor(n.progress_seconds/60)}m watched`})]})]}),e("div",{class:"episode-card-content",children:[e("h4",{children:[s.name,s.air_date&&e("span",{style:{color:"#aaa",fontWeight:400,fontSize:"0.95em",marginLeft:8},children:["• ",(()=>{const t=new Date(s.air_date);return isNaN(t)?null:t.toLocaleDateString(void 0,{month:"short",day:"numeric",year:"numeric"})})()]})]}),e("p",{class:"episode-overview",children:s.overview})]})]},s.id)})}),j?.episodes&&j.episodes.length>x&&(()=>{const s=Math.ceil(j.episodes.length/x),n=10,i=Math.ceil(s/n),t=(ue-1)*n+1,p=Math.min(t+n-1,s),c=Array.from({length:p-t+1},(o,a)=>t+a);return e("div",{class:"pagination-controls",children:[ue>1&&e("button",{onClick:()=>xe(o=>o-1),children:e("i",{class:"fas fa-angle-double-left"})}),c.map(o=>e("button",{class:de===o?"active":"",onClick:()=>Q(o),children:o},o)),ue<i&&e("button",{onClick:()=>xe(o=>o+1),children:e("i",{class:"fas fa-angle-double-right"})})]})})()]})]}),Ee.length>0&&e("div",{class:"recommendations",children:[e("h2",{children:"More Like This"}),e("div",{class:"movie-grid",children:Ee.map(s=>e(Ts,{item:s,type:r,progress:null,duration:null},`${s.media_type||r}-${s.id}`))})]})]})]})};export{Ws as default};
//# sourceMappingURL=Watch-B4I5Ssh6.js.map
