import{b as ie,s as ne,e as ae,a as is,$ as oe,A as N,f as ls,h as cs,i as Ee,j as Ve,u as e,k as Be,I as ze}from"./index-C1hI429S.js";import{d as g,A as p,y as E,T as ds,q as us,k as ms}from"./react-vendor-BYlzYzcd.js";import{H as gs}from"./Helmet-hXh7yb2P.js";import{M as hs}from"./MovieCard-DtwIR-fe.js";const fs=async w=>{const{data:{user:i}}=await ne.auth.getUser();if(!i){ae.error("You need to be logged in to save favorites.");return}const P=w.id,{getState:Y,setState:A}=ie,W=Y(),R=`${P}-tv`;if(W.favoritedMedia.has(R))return;A(y=>({favorites:[{...w,type:"tv"},...y.favorites],favoritedMedia:new Set(y.favoritedMedia).add(R)})),ae.success(`'${w.name||w.title}' has been added to your Favorites.`);const{error:v}=await ne.from("favorites").insert({user_id:i.id,media_id:P,media_type:"tv"});v&&(console.error("Error adding favorite show:",v),A(y=>{const x=new Set(y.favoritedMedia);return x.delete(R),{favoritedMedia:x,favorites:y.favorites.filter(M=>M.id!==P)}}))},ps=async w=>{const{data:{user:i}}=await ne.auth.getUser();if(!i)return;const P=w.id,{getState:Y,setState:A}=ie,W=`${P}-tv`,R=Y().favorites,v=Y().favoritedMedia;A(x=>({favorites:x.favorites.filter(M=>M.id!==P),favoritedMedia:new Set([...x.favoritedMedia].filter(M=>M!==W))})),ae.error(`'${w.name||w.title}' has been removed from your Favorites.`);const{error:y}=await ne.from("favorites").delete().match({user_id:i.id,media_id:P,media_type:"tv"});y&&(console.error("Error removing favorite show:",y),A({favorites:R,favoritedMedia:v}),ae.error(`Failed to remove '${w.name||w.title}' from favorites.`))},vs=w=>ie.getState().favoritedMedia.has(`${w}-tv`),Ps=w=>{const[i,P]=g(null),[Y,A]=g([]),[W,R]=g([]),[v,y]=g(""),[x,M]=g(!0),[ys,bs]=g(!1),[u,J]=g(null),[h,Q]=g(null),[k,Pe]=g("videasy"),[Te,Ge]=g(["videasy","vidsrc","embedsu"]),[D,le]=g(null),[Je,Me]=g(!1),[X,Qe]=g(!1),[L,q]=g(null),[ke,ce]=g(!1),[Ie,Ae]=g(!1),de=p(),[Re,Xe]=g(null),[K,O]=g(!1),[De,Z]=g([]),ue=p(null),[Ze,V]=g([]),[_,ee]=g(null),[me,xe]=g(!1),[ge,se]=g(0),[H,j]=g(1),[he,Le]=g(!1),S=10,re=p(!1),fe=p(null),pe=p(!1),ve=p(!1),es=p(!1),ss=p(null),rs=p(!1),te=p(new Set),ts=p(0);p(0);const ye=p(null);p({});const Ue=p({});p(0);const{id:m,type:r,season:U,episode:C}=w.matches,{user:I}=is(),{setCurrentMediaItem:be,favoritesFetched:Ce}=ie();E(()=>{if(r==="tv"||r==="anime")if(U&&C&&!isNaN(parseInt(U))&&!isNaN(parseInt(C))){const o=parseInt(U,10),t=parseInt(C,10);J(o),Q(t)}else J(1),Q(1);else J(null),Q(null)},[r,U,C]);const Fe=ds(()=>r!=="movie"||!_||!_.progress_seconds||_.progress_seconds<=0?0:_.duration_seconds>0?Math.min(100,_.progress_seconds/_.duration_seconds*100):_.progress_seconds>30?5:2,[r,_]);us((s,o)=>{if(!s||!o)return 1;const t=Math.ceil(s/S);return Math.max(1,Math.min(t,Math.ceil(o/S)))},[S]);const we=I?.id,Ne=p(we);E(()=>{Ne.current=we},[we]),E(()=>()=>{te.current.forEach(s=>clearTimeout(s)),te.current.clear()},[u,h]),E(()=>(i&&be({...i,type:r}),()=>{be(null)}),[i,r,be]),E(()=>{if(!m||!r){oe("/");return}y(""),O(!1),Z([]),P(null),M(!0),V([]),pe.current=!1,ve.current=!1,es.current=!1,ss.current=null,rs.current=!1,j(1),Le(!1),te.current.forEach(o=>clearTimeout(o)),te.current.clear(),ts.current=0,ye.current=null,(async()=>{M(!0);try{const o=new AbortController,t=setTimeout(()=>o.abort(),15e3),[c,f,a]=await Promise.all([fetch(`${N}/tmdb/${r}/${m}`,{signal:o.signal}).then(n=>{if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);return n.json()}).catch(n=>{throw console.error("Error fetching media details:",n),n}),fetch(`${N}/tmdb/${r}/${m}/videos`,{signal:o.signal}).then(n=>{if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);return n.json()}).catch(n=>(console.error("Error fetching videos:",n),{results:[]})),fetch(`${N}/tmdb/${r}/${m}/recommendations`,{signal:o.signal}).then(n=>{if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);return n.json()}).catch(n=>(console.error("Error fetching recommendations:",n),{results:[]}))]);if(clearTimeout(t),P(c),A(f.results||[]),R(a.results||[]),r==="anime"&&c.id)try{const n=await fetch(`${N}/anilist/from-tmdb/${c.id}`);if(n.ok){const l=await n.json();l.id&&Xe(l.id)}}catch(n){console.error("Error fetching AniList ID:",n)}}catch{P(null),A([]),R([])}finally{M(!1)}})()},[m,r,U,C]),E(()=>{(async()=>{if(!I||!i||!m||!r){r==="movie"?ee(null):(r==="tv"||r==="anime")&&V([]);return}try{if((r==="tv"||r==="anime")&&i.seasons&&i.seasons.length>0&&!(U&&C&&!isNaN(parseInt(U))&&!isNaN(parseInt(C)))&&!ve.current&&u!==null&&h!==null){console.log("🎬 Checking for continue watching episode...");const t=await ls(m);t&&t.season&&t.episode?(console.log(`🔄 Continue watching: S${t.season}E${t.episode}`),setTimeout(()=>{J(t.season),Q(t.episode);const c=`/watch/${r}/${m}/season/${t.season}/episode/${t.episode}`;oe(c,!0)},100)):console.log("📭 No continue watching data found, starting from beginning"),ve.current=!0}if(r==="tv"||r==="anime"){const o=await cs(m);V(o)}else if(r==="movie"){const o=await Ee(m,r);console.log("Movie progress data loaded:",o),ee(o)}}catch(o){console.error("Error loading user-specific data:",o)}})()},[I,i,m,r]),E(()=>{u!==null&&!he&&j(1)},[u]),E(()=>{(async()=>{if(!(r!=="tv"&&r!=="anime"||!m||!u||u===null)){Me(!0);try{const o=new AbortController,t=setTimeout(()=>o.abort(),1e4),c=await fetch(`${N}/tmdb/${r}/${m}/season/${u}`,{signal:o.signal});if(clearTimeout(t),c.ok){const f=await c.json();if(le(f),h&&f.episodes&&!he){const a=Math.ceil(h/S),n=Math.ceil(f.episodes.length/S),l=Math.max(1,Math.min(a,n));j(l),Le(!0)}}else le(null)}catch{le(null)}finally{Me(!1)}}})()},[m,r,u,h,he]),E(()=>{const s=`${u}-${h}`,o=fe.current&&fe.current!==s;if(fe.current=s,re.current&&!o){re.current=!1;return}o&&(re.current=!1),(async()=>{if(!m||!r||!i)return;const c=r==="anime"?Re:m;if(!c){r==="anime"&&console.log("Waiting for AniList ID...");return}const f=r==="anime"&&i&&(!i.seasons||i.seasons.length===0);if((r==="tv"||r==="anime"&&!f)&&(u===null||h===null))return;q(null),ce(!1);let a=0;if(Ne.current)try{const l=await Ee(m,r,u,h);l&&l.progress_seconds>30?(a=l.progress_seconds,se(l.progress_seconds)):se(0)}catch(l){console.error("Error fetching progress for stream URL:",l),se(0)}else se(0);let n=`${N}/stream-url?type=${r}&id=${c}&source=${k}`;(r==="tv"||r==="anime"&&!f)&&(n+=`&season=${u}&episode=${h}`),r==="anime"&&X&&(n+="&dub=true"),k==="videasy"&&(a>30&&(n+=`&progress=${Math.floor(a)}`),(r==="tv"||r==="anime")&&(n+="&nextEpisode=true&episodeSelector=true&autoplayNextEpisode=true"));try{const l=new AbortController,d=setTimeout(()=>l.abort(),2e4),T=await fetch(n,{signal:l.signal});clearTimeout(d);const $=await T.json();if(!T.ok)throw new Error($.message||`HTTP ${T.status}`);let b=$.url;if(!b)throw new Error("The streaming service did not provide a valid URL. This content might not be available.");$.isDirectSource?(y(b),Z($.qualities||[]),O(!0)):(y(b),O(!1),Z([])),$.currentSource&&$.currentSource!==k&&(re.current=!0,Pe($.currentSource)),$.availableSources&&Ge($.availableSources),q(null)}catch(l){let d="Could not load the video stream.",T=!0;l.name==="AbortError"?d="Stream request timed out. Please try again.":l.message.includes("unavailable")?d="All streaming sources are currently unavailable. This is usually temporary.":l.message.includes("503")?d="Streaming service is temporarily down. Please try again in a few minutes.":l.message.includes("404")?d="This content is not available from the current source.":l.message.includes("NetworkError")||l.message.includes("fetch")?d="Network connection issue. Please check your internet and try again.":d="Unable to load video stream. This might be due to leaving and returning to the browser.",q({message:d,canRetry:T}),y(""),O(!1)}})()},[m,r,u,h,k,X,i,Re]),E(()=>{if(I&&console.log("🔐 Progress tracking setup:",{hasUser:!0,userId:I.id,hasMediaDetails:!!i}),!I||!i){I&&!i&&console.log("⚠️ Progress tracking disabled - media details not yet available");return}const s=async(t,c)=>{console.log(`📊 Progress update received via ${c}: `,t);const f=t.season||u,a=t.episode||h;if(t&&t.progress>=0&&t.duration>0){const n=Date.now(),l=`${m}-${r}-${f}-${a}`,d=Ue.current;!d[l]||n-d[l]>5e3?(console.log(`🎬 Attempting to save progress for ${r} ${m}:`,{progress:t.progress,duration:t.duration,season:f,episode:a}),await Ve({...i,id:i.id,type:r,season:f,episode:a},t.progress,t.duration)?(console.log("✅ Progress saved successfully"),d[l]=n,f===u&&a===h&&(r==="movie"?ee({progress_seconds:t.progress,duration_seconds:t.duration}):(r==="tv"||r==="anime")&&V($=>{const b=[...$],F=b.findIndex(G=>G.season_number===f&&G.episode_number===a),z={media_id:parseInt(m,10),media_type:r,season_number:f,episode_number:a,progress_seconds:t.progress,duration_seconds:t.duration};return F>-1?b[F]={...b[F],...z}:b.push(z),b}))):console.error("❌ Failed to save progress")):console.log("⏭️ Progress save skipped (too recent):",{timeSinceLastSave:n-d[l],threshold:1200}),t.duration-t.progress}else console.log("⚠️ Progress update ignored (insufficient data):",{hasProgressData:!!t,progress:t?.progress,duration:t?.duration,meetsThreshold:t?.progress>=0&&t?.duration>0})};let o;if(K){const t=ue.current;if(!t)return;const c=async()=>{const a=await Ee(m,r,u,h);a&&a.progress_seconds&&(t.currentTime=a.progress_seconds)},f=async()=>{if(t.currentTime>0){const a=Date.now(),n=`${m}-${r}-${u}-${h}`,l=Ue.current;if(!l[n]||a-l[n]>5e3){const d={progress:Math.round(t.currentTime),duration:Math.round(t.duration),percentage:t.duration>0?t.currentTime/t.duration*100:0};console.log("🎬 Direct video - saving progress:",d),await Ve({...i,id:i.id,type:r,season:u,episode:h},d.progress,d.duration)?(console.log("✅ Direct video progress saved successfully"),l[n]=a,r==="movie"?ee({progress_seconds:d.progress,duration_seconds:d.duration}):(r==="tv"||r==="anime")&&V($=>{const b=[...$],F=b.findIndex(G=>G.season_number===u&&G.episode_number===h),z={media_id:parseInt(m,10),media_type:r,season_number:u,episode_number:h,progress_seconds:d.progress,duration_seconds:d.duration};return F>-1?b[F]={...b[F],...z}:b.push(z),b})):console.error("❌ Failed to save direct video progress")}}};return t.addEventListener("loadedmetadata",c),t.addEventListener("timeupdate",f),()=>{t.removeEventListener("loadedmetadata",c),t.removeEventListener("timeupdate",f)}}else return o=t=>{const c=["player.videasy.net","vidsrc.to","embed.su","vidsrc.xyz","vidsrc.in","vidsrc.pm"],f=new URL(t.origin);if(c.includes(f.hostname))try{const a=typeof t.data=="string"?JSON.parse(t.data):t.data;if(a&&a.type==="PROGRESS_UPDATE"&&a.data){const n={progress:a.data.progress?.watched,duration:a.data.progress?.duration,season:a.data.season||u,episode:a.data.episode||h};s(n,"PROGRESS_UPDATE");return}if(a.type==="MEDIA_DATA"&&a.data){console.warn("Legacy 'MEDIA_DATA' format detected. Player should be updated.");let n=a.data;if(typeof n=="string")try{n=JSON.parse(n)}catch(T){console.error("Error parsing double-encoded MEDIA_DATA string:",T);return}const l=`${r}-${m}`,d=n[l];if(d&&d.progress){const T={progress:d.progress.watched,duration:d.progress.duration,season:d.last_season_watched,episode:d.last_episode_watched};s(T,"MEDIA_DATA")}return}if(a.type==="PLAYER_EVENT"&&a.data)if(a.data.event==="timeupdate"){const n={progress:a.data.time,duration:a.data.duration};n.progress&&n.duration&&s(n,"PLAYER_EVENT")}else a.data.event==="ended"&&(r==="tv"||r==="anime")?console.log('Player reported "ended" event - Videasy will handle next episode automatically.'):a.data.event==="player_ready"&&(console.log("Player is ready."),xe(!0))}catch(a){console.error("Error processing message from player:",{origin:t.origin,data:t.data,error:a.message})}},window.addEventListener("message",o),()=>{window.removeEventListener("message",o)}},[I,i,K,ue,u,h]),E(()=>{if(v&&!K&&!me){const s=setTimeout(()=>{me||(console.warn("Player ready timeout, starting fallback progress tracking."),os())},1e4);return()=>clearTimeout(s)}},[v,K,me]);const os=()=>{const s=setInterval(()=>{document.hasFocus()&&console.log("Fallback: Checking for progress...")},15e3);return()=>clearInterval(s)};if(E(()=>(Ae(!1),!v&&!L&&(de.current=setTimeout(()=>{Ae(!0),console.log("Stream timeout error")},25e3)),()=>{de.current&&clearTimeout(de.current)}),[v,L,u,h,k]),x)return e("div",{class:"loading-state",children:[e("div",{class:"loading-spinner"}),e("p",{children:"Loading media details..."}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]});if(!i)return e("div",{class:"container",children:e("div",{class:"error-state",children:[e("h2",{children:"Unable to Load Media"}),e("p",{children:"We couldn't load the details for this content. This could be due to:"}),e("ul",{children:[e("li",{children:"Network connectivity issues"}),e("li",{children:"The content may no longer be available"}),e("li",{children:"Server maintenance"})]}),e("button",{onClick:()=>window.location.reload(),class:"btn btn-primary",style:{marginTop:"20px"},children:"Try Again"})]})});const{title:$e,name:_e,overview:ns,vote_average:ws,release_date:We,first_air_date:B,last_air_date:He,runtime:je,number_of_seasons:Ye,genres:qe,poster_path:Ke,status:Oe}=i,Se=vs(i.id);(We||B)&&new Date(We||B).getFullYear();const as=()=>{Se?ps(i):fs({...i,type:r})};return e("div",{children:[e(gs,{children:e("title",{children:[$e||_e," - FreeStream"]})}),e("div",{class:"player-container",children:[!v&&L&&e("div",{class:"stream-error-message",children:[e("p",{children:L.message}),L.canRetry&&e("div",{class:"error-actions",children:[e("button",{onClick:async()=>{ce(!0),setTimeout(()=>{(async()=>{const o=`${N}/stream-url?type=${r}&id=${m}&source=${k}${r==="tv"||r==="anime"?`&season=${u}&episode=${h}`:""}${r==="anime"?`&dub=${X}`:""}`;try{const t=await fetch(o),c=await t.json();if(t.ok)y(c.url),O(c.isDirectSource),Z(c.qualities||[]),q(null);else throw new Error(c.message)}catch(t){console.error("Retry failed:",t),q({message:"Retry failed. Please try selecting a different source.",canRetry:!0})}ce(!1)})()},1e3)},disabled:ke,class:"btn retry-btn",children:ke?"Retrying...":"Retry"}),e("p",{children:"Or try selecting a different source from the list below."})]})]}),!v&&!L&&!Ie&&e("div",{class:"stream-loading",children:[e("p",{children:"Loading video stream... "}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]}),!v&&!L&&Ie&&e("div",{class:"stream-error-message",children:[e("p",{children:"Sorry, this episode failed to load. Please refresh the page."}),e("div",{class:"error-actions",children:[e("button",{onClick:()=>window.location.reload(),class:"btn retry-btn",children:"Refresh"}),e("p",{children:"Or try selecting a different source from the list below if refreshing doesn't work."})]})]}),K?e("video",{ref:ue,src:v,controls:!0,autoPlay:!0,width:"100%"}):v&&e("iframe",{src:v,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"},frameBorder:"0",allowFullScreen:!0,allow:"autoplay; picture-in-picture",sandbox:"allow-forms allow-pointer-lock allow-same-origin allow-scripts allow-top-navigation",title:"Video Player",loading:"eager",referrerPolicy:"no-referrer-when-downgrade",importance:"high",onLoad:()=>{console.log("🎬 Player iframe loaded"),xe(!0),k!=="videasy"&&ge>30?setTimeout(()=>{const s=document.querySelector("iframe");if(s&&s.contentWindow)try{s.contentWindow.postMessage({type:"SEEK_TO",time:ge},"*"),console.log(`📍 Sent seek command to restore progress: ${ge}s`)}catch(o){console.log("Could not send seek command:",o)}},500):console.log(k==="videasy"?"📍 Videasy native resume - no seeking needed":"📍 No significant progress to resume, starting from beginning")}})]}),e("div",{class:"container",children:[e("div",{class:"media-details-layout",children:[e("div",{class:"poster",children:[e("img",{src:Be(Ke?`${ze}${Ke}`:"https://via.placeholder.com/500x750.png?text=No+Image"),alt:$e||_e}),Fe>0&&e("div",{class:"movie-progress-container",children:[e("div",{class:"movie-progress-bar",children:e("div",{class:"movie-progress",style:{width:`${Math.max(2,Fe)}%`}})}),e("div",{class:"movie-progress-text",children:_.duration_seconds>0?`${Math.floor(_.progress_seconds/60)}m / ${Math.floor(_.duration_seconds/60)}m watched`:`${Math.floor(_.progress_seconds/60)}m watched`})]})]}),e("div",{class:"details",children:[e("div",{class:"title-container",children:[e("h1",{children:$e||_e}),e("button",{onClick:as,class:`favorite-btn ${Se?"favorited":""}`,disabled:!Ce,children:Ce?Se?"♥ Favorited":"♡ Favorite":"..."}),!I&&e("span",{class:"login-hint",children:e("small",{children:[e("a",{href:"/login",style:{color:"#007bff",textDecoration:"none"},children:"Log in"})," to save favorites, track progress & continue watching"]})})]}),e("div",{class:"meta",children:[e("span",{class:"rating",children:["★ ",i.vote_average?i.vote_average.toFixed(1):"N/A"]}),(r==="tv"||r==="anime")&&B&&e("span",{style:{marginLeft:8},children:(()=>{const s=B?new Date(B).getFullYear():null;let o=null;return He?o=new Date(He).getFullYear():Oe&&Oe.toLowerCase()==="ended"&&(o=s),s&&o&&s===o?`${s}`:s&&o&&o!==s?`${s} - ${o}`:s?`${s} -`:""})()}),je&&e("span",{children:[je," min"]}),Ye&&e("span",{children:[Ye," Seasons"]})]}),e("div",{class:"genres",children:qe&&qe.map(s=>e("span",{class:"genre-tag",children:s.name}))}),e("p",{class:"overview",children:ns}),De.length>0&&e("div",{class:"quality-selector",children:[e("label",{children:"Quality:"}),De.map(s=>e("button",{class:`quality-btn ${v===s.url?"active":""}`,onClick:()=>y(s.url),children:[s.quality,"p"]}))]})]})]}),r==="anime"&&e("div",{class:"select-container",children:[e("label",{for:"dub-select",children:"Audio:"}),e("select",{id:"dub-select",value:X,onChange:s=>Qe(s.target.value==="true"),children:[e("option",{value:"false",children:"Subbed"}),e("option",{value:"true",children:"Dubbed"})]})]}),e("div",{class:"selectors-container",children:[(r==="tv"||r==="anime")&&i&&i.seasons&&e("div",{class:"select-container",children:[e("label",{children:"Season:"}),e("div",{class:"selector-buttons",children:i.seasons.filter(s=>s.season_number>0).map(s=>e("button",{class:`selector-btn ${u===s.season_number?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected season ${s.season_number}`),pe.current=!0,ye.current=null;const o=`/watch/${r}/${m}/season/${s.season_number}/episode/1`;oe(o,!0)},children:s.name},s.id))})]}),Te.length>1&&e("div",{class:"select-container",children:[e("label",{children:"Source:"}),e("div",{class:"selector-buttons",children:Te.map(s=>e("button",{class:`selector-btn ${k===s?"active":""}`,onClick:()=>Pe(s),children:s},s))})]})]}),(r==="tv"||r==="anime")&&u!==null&&h!==null&&e("div",{class:"episodes-container",children:[e("h3",{children:"Episodes"}),Je?e("div",{class:"loading-spinner"}):e(ms,{children:[e("div",{class:"episode-list",children:D?.episodes?.slice((H-1)*S,H*S)?.map(s=>{const o=Ze.find(c=>c.season_number===u&&c.episode_number===s.episode_number),t=o&&o.progress_seconds>0?o.duration_seconds&&o.duration_seconds>0?Math.min(100,o.progress_seconds/o.duration_seconds*100):o.progress_seconds>30?5:2:0;return e("div",{class:`episode-card ${s.episode_number===h?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected episode ${s.episode_number}`),pe.current=!0,ye.current=null;const c=`/watch/${r}/${m}/season/${u}/episode/${s.episode_number}`;oe(c,!0)},children:[e("div",{class:"episode-card-image",children:[e("img",{src:Be(s.still_path?`${ze}${s.still_path}`:`https://via.placeholder.com/300x169.png?text=${encodeURIComponent(s.name)}`),alt:s.name}),e("div",{class:"episode-number-badge",children:s.episode_number}),t>0&&e("div",{class:"episode-progress-bar",children:e("div",{class:"episode-progress",style:{width:`${Math.max(2,t)}%`}})})]}),e("div",{class:"episode-card-content",children:[e("h4",{children:[s.name,s.air_date&&e("span",{style:{color:"#aaa",fontWeight:400,fontSize:"0.95em",marginLeft:8},children:["• ",(()=>{const c=new Date(s.air_date);return isNaN(c)?null:c.toLocaleDateString(void 0,{month:"short",day:"numeric",year:"numeric"})})()]})]}),e("p",{class:"episode-overview",children:s.overview})]})]},s.id)})}),D?.episodes&&D.episodes.length>S&&e("div",{class:"pagination-controls",children:[e("button",{class:"pagination-btn",onClick:()=>j(s=>Math.max(1,s-1)),disabled:H===1,children:"← Previous"}),e("div",{class:"pagination-info",children:[e("span",{class:"page-numbers",children:Array.from({length:Math.ceil(D.episodes.length/S)},(s,o)=>o+1).map(s=>e("button",{class:`page-number ${s===H?"active":""}`,onClick:()=>j(s),children:s},s))}),e("span",{class:"page-text",children:["Page ",H," of ",Math.ceil(D.episodes.length/S),"(",D.episodes.length," episodes)"]})]}),e("button",{class:"pagination-btn",onClick:()=>j(s=>Math.min(Math.ceil(D.episodes.length/S),s+1)),disabled:H===Math.ceil(D.episodes.length/S),children:"Next →"})]})]})]}),W.length>0&&e("div",{class:"recommendations",children:[e("h2",{children:"More Like This"}),e("div",{class:"movie-grid",children:W.map(s=>e(hs,{item:s,type:r,progress:null,duration:null},`${s.media_type||r}-${s.id}`))})]})]})]})};export{Ps as default};
//# sourceMappingURL=Watch-FRaDGuu7.js.map
