{"version":3,"file":"History-Dk1eC87x.js","sources":["../../src/pages/History.jsx"],"sourcesContent":["import { h } from 'preact';\nimport './History.css';\nimport Helmet from 'preact-helmet';\nimport { useState, useEffect, useCallback } from 'preact/hooks';\n// Import getWatchHistory instead of getContinueWatching for actual watch history\nimport { getFullWatchHistory, deleteWatchItem } from '../utils/watchHistory';\nimport { useAuth } from '../context/Auth';\nimport { API_BASE_URL } from '../config';\nimport MovieCard from '../components/MovieCard';\nimport { useStore } from '../store';\n\n// Helper function to fetch with retry logic\nconst fetchWithRetry = async (url, maxRetries = 3, delay = 1000) => {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            // Create a timeout promise for environments that don't support AbortSignal.timeout\n            const timeoutPromise = new Promise((_, reject) => {\n                setTimeout(() => reject(new Error('Request timeout')), 10000);\n            });\n\n            const fetchPromise = fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }\n            });\n            \n            const response = await Promise.race([fetchPromise, timeoutPromise]);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            \n            return response;\n        } catch (error) {\n            console.warn(`Fetch attempt ${i + 1} failed for ${url}:`, error.message);\n            \n            if (i === maxRetries - 1) {\n                throw error;\n            }\n            \n            // Wait before retrying\n            await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n        }\n    }\n};\n\nconst History = () => {\n    const { user } = useAuth();\n    const [history, setHistory] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const { removeContinueWatchingItem, fetchContinueWatching } = useStore();\n\n    const fetchHistory = useCallback(async () => {\n        if (!user) {\n            setLoading(false);\n            return;\n        }\n        \n        setLoading(true);\n        setError(null);\n        \n        try {\n            // Use the new, optimized function to fetch all data in one go.\n            const fullHistory = await getFullWatchHistory(user.id);\n            setHistory(fullHistory);\n        } catch (error) {\n            console.error('Error fetching watch history:', error);\n            setError('Failed to load watch history. Please try again.');\n            setHistory([]);\n        } finally {\n            setLoading(false);\n        }\n    }, [user]);\n\n    useEffect(() => {\n        fetchHistory();\n    }, [fetchHistory, user]);\n\n    const handleDelete = async (itemToDelete) => {\n        // Optimistically remove the item from the UI using the unique watch_id\n        setHistory(history.filter(item => item.watch_id !== itemToDelete.watch_id));\n        \n        // Optimistically remove from the global \"Continue Watching\" state\n        removeContinueWatchingItem(itemToDelete.media_id);\n\n        try {\n            // Call the delete function from the utils\n            await deleteWatchItem(user.id, itemToDelete);\n\n            // Refetch continue watching to ensure it's up to date\n            await fetchContinueWatching(user.id);\n        } catch (error) {\n            console.error(\"Failed to delete item or refetch continue watching:\", error);\n            // Optionally, add the item back to the history list on failure\n            // and show a toast notification to the user.\n            // For now, we'll just log the error.\n        }\n    };\n\n    const handleRetry = () => {\n        fetchHistory();\n    };\n\n    if (loading) {\n        return <div class=\"container\"><p>Loading watch history...</p></div>;\n    }\n\n    if (error) {\n        return (\n            <div class=\"container\">\n                <Helmet>\n                    <title>Watch History - Fylm</title>\n                </Helmet>\n                <h1>Watch History</h1>\n                <div class=\"error-message\">\n                    <p>{error}</p>\n                    <button onClick={handleRetry} class=\"retry-button\">Retry</button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div class=\"container\">\n            <Helmet>\n                <title>Watch History - Fylm</title>\n            </Helmet>\n            <h1>Watch History</h1>\n            {history.length > 0 ? (\n                <div class=\"movie-grid\">\n                    {history.map(item => {\n                        return (\n                            <MovieCard \n                                key={item.watch_id} \n                                item={item} \n                                type={item.type}\n                                progress={item.progress_seconds}\n                                duration={item.duration_seconds}\n                                showDeleteButton={true}\n                                onDelete={handleDelete}\n                            />\n                        );\n                    })}\n                </div>\n            ) : (\n                <p>Your watch history is empty.</p>\n            )}\n        </div>\n    );\n};\n\nexport default History; "],"names":["History","user","useAuth","history","setHistory","useState","loading","setLoading","error","setError","removeContinueWatchingItem","fetchContinueWatching","useStore","fetchHistory","useCallback","fullHistory","getFullWatchHistory","useEffect","handleDelete","itemToDelete","item","deleteWatchItem","handleRetry","jsx","jsxs","Helmet","MovieCard"],"mappings":"sNA+CA,MAAMA,EAAU,IAAM,CAClB,KAAM,CAAE,KAAAC,CAAA,EAASC,EAAA,EACX,CAACC,EAASC,CAAU,EAAIC,EAAS,CAAA,CAAE,EACnC,CAACC,EAASC,CAAU,EAAIF,EAAS,EAAI,EACrC,CAACG,EAAOC,CAAQ,EAAIJ,EAAS,IAAI,EACjC,CAAE,2BAAAK,EAA4B,sBAAAC,CAAA,EAA0BC,EAAA,EAExDC,EAAeC,EAAY,SAAY,CACzC,GAAI,CAACb,EAAM,CACPM,EAAW,EAAK,EAChB,MACJ,CAEAA,EAAW,EAAI,EACfE,EAAS,IAAI,EAEb,GAAI,CAEA,MAAMM,EAAc,MAAMC,EAAoBf,EAAK,EAAE,EACrDG,EAAWW,CAAW,CAC1B,OAASP,EAAO,CACZ,QAAQ,MAAM,gCAAiCA,CAAK,EACpDC,EAAS,iDAAiD,EAC1DL,EAAW,CAAA,CAAE,CACjB,QAAA,CACIG,EAAW,EAAK,CACpB,CACJ,EAAG,CAACN,CAAI,CAAC,EAETgB,EAAU,IAAM,CACZJ,EAAA,CACJ,EAAG,CAACA,EAAcZ,CAAI,CAAC,EAEvB,MAAMiB,EAAe,MAAOC,GAAiB,CAEzCf,EAAWD,EAAQ,OAAOiB,GAAQA,EAAK,WAAaD,EAAa,QAAQ,CAAC,EAG1ET,EAA2BS,EAAa,QAAQ,EAEhD,GAAI,CAEA,MAAME,EAAgBpB,EAAK,GAAIkB,CAAY,EAG3C,MAAMR,EAAsBV,EAAK,EAAE,CACvC,OAASO,EAAO,CACZ,QAAQ,MAAM,sDAAuDA,CAAK,CAI9E,CACJ,EAEMc,EAAc,IAAM,CACtBT,EAAA,CACJ,EAEA,OAAIP,IACQ,MAAA,CAAI,MAAM,YAAY,SAAAiB,EAAC,IAAA,CAAE,oCAAwB,CAAA,CAAI,EAG7Df,EAEIgB,EAAC,MAAA,CAAI,MAAM,YACP,SAAA,CAAAD,EAACE,EAAA,CACG,SAAAF,EAAC,QAAA,CAAM,SAAA,sBAAA,CAAoB,EAC/B,EACAA,EAAC,MAAG,SAAA,eAAA,CAAa,EACjBC,EAAC,MAAA,CAAI,MAAM,gBACP,SAAA,CAAAD,EAAC,KAAG,SAAAf,CAAA,CAAM,IACT,SAAA,CAAO,QAASc,EAAa,MAAM,eAAe,SAAA,OAAA,CAAK,CAAA,CAAA,CAC5D,CAAA,EACJ,EAKJE,EAAC,MAAA,CAAI,MAAM,YACP,SAAA,CAAAD,EAACE,EAAA,CACG,SAAAF,EAAC,QAAA,CAAM,SAAA,sBAAA,CAAoB,EAC/B,EACAA,EAAC,MAAG,SAAA,eAAA,CAAa,EAChBpB,EAAQ,OAAS,EACdoB,EAAC,OAAI,MAAM,aACN,SAAApB,EAAQ,IAAIiB,GAELG,EAACG,EAAA,CAEG,KAAAN,EACA,KAAMA,EAAK,KACX,SAAUA,EAAK,iBACf,SAAUA,EAAK,iBACf,iBAAkB,GAClB,SAAUF,CAAA,EANLE,EAAK,QAAA,CASrB,CAAA,CACL,EAEAG,EAAC,KAAE,SAAA,8BAAA,CAA4B,CAAA,EAEvC,CAER"}