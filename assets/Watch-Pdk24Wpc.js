import{b as ne,s as re,e as oe,a as es,$ as te,A as W,f as ss,h as ts,i as $e,j as rs,k as We,u as e,l as Ke,I as je}from"./index-C2SMlRQe.js";import{d as f,A as y,y as T,T as os,q as ns,k as as}from"./react-vendor-BYlzYzcd.js";import{H as is}from"./Helmet-BJndoUNm.js";import{M as ls}from"./MovieCard-CzqTyfMY.js";const cs=async v=>{const{data:{user:a}}=await re.auth.getUser();if(!a){oe.error("You need to be logged in to save favorites.");return}const _=v.id,{getState:K,setState:k}=ne,F=K(),A=`${_}-tv`;if(F.favoritedMedia.has(A))return;k(p=>({favorites:[{...v,type:"tv"},...p.favorites],favoritedMedia:new Set(p.favoritedMedia).add(A)})),oe.success(`'${v.name||v.title}' has been added to your Favorites.`);const{error:S}=await re.from("favorites").insert({user_id:a.id,media_id:_,media_type:"tv"});S&&(console.error("Error adding favorite show:",S),k(p=>{const x=new Set(p.favoritedMedia);return x.delete(A),{favoritedMedia:x,favorites:p.favorites.filter(M=>M.id!==_)}}))},ds=async v=>{const{data:{user:a}}=await re.auth.getUser();if(!a)return;const _=v.id,{getState:K,setState:k}=ne,F=`${_}-tv`,A=K().favorites,S=K().favoritedMedia;k(x=>({favorites:x.favorites.filter(M=>M.id!==_),favoritedMedia:new Set([...x.favoritedMedia].filter(M=>M!==F))})),oe.error(`'${v.name||v.title}' has been removed from your Favorites.`);const{error:p}=await re.from("favorites").delete().match({user_id:a.id,media_id:_,media_type:"tv"});p&&(console.error("Error removing favorite show:",p),k({favorites:A,favoritedMedia:S}),oe.error(`Failed to remove '${v.name||v.title}' from favorites.`))},us=v=>ne.getState().favoritedMedia.has(`${v}-tv`),ws=v=>{const[a,_]=f(null),[K,k]=f([]),[F,A]=f([]),[S,p]=f(""),[x,M]=f(!0),[gs,ms]=f(!1),[c,Y]=f(null),[g,G]=f(null),[I,_e]=f("videasy"),[Se,qe]=f(["videasy","vidsrc","embedsu"]),[U,ae]=f(null),[Ve,Ee]=f(!1),[z,Oe]=f(!1),[J,j]=f(null),[Pe,ie]=f(!1),[le,q]=f(!1),[Te,Q]=f([]),ce=y(null),[Be,V]=f([]),[w,X]=f(null),[Me,ke]=f(!1),[de,Z]=f(0),[N,H]=f(1),[ue,Ae]=f(!1),b=6,ee=y(!1),ge=y(null),me=y(!1),he=y(!1),Ye=y(!1),Ge=y(null),ze=y(!1),se=y(new Set),Je=y(0);y(0);const fe=y(null),{id:d,type:s,season:R,episode:D}=v.matches,{user:E}=es(),{setCurrentMediaItem:pe,favoritesFetched:Ie}=ne();T(()=>{if(s==="tv"||s==="anime")if(R&&D&&!isNaN(parseInt(R))&&!isNaN(parseInt(D))){const n=parseInt(R,10),r=parseInt(D,10);Y(n),G(r)}else Y(1),G(1);else Y(null),G(null)},[s,R,D]);const Ue=os(()=>s!=="movie"||!w||!w.progress_seconds||w.progress_seconds<=0?0:w.duration_seconds>0?Math.min(100,w.progress_seconds/w.duration_seconds*100):w.progress_seconds>30?5:2,[s,w]);ns((t,n)=>{if(!t||!n)return 1;const r=Math.ceil(t/b);return Math.max(1,Math.min(r,Math.ceil(n/b)))},[b]);const ve=E?.id,xe=y(ve);y(0),T(()=>{xe.current=ve},[ve]),T(()=>()=>{se.current.forEach(t=>clearTimeout(t)),se.current.clear()},[c,g]),T(()=>(a&&pe({...a,type:s}),()=>{pe(null)}),[a,s,pe]),T(()=>{if(!d||!s){te("/");return}p(""),q(!1),Q([]),_(null),M(!0),V([]),me.current=!1,he.current=!1,Ye.current=!1,Ge.current=null,ze.current=!1,H(1),Ae(!1),se.current.forEach(n=>clearTimeout(n)),se.current.clear(),Je.current=0,fe.current=null,(async()=>{M(!0);try{const n=new AbortController,r=setTimeout(()=>n.abort(),15e3),[l,h,i]=await Promise.all([fetch(`${W}/tmdb/${s}/${d}`,{signal:n.signal}).then(o=>{if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);return o.json()}).catch(o=>{throw console.error("Error fetching media details:",o),o}),fetch(`${W}/tmdb/${s}/${d}/videos`,{signal:n.signal}).then(o=>{if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);return o.json()}).catch(o=>(console.error("Error fetching videos:",o),{results:[]})),fetch(`${W}/tmdb/${s}/${d}/recommendations`,{signal:n.signal}).then(o=>{if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);return o.json()}).catch(o=>(console.error("Error fetching recommendations:",o),{results:[]}))]);clearTimeout(r),_(l),k(h.results||[]),A(i.results||[])}catch{_(null),k([]),A([])}finally{M(!1)}})()},[d,s,R,D]),T(()=>{(async()=>{if(!E||!a||!d||!s){s==="movie"?X(null):(s==="tv"||s==="anime")&&V([]);return}try{if((s==="tv"||s==="anime")&&a.seasons&&a.seasons.length>0&&!(R&&D&&!isNaN(parseInt(R))&&!isNaN(parseInt(D)))&&!he.current&&c!==null&&g!==null){console.log("🎬 Checking for continue watching episode...");const r=await ss(d);r&&r.season&&r.episode?(console.log(`🔄 Continue watching: S${r.season}E${r.episode}`),setTimeout(()=>{Y(r.season),G(r.episode);const l=`/watch/${s}/${d}/season/${r.season}/episode/${r.episode}`;te(l,!0)},100)):console.log("📭 No continue watching data found, starting from beginning"),he.current=!0}if(s==="tv"||s==="anime"){const n=await ts(d);V(n)}else if(s==="movie"){const n=await $e(d,s);console.log("Movie progress data loaded:",n),X(n)}}catch(n){console.error("Error loading user-specific data:",n)}})()},[E,a,d,s]),T(()=>{c!==null&&!ue&&H(1)},[c]),T(()=>{(async()=>{if(!(s!=="tv"&&s!=="anime"||!d||!c||c===null)){Ee(!0);try{const n=new AbortController,r=setTimeout(()=>n.abort(),1e4),l=await fetch(`${W}/tmdb/${s}/${d}/season/${c}`,{signal:n.signal});if(clearTimeout(r),l.ok){const h=await l.json();if(ae(h),g&&h.episodes&&!ue){const i=Math.ceil(g/b),o=Math.ceil(h.episodes.length/b),u=Math.max(1,Math.min(i,o));H(u),Ae(!0)}}else ae(null)}catch{ae(null)}finally{Ee(!1)}}})()},[d,s,c,g,ue]),T(()=>{const t=`${c}-${g}`,n=ge.current&&ge.current!==t;if(ge.current=t,ee.current&&!n){ee.current=!1;return}n&&(ee.current=!1),(async()=>{if(!d||!s||(s==="tv"||s==="anime")&&(c===null||g===null))return;j(null),ie(!1);let l=0;if(xe.current)try{const i=await $e(d,s,c,g);i&&i.progress_seconds>30?(l=i.progress_seconds,Z(i.progress_seconds)):Z(0)}catch(i){console.error("Error fetching progress for stream URL:",i),Z(0)}else Z(0);let h=`${W}/stream-url?type=${s}&id=${d}&source=${I}`;(s==="tv"||s==="anime")&&(h+=`&season=${c}&episode=${g}`,s==="anime"&&(h+=`&dub=${z}`)),I==="videasy"&&(l>30&&(h+=`&progress=${Math.floor(l)}`),(s==="tv"||s==="anime")&&(h+="&nextEpisode=true&episodeSelector=true&autoplayNextEpisode=true"));try{const i=new AbortController,o=setTimeout(()=>i.abort(),2e4),u=await fetch(h,{signal:i.signal});clearTimeout(o);const m=await u.json();if(!u.ok)throw new Error(m.message||`HTTP ${u.status}`);let $=m.url;if(!$)throw new Error("The streaming service did not provide a valid URL. This content might not be available.");m.isDirectSource?(p($),Q(m.qualities||[]),q(!0)):(p($),q(!1),Q([])),m.currentSource&&m.currentSource!==I&&(ee.current=!0,_e(m.currentSource)),m.availableSources&&qe(m.availableSources),j(null)}catch(i){let o="Could not load the video stream.",u=!0;i.name==="AbortError"?o="Stream request timed out. Please try again.":i.message.includes("unavailable")?o="All streaming sources are currently unavailable. This is usually temporary.":i.message.includes("503")?o="Streaming service is temporarily down. Please try again in a few minutes.":i.message.includes("404")?o="This content is not available from the current source.":i.message.includes("NetworkError")||i.message.includes("fetch")?o="Network connection issue. Please check your internet and try again.":o="Unable to load video stream. This might be due to leaving and returning to the browser.",console.log("Video stream error:",i.message),j({message:o,canRetry:u}),p(""),q(!1)}})()},[d,s,c,g,I,z]),T(()=>{if(E&&a){const t=`${d}-${s}-${c}-${g}`,n=Date.now(),r=window.lastHistoryUpdate||{};(!r[t]||n-r[t]>5e3)&&(console.log("📝 Adding immediate watch history entry:",{mediaId:d,type:s,season:c,episode:g,title:a.title||a.name}),rs({...a,id:a.id,type:s,season:c,episode:g}).then(()=>{console.log("✅ Watch history entry added successfully")}).catch(l=>{console.error("❌ Failed to add watch history entry:",l)}),window.lastHistoryUpdate={...r,[t]:n})}},[E,a,s,c,g,d]),T(()=>{if(E&&console.log("🔐 Progress tracking setup:",{hasUser:!0,userId:E.id,hasMediaDetails:!!a}),!E||!a){E&&!a&&console.log("⚠️ Progress tracking disabled - media details not yet available");return}const t=async(r,l)=>{console.log(`📊 Progress update received via ${l}:`,r);const h=r.season||c,i=r.episode||g;if(r&&r.progress>=0&&r.duration>0){const o=Date.now(),u=`${d}-${s}-${h}-${i}`,m=window.lastProgressSave||{};!m[u]||o-m[u]>5e3?(console.log(`🎬 Attempting to save progress for ${s} ${d}:`,{progress:r.progress,duration:r.duration,season:h,episode:i}),await We({...a,id:a.id,type:s,season:h,episode:i},r.progress,r.duration)?(console.log("✅ Progress saved successfully"),window.lastProgressSave={...m,[u]:o},h===c&&i===g&&(s==="movie"?X({progress_seconds:r.progress,duration_seconds:r.duration}):(s==="tv"||s==="anime")&&V(C=>{const P=[...C],L=P.findIndex(B=>B.season_number===h&&B.episode_number===i),O={media_id:parseInt(d,10),media_type:s,season_number:h,episode_number:i,progress_seconds:r.progress,duration_seconds:r.duration};return L>-1?P[L]={...P[L],...O}:P.push(O),P}))):console.error("❌ Failed to save progress")):console.log("⏭️ Progress save skipped (too recent):",{timeSinceLastSave:o-m[u],threshold:5e3}),r.duration-r.progress}else console.log("⚠️ Progress update ignored (insufficient data):",{hasProgressData:!!r,progress:r?.progress,duration:r?.duration,meetsThreshold:r?.progress>=0&&r?.duration>0})};let n;if(le){const r=ce.current;if(!r)return;const l=async()=>{const i=await $e(d,s,c,g);i&&i.progress_seconds&&(r.currentTime=i.progress_seconds)},h=async()=>{if(r.currentTime>0){const i=Date.now(),o=`${d}-${s}-${c}-${g}`,u=window.lastProgressSave||{};if(!u[o]||i-u[o]>5e3){const m={progress:Math.round(r.currentTime),duration:Math.round(r.duration),percentage:r.duration>0?r.currentTime/r.duration*100:0};console.log("🎬 Direct video - saving progress:",m),await We({...a,id:a.id,type:s,season:c,episode:g},m.progress,m.duration)?(console.log("✅ Direct video progress saved successfully"),window.lastProgressSave={...u,[o]:i},s==="movie"?X({progress_seconds:m.progress,duration_seconds:m.duration}):(s==="tv"||s==="anime")&&V(C=>{const P=[...C],L=P.findIndex(B=>B.season_number===c&&B.episode_number===g),O={media_id:parseInt(d,10),media_type:s,season_number:c,episode_number:g,progress_seconds:m.progress,duration_seconds:m.duration};return L>-1?P[L]={...P[L],...O}:P.push(O),P})):console.error("❌ Failed to save direct video progress")}}};return r.addEventListener("loadedmetadata",l),r.addEventListener("timeupdate",h),()=>{r.removeEventListener("loadedmetadata",l),r.removeEventListener("timeupdate",h)}}else{n=l=>{const h=["player.videasy.net","vidsrc.to","embed.su","vidsrc.xyz","vidsrc.in","vidsrc.pm"],i=new URL(l.origin);if(h.includes(i.hostname))try{const o=typeof l.data=="string"?JSON.parse(l.data):l.data;if(o&&o.type==="PROGRESS_UPDATE"&&o.data){const u={progress:o.data.progress?.watched,duration:o.data.progress?.duration,season:o.data.season||c,episode:o.data.episode||g};t(u,"PROGRESS_UPDATE");return}if(o.type==="MEDIA_DATA"&&o.data){console.warn("Legacy 'MEDIA_DATA' format detected. Player should be updated.");let u=o.data;if(typeof u=="string")try{u=JSON.parse(u)}catch(C){console.error("Error parsing double-encoded MEDIA_DATA string:",C);return}const m=`${s}-${d}`,$=u[m];if($&&$.progress){const C={progress:$.progress.watched,duration:$.progress.duration,season:$.last_season_watched,episode:$.last_episode_watched};t(C,"MEDIA_DATA")}return}if(o.type==="PLAYER_EVENT"&&o.data)if(o.data.event==="timeupdate"){const u={progress:o.data.time,duration:o.data.duration};u.progress&&u.duration&&t(u,"PLAYER_EVENT")}else o.data.event==="ended"&&(s==="tv"||s==="anime")?console.log('Player reported "ended" event - Videasy will handle next episode automatically.'):o.data.event==="player_ready"&&(console.log("Player is ready."),ke(!0))}catch(o){console.error("Error processing message from player:",{origin:l.origin,data:l.data,error:o.message})}},window.addEventListener("message",n);const r=setTimeout(()=>{Me||(console.log("Player ready timeout, starting fallback progress tracking."),Qe())},5e3);return()=>{window.removeEventListener("message",n),clearTimeout(r)}}},[E,a,le,ce,c,g,Me]);const Qe=()=>{const t=setInterval(()=>{document.hasFocus()&&console.log("Fallback: Checking for progress...")},15e3);return()=>clearInterval(t)};if(x)return e("div",{class:"loading-state",children:[e("div",{class:"loading-spinner"}),e("p",{children:"Loading media details..."})]});if(!a)return e("div",{class:"container",children:e("div",{class:"error-state",children:[e("h2",{children:"Unable to Load Media"}),e("p",{children:"We couldn't load the details for this content. This could be due to:"}),e("ul",{children:[e("li",{children:"Network connectivity issues"}),e("li",{children:"The content may no longer be available"}),e("li",{children:"Server maintenance"})]}),e("button",{onClick:()=>window.location.reload(),class:"btn btn-primary",style:{marginTop:"20px"},children:"Try Again"})]})});const{title:ye,name:we,overview:Xe,vote_average:hs,release_date:Re,first_air_date:De,runtime:Ce,number_of_seasons:Le,genres:Fe,poster_path:Ne}=a,be=us(a.id),He=Re||De?new Date(Re||De).getFullYear():"",Ze=()=>{be?ds(a):cs({...a,type:s})};return e("div",{children:[e(is,{children:e("title",{children:[ye||we," - FreeStream"]})}),e("div",{class:"player-container",children:[!S&&J&&e("div",{class:"stream-error-message",children:[e("p",{children:J.message}),J.canRetry&&e("div",{class:"error-actions",children:[e("button",{onClick:async()=>{ie(!0),setTimeout(()=>{(async()=>{const n=`${W}/stream-url?type=${s}&id=${d}&source=${I}${s==="tv"||s==="anime"?`&season=${c}&episode=${g}`:""}${s==="anime"?`&dub=${z}`:""}`;try{const r=await fetch(n),l=await r.json();if(r.ok)p(l.url),q(l.isDirectSource),Q(l.qualities||[]),j(null);else throw new Error(l.message)}catch(r){console.error("Retry failed:",r),j({message:"Retry failed. Please try selecting a different source.",canRetry:!0})}ie(!1)})()},1e3)},disabled:Pe,class:"btn retry-btn",children:Pe?"Retrying...":"Retry"}),e("p",{children:"Or try selecting a different source from the list below."})]})]}),!S&&!J&&e("div",{class:"stream-loading",children:e("p",{children:"Loading video stream..."})}),le?e("video",{ref:ce,src:S,controls:!0,autoPlay:!0,width:"100%"}):S&&e("iframe",{src:S,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"},frameBorder:"0",allowFullScreen:!0,allow:"autoplay; picture-in-picture",sandbox:"allow-forms allow-pointer-lock allow-same-origin allow-scripts allow-top-navigation",title:"Video Player",loading:"eager",referrerPolicy:"no-referrer-when-downgrade",importance:"high",onLoad:()=>{console.log("🎬 Player iframe loaded"),ke(!0),I!=="videasy"&&de>30?setTimeout(()=>{const t=document.querySelector("iframe");if(t&&t.contentWindow)try{t.contentWindow.postMessage({type:"SEEK_TO",time:de},"*"),console.log(`📍 Sent seek command to restore progress: ${de}s`)}catch(n){console.log("Could not send seek command:",n)}},500):console.log(I==="videasy"?"📍 Videasy native resume - no seeking needed":"📍 No significant progress to resume, starting from beginning")}})]}),e("div",{class:"container",children:[e("div",{class:"media-details-layout",children:[e("div",{class:"poster",children:[e("img",{src:Ke(Ne?`${je}${Ne}`:"https://via.placeholder.com/500x750.png?text=No+Image"),alt:ye||we}),Ue>0&&e("div",{class:"movie-progress-container",children:[e("div",{class:"movie-progress-bar",children:e("div",{class:"movie-progress",style:{width:`${Math.max(2,Ue)}%`}})}),e("div",{class:"movie-progress-text",children:w.duration_seconds>0?`${Math.floor(w.progress_seconds/60)}m / ${Math.floor(w.duration_seconds/60)}m watched`:`${Math.floor(w.progress_seconds/60)}m watched`})]})]}),e("div",{class:"details",children:[e("div",{class:"title-container",children:[e("h1",{children:ye||we}),e("button",{onClick:Ze,class:`favorite-btn ${be?"favorited":""}`,disabled:!Ie,children:Ie?be?"♥ Favorited":"♡ Favorite":"..."}),!E&&e("span",{class:"login-hint",children:e("small",{children:[e("a",{href:"/login",style:{color:"#007bff",textDecoration:"none"},children:"Log in"})," to save favorites, track progress & continue watching"]})})]}),e("div",{class:"meta",children:[e("span",{class:"rating",children:["★ ",a.vote_average?a.vote_average.toFixed(1):"N/A"]}),He&&e("span",{children:He}),Ce&&e("span",{children:[Ce," min"]}),Le&&e("span",{children:[Le," Seasons"]})]}),e("div",{class:"genres",children:Fe&&Fe.map(t=>e("span",{class:"genre-tag",children:t.name}))}),e("p",{class:"overview",children:Xe}),Te.length>0&&e("div",{class:"quality-selector",children:[e("label",{children:"Quality:"}),Te.map(t=>e("button",{class:`quality-btn ${S===t.url?"active":""}`,onClick:()=>p(t.url),children:[t.quality,"p"]}))]})]})]}),s==="anime"&&e("div",{class:"select-container",children:[e("label",{for:"dub-select",children:"Audio:"}),e("select",{id:"dub-select",value:z,onChange:t=>Oe(t.target.value==="true"),children:[e("option",{value:"false",children:"Subbed"}),e("option",{value:"true",children:"Dubbed"})]})]}),e("div",{class:"selectors-container",children:[(s==="tv"||s==="anime")&&a&&a.seasons&&e("div",{class:"select-container",children:[e("label",{children:"Season:"}),e("div",{class:"selector-buttons",children:a.seasons.filter(t=>t.season_number>0).map(t=>e("button",{class:`selector-btn ${c===t.season_number?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected season ${t.season_number}`),me.current=!0,fe.current=null;const n=`/watch/${s}/${d}/season/${t.season_number}/episode/1`;te(n,!0)},children:t.name},t.id))})]}),Se.length>1&&e("div",{class:"select-container",children:[e("label",{children:"Source:"}),e("div",{class:"selector-buttons",children:Se.map(t=>e("button",{class:`selector-btn ${I===t?"active":""}`,onClick:()=>_e(t),children:t},t))})]})]}),(s==="tv"||s==="anime")&&c!==null&&g!==null&&e("div",{class:"episodes-container",children:[e("h3",{children:"Episodes"}),Ve?e("div",{class:"loading-spinner"}):e(as,{children:[e("div",{class:"episode-list",children:U?.episodes?.slice((N-1)*b,N*b)?.map(t=>{const n=Be.find(l=>l.season_number===c&&l.episode_number===t.episode_number),r=n&&n.progress_seconds>0?n.duration_seconds&&n.duration_seconds>0?Math.min(100,n.progress_seconds/n.duration_seconds*100):n.progress_seconds>30?5:2:0;return e("div",{class:`episode-card ${t.episode_number===g?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected episode ${t.episode_number}`),me.current=!0,fe.current=null;const l=`/watch/${s}/${d}/season/${c}/episode/${t.episode_number}`;te(l,!0)},children:[e("div",{class:"episode-card-image",children:[e("img",{src:Ke(t.still_path?`${je}${t.still_path}`:`https://via.placeholder.com/300x169.png?text=${encodeURIComponent(t.name)}`),alt:t.name}),e("div",{class:"episode-number-badge",children:t.episode_number}),r>0&&e("div",{class:"episode-progress-bar",children:e("div",{class:"episode-progress",style:{width:`${Math.max(2,r)}%`}})})]}),e("div",{class:"episode-card-content",children:[e("h4",{children:t.name}),e("p",{class:"episode-overview",children:t.overview})]})]},t.id)})}),U?.episodes&&U.episodes.length>b&&e("div",{class:"pagination-controls",children:[e("button",{class:"pagination-btn",onClick:()=>H(t=>Math.max(1,t-1)),disabled:N===1,children:"← Previous"}),e("div",{class:"pagination-info",children:[e("span",{class:"page-numbers",children:Array.from({length:Math.ceil(U.episodes.length/b)},(t,n)=>n+1).map(t=>e("button",{class:`page-number ${t===N?"active":""}`,onClick:()=>H(t),children:t},t))}),e("span",{class:"page-text",children:["Page ",N," of ",Math.ceil(U.episodes.length/b),"(",U.episodes.length," episodes)"]})]}),e("button",{class:"pagination-btn",onClick:()=>H(t=>Math.min(Math.ceil(U.episodes.length/b),t+1)),disabled:N===Math.ceil(U.episodes.length/b),children:"Next →"})]})]})]}),F.length>0&&e("div",{class:"recommendations",children:[e("h2",{children:"More Like This"}),e("div",{class:"movie-grid",children:F.map(t=>e(ls,{item:t,type:s,progress:null,duration:null},`${t.media_type||s}-${t.id}`))})]})]})]})};export{ws as default};
//# sourceMappingURL=Watch-Pdk24Wpc.js.map
