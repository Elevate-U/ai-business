{"version":3,"file":"MovieCard-DnFfwScB.js","sources":["../../src/components/MovieCard.jsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useCallback } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport { useStore } from '../store';\nimport { useAuth } from '../context/Auth';\nimport './MovieCard.css';\nimport { getProxiedImageUrl, IMAGE_BASE_URL } from '../config';\n\nconst MovieCard = ({ item, type, progress, duration, showDeleteButton, onDelete, onClick }) => {\n    // Destructure all needed properties from item\n    const {\n        id,\n        title,\n        name,\n        poster_path,\n        still_path,\n        vote_average,\n        episode_name,\n        season_number,\n        episode_number,\n        first_air_date,\n        release_date,\n        number_of_seasons,\n        // Enhanced anime properties\n        status,\n        episodes,\n        format,\n        nextAiringEpisode,\n        studios,\n        genres\n    } = item;\n\n    // Use episode still_path first, fallback to series poster_path for the image\n    const imagePath = still_path || poster_path;\n    const rawTitle = name || title;\n    const seriesTitle = typeof rawTitle === 'object' && rawTitle !== null\n        ? rawTitle.english || rawTitle.romaji || rawTitle.native\n        : rawTitle;\n\n    // Calculate progress percentage\n    const progressPercent = (progress && duration > 0) ? (progress / duration) * 100 : 0;\n\n    // Calculate year from release date\n    const year = (release_date || first_air_date) ? new Date(release_date || first_air_date).getFullYear() : null;\n\n    const { user } = useAuth();\n    const { addFavorite, removeFavorite, isShowFavorited, favoritesFetched } = useStore();\n    \n   \n    const favorited = isShowFavorited(item.id, type, item.season_number, item.episode_number);\n\n    const handleFavoriteClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!user) return; // Prevent action if user is not logged in\n\n        if (favorited) {\n            removeFavorite(user.id, item.id, type, item.season_number, item.episode_number);\n        } else {\n            addFavorite(user.id, { ...item, type });\n        }\n    };\n\n    // Enhanced click handler for all cards\n    const handleCardClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (onClick) {\n            // Use the custom onClick handler if provided (e.g., for the Anime page)\n            onClick(item);\n        } else {\n            // Default navigation logic for other pages\n            const mediaId = type === 'anime' && item.anilist_id ? item.anilist_id : item.id;\n            let link = `/watch/${type}/${mediaId}`;\n            \n            if ((type === 'tv' || type === 'anime') && item.season_number && item.episode_number) {\n                link += `/season/${item.season_number}/episode/${item.episode_number}`;\n            }\n            route(link);\n        }\n    };\n\n    // Enhanced subtitle text for anime\n    const getSubtitleText = () => {\n        if ((type === 'tv' || type === 'anime') && season_number && episode_number) {\n            // This is a specific episode (from watch history/favorites)\n            return `S${season_number} E${episode_number}${episode_name ? `: ${episode_name}` : ''}`;\n        } else if (type === 'anime') {\n            // Enhanced anime subtitle with episode count and status\n            const parts = [];\n            if (year) parts.push(year.toString());\n            if (episodes) parts.push(`${episodes} episodes`);\n            if (format && format !== 'TV') parts.push(format);\n            return parts.length > 0 ? parts.join(' • ') : 'Anime';\n        } else if (type === 'tv' && number_of_seasons) {\n            // This is a TV show listing - show year and season count\n            return `${year || 'Unknown'} • ${number_of_seasons} Season${number_of_seasons !== 1 ? 's' : ''}`;\n        } else if (type === 'movie' && year) {\n            // This is a movie - show just the year\n            return year.toString();\n        }\n        return null;\n    };\n\n    const subtitleText = getSubtitleText();\n\n    // Get anime status badge\n    const getStatusBadge = () => {\n        if (type !== 'anime' || !status) return null;\n        \n        const statusMap = {\n            'RELEASING': { text: 'Airing', class: 'airing' },\n            'FINISHED': { text: 'Completed', class: 'completed' },\n            'NOT_YET_RELEASED': { text: 'Upcoming', class: 'upcoming' },\n            'CANCELLED': { text: 'Cancelled', class: 'cancelled' },\n            'HIATUS': { text: 'Hiatus', class: 'hiatus' }\n        };\n        \n        const statusInfo = statusMap[status];\n        if (!statusInfo) return null;\n        \n        return (\n            <div className={`anime-status-badge ${statusInfo.class}`}>\n                {statusInfo.text}\n            </div>\n        );\n    };\n\n    // Get next episode info for airing anime\n    const getNextEpisodeInfo = () => {\n        if (type !== 'anime' || !nextAiringEpisode) return null;\n        \n        const timeUntilAiring = nextAiringEpisode.timeUntilAiring;\n        if (timeUntilAiring <= 0) return null;\n        \n        const days = Math.floor(timeUntilAiring / (24 * 60 * 60));\n        const hours = Math.floor((timeUntilAiring % (24 * 60 * 60)) / (60 * 60));\n        \n        let timeText = '';\n        if (days > 0) {\n            timeText = `${days}d ${hours}h`;\n        } else if (hours > 0) {\n            timeText = `${hours}h`;\n        } else {\n            timeText = '<1h';\n        }\n        \n        return (\n            <div className=\"next-episode-info\">\n                Ep {nextAiringEpisode.episode} in {timeText}\n            </div>\n        );\n    };\n\n    const getFullImageUrl = useCallback((path, size = 'w500') => {\n        if (!path) {\n            return 'https://via.placeholder.com/500x750/1a1a1a/ffffff?text=No+Image';\n        }\n        if (path.startsWith('http')) {\n            return getProxiedImageUrl(path);\n        }\n        const baseUrl = IMAGE_BASE_URL.replace('w500', size);\n        return getProxiedImageUrl(`${baseUrl}${path}`);\n    }, []);\n\n    const [imageUrl, setImageUrl] = useState(() => getFullImageUrl(imagePath, 'w200'));\n\n    const handleMouseEnter = useCallback(() => {\n        setImageUrl(getFullImageUrl(imagePath, 'w500'));\n    }, [imagePath, getFullImageUrl]);\n\n    const handleMouseLeave = useCallback(() => {\n        setImageUrl(getFullImageUrl(imagePath, 'w200'));\n    }, [imagePath, getFullImageUrl]);\n\n    // Enhanced card with anime-specific features\n    const cardContent = (\n        <div\n            className={`poster-wrapper ${type === 'anime' ? 'anime-card-enhanced' : ''}`}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n        >\n            <img\n                src={imageUrl}\n                alt={seriesTitle}\n                loading=\"lazy\"\n                width=\"400\"\n                height=\"600\"\n            />\n            {/* Gradient overlay for text readability */}\n            <div className=\"scrim\"></div>\n            \n            {/* Anime status badge */}\n            {getStatusBadge()}\n            \n            {/* Progress bar appears for all watched content */}\n            {progressPercent > 0.01 && (\n                <div className=\"progress-bar-container\">\n                    <div className=\"progress-bar\" style={{ width: `${Math.min(progressPercent, 100)}%` }}></div>\n                </div>\n            )}\n            \n            <div className=\"card-info\">\n                {/* Standardized Title Display */}\n                <div className=\"title-row\">\n                    <h3 className=\"card-title\">{seriesTitle}</h3>\n                    {user && (\n                        <button\n                            className={`favorite-btn ${favorited ? 'favorited' : ''}`}\n                            onClick={handleFavoriteClick}\n                            aria-label={favorited ? 'Remove from favorites' : 'Add to favorites'}\n                            disabled={!favoritesFetched}\n                        >\n                            ♥︎\n                        </button>\n                    )}\n                </div>\n                {subtitleText && (\n                    <p className=\"card-subtitle\">{subtitleText}</p>\n                )}\n                \n                {/* Next episode info for airing anime */}\n                {getNextEpisodeInfo()}\n                \n                {/* Studio info for anime */}\n                {type === 'anime' && studios && studios.length > 0 && (\n                    <p className=\"studio-info\">\n                        {studios[0].name}\n                    </p>\n                )}\n                \n                <span className=\"rating\">★ {vote_average ? vote_average.toFixed(1) : 'N/A'}</span>\n            </div>\n            {showDeleteButton && (\n                <button\n                    className=\"delete-btn\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (onDelete) onDelete(item);\n                    }}\n                >\n                    &times;\n                </button>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"movie-card-container\">\n            <div className=\"movie-card clickable\" onClick={handleCardClick}>\n                {cardContent}\n            </div>\n        </div>\n    );\n};\n\nexport default MovieCard;"],"names":["MovieCard","item","type","progress","duration","showDeleteButton","onDelete","onClick","id","title","name","poster_path","still_path","vote_average","episode_name","season_number","episode_number","first_air_date","release_date","number_of_seasons","status","episodes","format","nextAiringEpisode","studios","genres","imagePath","rawTitle","seriesTitle","progressPercent","year","user","useAuth","addFavorite","removeFavorite","isShowFavorited","favoritesFetched","useStore","favorited","handleFavoriteClick","handleCardClick","mediaId","link","route","subtitleText","parts","getStatusBadge","statusInfo","jsx","getNextEpisodeInfo","timeUntilAiring","days","hours","timeText","jsxs","getFullImageUrl","useCallback","path","size","getProxiedImageUrl","baseUrl","IMAGE_BASE_URL","imageUrl","setImageUrl","useState","handleMouseEnter","handleMouseLeave","cardContent"],"mappings":"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"}