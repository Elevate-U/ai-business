import{a as A,b as F,t as I,c as j,A as P,u as t,d as D}from"./index-CWh8w619.js";import{d as m,q as U,y as L}from"./react-vendor-BYlzYzcd.js";import{H}from"./Helmet-Ck9isPaq.js";import{M}from"./MovieCard-bDGZJlZp.js";const S=async(d,l=3,a=1e3)=>{for(let i=0;i<l;i++)try{const n=new Promise((g,_)=>{setTimeout(()=>_(new Error("Request timeout")),1e4)}),h=fetch(d,{headers:{Accept:"application/json","Content-Type":"application/json"}}),c=await Promise.race([h,n]);if(!c.ok)throw new Error(`HTTP ${c.status}: ${c.statusText}`);return c}catch(n){if(console.warn(`Fetch attempt ${i+1} failed for ${d}:`,n.message),i===l-1)throw n;await new Promise(h=>setTimeout(h,a*(i+1)))}},Y=()=>{const{user:d}=A(),[l,a]=m([]),[i,n]=m(!0),[h,c]=m(null),{removeContinueWatchingItem:g,fetchContinueWatching:_}=F(),y=U(async()=>{if(!d){n(!1);return}n(!0),c(null);try{if(!await I())throw new Error("Supabase connection test failed. Please check your internet connection and try again.");const o=await j();if(!o||o.length===0){a([]),n(!1);return}console.log("ðŸ“š Combined history data received:",{totalItems:o.length,itemsWithProgress:o.filter(r=>r.progress_seconds>0).length});const b=10;let p=[];for(let r=0;r<o.length;r+=b){const R=o.slice(r,r+b).map(async e=>{try{const u=e.media_id.split(":")[1];if(!u)return console.warn(`Skipping item with invalid media_id: ${e.media_id}`),null;const v=await(await S(`${P}/tmdb/${e.media_type}/${u}`)).json(),f={...v,id:v.id,watch_id:`${e.user_id}-${e.media_id}-${e.media_type}-${e.season_number||0}-${e.episode_number||0}`,type:e.media_type,media_type:e.media_type,media_id:e.media_id,season_number:e.season_number,episode_number:e.episode_number,watched_at:e.watched_at,progress_seconds:e.progress_seconds,duration_seconds:e.duration_seconds};if(e.media_type==="tv"&&e.season_number&&e.episode_number)try{const w=await(await S(`${P}/tmdb/tv/${u}/season/${e.season_number}/episode/${e.episode_number}`)).json();return{...f,episode_name:w.name,still_path:w.still_path,episode_overview:w.overview}}catch($){return console.error(`Error fetching episode details for ${u}:`,$),f}return f}catch(u){return console.error(`Error fetching details for ${e.media_type} ${e.media_id}:`,u),{id:e.media_id,watch_id:`${e.user_id}-${e.media_id}-${e.media_type}-${e.season_number||0}-${e.episode_number||0}`,type:e.media_type,media_type:e.media_type,media_id:e.media_id,season_number:e.season_number,episode_number:e.episode_number,watched_at:e.watched_at,title:e.media_type==="tv"?"Unknown TV Show":"Unknown Movie",name:e.media_type==="tv"?"Unknown TV Show":void 0,poster_path:null,overview:"Details could not be loaded.",_failed_to_load:!0,progress_seconds:e.progress_seconds,duration_seconds:e.duration_seconds}}}),C=await Promise.allSettled(R);p=p.concat(C);const T=p.filter(e=>e.status==="fulfilled"&&e.value).map(e=>e.value);a(T)}const E=p.filter(r=>r.status==="fulfilled"&&r.value).map(r=>r.value);a(E)}catch(s){console.error("Error fetching watch history:",s),c("Failed to load watch history. Please try again."),a([])}finally{n(!1)}},[d]);L(()=>{y()},[y,d]);const W=async s=>{a(l.filter(o=>o.watch_id!==s.watch_id)),g(s.media_id);try{await D(s),await _()}catch(o){console.error("Failed to delete item or refetch continue watching:",o)}},k=()=>{y()};return i?t("div",{class:"container",children:t("p",{children:"Loading watch history..."})}):h?t("div",{class:"container",children:[t(H,{children:t("title",{children:"Watch History - FreeStream"})}),t("h1",{children:"Watch History"}),t("div",{class:"error-message",children:[t("p",{children:h}),t("button",{onClick:k,class:"retry-button",children:"Retry"})]})]}):t("div",{class:"container",children:[t(H,{children:t("title",{children:"Watch History - FreeStream"})}),t("h1",{children:"Watch History"}),l.length>0?t("div",{class:"movie-grid",children:l.map(s=>t(M,{item:s,type:s.type,progress:s.progress_seconds,duration:s.duration_seconds,showDeleteButton:!0,onDelete:W},s.watch_id))}):t("p",{children:"Your watch history is empty."})]})};export{Y as default};
//# sourceMappingURL=History-BMnu98Ci.js.map
