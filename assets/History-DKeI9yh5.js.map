{"version":3,"file":"History-DKeI9yh5.js","sources":["../../src/pages/History.jsx"],"sourcesContent":["import { h } from 'preact';\nimport './History.css';\nimport Helmet from 'preact-helmet';\nimport { useState, useEffect, useCallback } from 'preact/hooks';\n// Import getWatchHistory instead of getContinueWatching for actual watch history\nimport { getWatchHistoryWithProgress, deleteWatchItem } from '../utils/watchHistory';\nimport { useAuth } from '../context/Auth';\nimport { testSupabaseConnection } from '../supabase';\nimport { API_BASE_URL } from '../config';\nimport MovieCard from '../components/MovieCard';\nimport { useStore } from '../store';\n\n// Helper function to fetch with retry logic\nconst fetchWithRetry = async (url, maxRetries = 3, delay = 1000) => {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            // Create a timeout promise for environments that don't support AbortSignal.timeout\n            const timeoutPromise = new Promise((_, reject) => {\n                setTimeout(() => reject(new Error('Request timeout')), 10000);\n            });\n\n            const fetchPromise = fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }\n            });\n            \n            const response = await Promise.race([fetchPromise, timeoutPromise]);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            \n            return response;\n        } catch (error) {\n            console.warn(`Fetch attempt ${i + 1} failed for ${url}:`, error.message);\n            \n            if (i === maxRetries - 1) {\n                throw error;\n            }\n            \n            // Wait before retrying\n            await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n        }\n    }\n};\n\nconst History = () => {\n    const { user } = useAuth();\n    const [history, setHistory] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const { removeContinueWatchingItem, fetchContinueWatching } = useStore();\n\n    const fetchHistory = useCallback(async () => {\n        if (!user) {\n            setLoading(false);\n            return;\n        }\n        \n        setLoading(true);\n        setError(null);\n        \n        try {\n            // Test Supabase connection first\n            const connectionOk = await testSupabaseConnection();\n            if (!connectionOk) {\n                throw new Error('Supabase connection test failed. Please check your internet connection and try again.');\n            }\n            \n            // Use the new combined function to fetch history with progress data\n            const historyData = await getWatchHistoryWithProgress();\n            if (!historyData || historyData.length === 0) {\n                setHistory([]);\n                setLoading(false);\n                return;\n            }\n\n            console.log('ðŸ“š Combined history data received:', {\n                totalItems: historyData.length,\n                itemsWithProgress: historyData.filter(item => item.progress_seconds > 0).length\n            });\n\n            // Fetch TMDB details for each history item with retry logic\n            const detailedHistory = await Promise.allSettled(\n                historyData.map(async (item) => {\n                    try {\n                        const response = await fetchWithRetry(`${API_BASE_URL}/tmdb/${item.media_type}/${item.media_id}`);\n                        const details = await response.json();\n                        \n                        // Create result object with TMDB details and watch history info (including progress)\n                        const result = {\n                            ...details,\n                            id: details.id, // TMDB ID\n                            watch_id: `${item.user_id}-${item.media_id}-${item.media_type}-${item.season_number || 0}-${item.episode_number || 0}`, // Unique key for deletion\n                            type: item.media_type,\n                            media_type: item.media_type,\n                            media_id: item.media_id, // Database media_id for reference\n                            season_number: item.season_number,\n                            episode_number: item.episode_number,\n                            watched_at: item.watched_at,\n                            // Include progress data directly in the item\n                            progress_seconds: item.progress_seconds,\n                            duration_seconds: item.duration_seconds\n                        };\n\n                        // If it's a TV show episode, fetch episode-specific details\n                        if (item.media_type === 'tv' && item.season_number && item.episode_number) {\n                            try {\n                                const episodeResponse = await fetchWithRetry(`${API_BASE_URL}/tmdb/tv/${item.media_id}/season/${item.season_number}/episode/${item.episode_number}`);\n                                const episodeDetails = await episodeResponse.json();\n                                return { \n                                    ...result,\n                                    episode_name: episodeDetails.name,\n                                    still_path: episodeDetails.still_path,\n                                    episode_overview: episodeDetails.overview\n                                };\n                            } catch (episodeError) {\n                                console.error('Error fetching episode details:', episodeError);\n                            }\n                        }\n                        \n                        return result;\n                    } catch (error) {\n                        console.error(`Error fetching details for ${item.media_type} ${item.media_id}:`, error);\n                        // Return a placeholder item instead of null so we don't lose the history entry\n                        return {\n                            id: item.media_id,\n                            watch_id: `${item.user_id}-${item.media_id}-${item.media_type}-${item.season_number || 0}-${item.episode_number || 0}`,\n                            type: item.media_type,\n                            media_type: item.media_type,\n                            media_id: item.media_id,\n                            season_number: item.season_number,\n                            episode_number: item.episode_number,\n                            watched_at: item.watched_at,\n                            title: item.media_type === 'tv' ? 'Unknown TV Show' : 'Unknown Movie',\n                            name: item.media_type === 'tv' ? 'Unknown TV Show' : undefined,\n                            poster_path: null,\n                            overview: 'Details could not be loaded',\n                            _failed_to_load: true,\n                            // Include progress data even for failed items\n                            progress_seconds: item.progress_seconds,\n                            duration_seconds: item.duration_seconds\n                        };\n                    }\n                })\n            );\n            \n            // Extract successful results and filter out rejected promises\n            const successfulResults = detailedHistory\n                .filter(result => result.status === 'fulfilled' && result.value)\n                .map(result => result.value);\n            \n            setHistory(successfulResults);\n        } catch (error) {\n            console.error('Error fetching watch history:', error);\n            setError('Failed to load watch history. Please try again.');\n            setHistory([]);\n        } finally {\n            setLoading(false);\n        }\n    }, [user]);\n\n    useEffect(() => {\n        fetchHistory();\n    }, [fetchHistory]);\n\n    const handleDelete = async (itemToDelete) => {\n        // Optimistically remove the item from the UI using the unique watch_id\n        setHistory(history.filter(item => item.watch_id !== itemToDelete.watch_id));\n        \n        // Optimistically remove from the global \"Continue Watching\" state\n        removeContinueWatchingItem(itemToDelete.media_id);\n\n        try {\n            // Call the delete function from the utils\n            await deleteWatchItem(itemToDelete);\n\n            // Refetch continue watching to ensure it's up to date\n            await fetchContinueWatching();\n        } catch (error) {\n            console.error(\"Failed to delete item or refetch continue watching:\", error);\n            // Optionally, add the item back to the history list on failure\n            // and show a toast notification to the user.\n            // For now, we'll just log the error.\n        }\n    };\n\n    const handleRetry = () => {\n        fetchHistory();\n    };\n\n    if (loading) {\n        return <div class=\"container\"><p>Loading watch history...</p></div>;\n    }\n\n    if (error) {\n        return (\n            <div class=\"container\">\n                <Helmet>\n                    <title>Watch History - FreeStream</title>\n                </Helmet>\n                <h1>Watch History</h1>\n                <div class=\"error-message\">\n                    <p>{error}</p>\n                    <button onClick={handleRetry} class=\"retry-button\">Retry</button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div class=\"container\">\n            <Helmet>\n                <title>Watch History - FreeStream</title>\n            </Helmet>\n            <h1>Watch History</h1>\n            {history.length > 0 ? (\n                <div class=\"movie-grid\">\n                    {history.map(item => {\n                        return (\n                            <MovieCard \n                                key={item.watch_id} \n                                item={item} \n                                type={item.type}\n                                progress={item.progress_seconds}\n                                duration={item.duration_seconds}\n                                showDeleteButton={true}\n                                onDelete={handleDelete}\n                            />\n                        );\n                    })}\n                </div>\n            ) : (\n                <p>Your watch history is empty.</p>\n            )}\n        </div>\n    );\n};\n\nexport default History; "],"names":["fetchWithRetry","url","maxRetries","delay","i","timeoutPromise","_","reject","fetchPromise","response","error","resolve","History","user","useAuth","history","setHistory","useState","loading","setLoading","setError","removeContinueWatchingItem","fetchContinueWatching","useStore","fetchHistory","useCallback","testSupabaseConnection","historyData","getWatchHistoryWithProgress","item","successfulResults","details","API_BASE_URL","result","episodeDetails","episodeError","useEffect","handleDelete","itemToDelete","deleteWatchItem","handleRetry","jsx","jsxs","Helmet","MovieCard"],"mappings":"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"}