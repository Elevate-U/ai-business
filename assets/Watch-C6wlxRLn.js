import{b as ce,s as ie,t as le,a as dr,e as ur,$ as ae,A as W,f as mr,h as fr,i as ze,j as Ve,u as e,k as Be,I as Ke}from"./index-CanNQZLm.js";import{d,A as v,y as $,T as hr,q as gr,k as pr}from"./react-vendor-BYlzYzcd.js";import{H as vr}from"./Helmet-CKrV3-X4.js";import{M as yr}from"./MovieCard-3dEF2ck3.js";const br=async w=>{const{data:{user:a}}=await ie.auth.getUser();if(!a){le.error("You need to be logged in to save favorites.");return}const S=w.id,{getState:D,setState:L}=ce,O=D(),R=`${S}-tv`;if(O.favoritedMedia.has(R))return;L(_=>({favorites:[{...w,type:"tv"},..._.favorites],favoritedMedia:new Set(_.favoritedMedia).add(R)})),le.success(`'${w.name||w.title}' has been added to your Favorites.`);const{error:y}=await ie.from("favorites").insert({user_id:a.id,media_id:S,media_type:"tv"});y&&(console.error("Error adding favorite show:",y),L(_=>{const U=new Set(_.favoritedMedia);return U.delete(R),{favoritedMedia:U,favorites:_.favorites.filter(P=>P.id!==S)}}))},wr=async w=>{const{data:{user:a}}=await ie.auth.getUser();if(!a)return;const S=w.id,{getState:D,setState:L}=ce,O=`${S}-tv`,R=D().favorites,y=D().favoritedMedia;L(U=>({favorites:U.favorites.filter(P=>P.id!==S),favoritedMedia:new Set([...U.favoritedMedia].filter(P=>P!==O))})),le.error(`'${w.name||w.title}' has been removed from your Favorites.`);const{error:_}=await ie.from("favorites").delete().match({user_id:a.id,media_id:S,media_type:"tv"});_&&(console.error("Error removing favorite show:",_),L({favorites:R,favoritedMedia:y}),le.error(`Failed to remove '${w.name||w.title}' from favorites.`))},_r=w=>ce.getState().favoritedMedia.has(`${w}-tv`),Lr=w=>{const[a,S]=d(null),[D,L]=d([]),[O,R]=d([]),[y,_]=d(""),[U,P]=d(!0),[$r,Er]=d(!1);v(null);const[c,Q]=d(null),[m,X]=d(null),[x,Se]=d("videasy"),[Te,Je]=d(["videasy","vidsrc","embedsu"]),[A,Pe]=d(null),[Ge,ke]=d(!1),[Z,Qe]=d(!1),[N,q]=d(null),[Me,Ie]=d(!1),[Le,ee]=d(!1),k=v(),[Xe,Ze]=d(null),[er,de]=d(!1),[z,ue]=d(!1),[Re,me]=d([]),fe=v(null),[rr,V]=d([]),[E,re]=d(null),[he,se]=d(!1),[H,Sr]=d(0),[Y,j]=d(1),[ge,xe]=d(!1),T=10,te=v(!1),pe=v(null),ve=v(!1),ye=v(!1),sr=v(!1),tr=v(null),nr=v(!1),ne=v(new Set),or=v(0);v(0);const be=v(null);v({});const oe=v(0),{id:l,type:t,season:C,episode:F}=w.matches,{user:Ae}=dr(),b=Ae?.id,M=t==="anime"?"tv":t,{setCurrentMediaItem:we,favoritesFetched:Ce}=ce();$(()=>{if(t==="tv"||t==="anime")if(C&&F&&!isNaN(parseInt(C))&&!isNaN(parseInt(F))){const o=parseInt(C,10),i=parseInt(F,10);Q(o),X(i)}else Q(1),X(1);else Q(null),X(null)},[t,C,F]);const Fe=hr(()=>t!=="movie"||!E||!E.progress_seconds||E.progress_seconds<=0?0:E.duration_seconds>0?Math.min(100,E.progress_seconds/E.duration_seconds*100):E.progress_seconds>30?5:2,[t,E]),De=gr((r,o)=>{if(!r||!o)return 1;const i=Math.ceil(r/T);return Math.max(1,Math.min(i,Math.ceil(o/T)))},[T]),Ue=v(b);$(()=>{Ue.current=b},[b]);const ar=()=>{D.find(o=>o.type==="Trailer"&&o.site==="YouTube")?de(!0):alert("No trailer available for this movie.")};$(()=>()=>{ne.current.forEach(r=>clearTimeout(r)),ne.current.clear()},[c,m]),$(()=>{const r=()=>{document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||(console.log("üì± Exited fullscreen mode, syncing progress..."),setTimeout(()=>{ur(b).catch(i=>{console.error("Error syncing offline progress after fullscreen:",i)})},1e3))};return document.addEventListener("fullscreenchange",r),document.addEventListener("webkitfullscreenchange",r),document.addEventListener("mozfullscreenchange",r),()=>{document.removeEventListener("fullscreenchange",r),document.removeEventListener("webkitfullscreenchange",r),document.removeEventListener("mozfullscreenchange",r)}},[b]),$(()=>(a&&we({...a,type:t}),()=>{we(null)}),[a,t,we]),$(()=>{if(!l||!t){ae("/");return}_(""),ue(!1),me([]),S(null),P(!0),V([]),ve.current=!1,ye.current=!1,sr.current=!1,tr.current=null,nr.current=!1,j(1),xe(!1),ne.current.forEach(o=>clearTimeout(o)),ne.current.clear(),or.current=0,be.current=null,(async()=>{P(!0);try{const o=new AbortController,i=setTimeout(()=>o.abort(),15e3),[n,f,h]=await Promise.all([fetch(`${W}/tmdb/${M}/${l}`,{signal:o.signal}).then(s=>{if(!s.ok)throw new Error(`HTTP ${s.status}: ${s.statusText}`);return s.json()}).catch(s=>{throw console.error("Error fetching media details:",s),s}),fetch(`${W}/tmdb/${M}/${l}/videos`,{signal:o.signal}).then(s=>{if(!s.ok)throw new Error(`HTTP ${s.status}: ${s.statusText}`);return s.json()}).catch(s=>(console.error("Error fetching videos:",s),{results:[]})),fetch(`${W}/tmdb/${M}/${l}/recommendations`,{signal:o.signal}).then(s=>{if(!s.ok)throw new Error(`HTTP ${s.status}: ${s.statusText}`);return s.json()}).catch(s=>(console.error("Error fetching recommendations:",s),{results:[]}))]);if(clearTimeout(i),S(n),L(f.results||[]),R(h.results||[]),t==="anime"&&n.id)try{const s=await fetch(`${W}/anilist/from-tmdb/${n.id}`);if(s.ok){const u=await s.json();u.id&&Ze(u.id)}}catch(s){console.error("Error fetching AniList ID:",s)}}catch{S(null),L([]),R([])}finally{P(!1)}})()},[l,t,C,F,M,b]),$(()=>{(async()=>{if(!b||!a||!l||!t){t==="movie"?re(null):(t==="tv"||t==="anime")&&V([]);return}try{if((t==="tv"||t==="anime")&&a.seasons&&a.seasons.length>0&&!(C&&F&&!isNaN(parseInt(C))&&!isNaN(parseInt(F)))&&!ye.current&&c!==null&&m!==null){console.log("üé¨ Checking for continue watching episode...");const i=await mr(b,l,M);i&&i.season_number&&i.episode_number?(console.log(`üîÑ Continue watching: S${i.season_number}E${i.episode_number}`),setTimeout(()=>{Q(i.season_number),X(i.episode_number);const n=`/watch/${t}/${l}/season/${i.season_number}/episode/${i.episode_number}`;ae(n,!0)},100)):console.log("üì≠ No continue watching data found, starting from beginning"),ye.current=!0}if(t==="tv"||t==="anime"){const o=await fr(b,l,M);V(o)}else if(t==="movie"){const o=await ze(b,l,t);console.log("Movie progress data loaded:",o),re(o)}}catch(o){console.error("Error loading user-specific data:",o)}})()},[b,a,l,t,C,F,M]),$(()=>{c!==null&&!ge&&j(1)},[c]),$(()=>{(async()=>{if(!(t!=="tv"&&t!=="anime"||!l||!c||c===null)){ke(!0);try{const o=await fetch(`${W}/tmdb/${M}/${l}/season/${c}`);if(!o.ok)throw new Error(`Failed to fetch season details: ${o.statusText}`);const i=await o.json();if(Pe(i),!ge){const n=i.episodes.length,f=De(m,n);j(f),xe(!0)}}catch(o){console.error("Error fetching season details:",o),Pe(null)}finally{ke(!1)}}})()},[l,t,M,c,m,ge,De]),$(()=>{const r=`${c}-${m}`,o=pe.current&&pe.current!==r;if(pe.current=r,te.current&&!o){te.current=!1;return}o&&(te.current=!1),(async()=>{if(!l||!t)return;q(null),ee(!1),k.current&&clearTimeout(k.current),k.current=setTimeout(()=>{ee(!0)},1e4);const n=t==="anime"&&a&&(!a.seasons||a.seasons.length===0);if((t==="tv"||t==="anime"&&!n)&&(c===null||m===null)){console.log("Season/episode not set, aborting stream URL fetch."),clearTimeout(k.current);return}try{let f=`${W}/stream-url?type=${t}&id=${l}&source=${x}`;(t==="tv"||t==="anime"&&!n)&&(f+=`&season=${c}&episode=${m}`),t==="anime"&&Z&&(f+="&dub=true"),x==="videasy"&&(H>0&&(f+=`&progress=${Math.round(H)}`),(t==="tv"||t==="anime")&&(f+="&nextEpisode=true&episodeSelector=true&autoplayNextEpisode=true")),console.log(`Fetching stream URL: ${f}`);const h=await fetch(f);if(!h.ok)throw new Error(`Server responded with ${h.status}`);const s=await h.json();if(clearTimeout(k.current),s.url)console.log(`Stream URL generated: ${s.url}`),_(s.url),ue(s.isDirectSource||!1),me(s.qualities||[]),s.availableSources&&s.availableSources.length>0&&Je(s.availableSources),s.currentSource&&(te.current=!0,Se(s.currentSource)),q(null),se(!0);else throw new Error(s.message||"No stream URL returned from API")}catch(f){clearTimeout(k.current),console.error("Error fetching stream URL:",f.message),q(`Failed to load video: ${f.message}. Try changing the source or refreshing.`),se(!1)}})()},[l,t,c,m,x,Z,a,Xe,H,b]),$(()=>{const r=Ue.current;if(r&&console.log("üîê Progress tracking setup:",{hasUser:!0,userId:r,hasMediaDetails:!!a}),!r||!a){r&&!a&&console.log("‚ö†Ô∏è Progress tracking disabled - media details not yet available");return}const o=async(n,f)=>{console.log(`üìä Progress update received via ${f}: `,n);const h=n.season||c,s=n.episode||m;if(n&&n.progress>=0&&n.duration>0){const u=Date.now();if(u-oe.current<1e3)return;oe.current=u;try{console.log(`üé¨ Attempting to save progress for ${t} ${l}:`,{progress:n.progress,duration:n.duration,season:h,episode:s}),await Ve(r,{...a,id:a.id,type:t,season:h,episode:s},n.progress,n.duration).catch(p=>{if(console.error("‚ùå Progress save error caught:",p),p.message?.includes("timeout")||p.message?.includes("auth")){const g=`offline_progress_${t}_${l}_${h||0}_${s||0}`,I={media_id:l,media_type:t,season_number:h,episode_number:s,progress_seconds:n.progress,duration_seconds:n.duration,timestamp:new Date().toISOString()};return localStorage.setItem(g,JSON.stringify(I)),console.log("üì± Saved to localStorage after error"),!0}return!1})?(console.log("‚úÖ Progress saved successfully"),h===c&&s===m&&(t==="movie"?re({progress_seconds:n.progress,duration_seconds:n.duration}):(t==="tv"||t==="anime")&&V(p=>{const g=[...p],I=g.findIndex(G=>G.season_number===h&&G.episode_number===s),J={media_id:parseInt(l,10),media_type:t,season_number:h,episode_number:s,progress_seconds:n.progress,duration_seconds:n.duration};return I>-1?g[I]={...g[I],...J}:g.push(J),g}))):console.error("‚ùå Failed to save progress, will retry on next update")}catch(K){console.error("‚ùå An unexpected error occurred while saving progress:",K);try{const p=`offline_progress_${t}_${l}_${h||0}_${s||0}`,g={media_id:l,media_type:t,season_number:h,episode_number:s,progress_seconds:n.progress,duration_seconds:n.duration,timestamp:new Date().toISOString()};localStorage.setItem(p,JSON.stringify(g)),console.log("üì± Saved to localStorage after exception")}catch(p){console.error("üíî All save mechanisms failed:",p)}}}else console.log("‚ö†Ô∏è Progress update ignored (insufficient data):",{hasProgressData:!!n,progress:n?.progress,duration:n?.duration,meetsThreshold:n?.progress>=0&&n?.duration>0})};let i;if(z){const n=fe.current;if(!n)return;const f=async()=>{const s=await ze(b,l,t,c,m);s&&s.progress_seconds&&(n.currentTime=s.progress_seconds)},h=async()=>{if(n.currentTime>0){const s=Date.now();if(s-oe.current<1e3)return;oe.current=s;const u={progress:Math.round(n.currentTime),duration:Math.round(n.duration),percentage:n.duration>0?n.currentTime/n.duration*100:0};console.log("üé¨ Direct video - saving progress:",u),await Ve(b,{...a,id:a.id,type:t,season:c,episode:m},u.progress,u.duration)?(console.log("‚úÖ Direct video progress saved successfully"),t==="movie"?re({progress_seconds:u.progress,duration_seconds:u.duration}):(t==="tv"||t==="anime")&&V(p=>{const g=[...p],I=g.findIndex(G=>G.season_number===c&&G.episode_number===m),J={media_id:parseInt(l,10),media_type:t,season_number:c,episode_number:m,progress_seconds:u.progress,duration_seconds:u.duration};return I>-1?g[I]={...g[I],...J}:g.push(J),g})):console.error("‚ùå Failed to save direct video progress")}};return n.addEventListener("loadedmetadata",f),n.addEventListener("timeupdate",h),()=>{n.removeEventListener("loadedmetadata",f),n.removeEventListener("timeupdate",h)}}else return i=n=>{const f=["player.videasy.net","vidsrc.to","embed.su","vidsrc.xyz","vidsrc.in","vidsrc.pm"],h=new URL(n.origin);if(f.includes(h.hostname))try{const s=typeof n.data=="string"?JSON.parse(n.data):n.data;if(s&&s.type==="PROGRESS_UPDATE"&&s.data){const u={progress:s.data.progress?.watched,duration:s.data.progress?.duration,season:s.data.season||c,episode:s.data.episode||m};o(u,"PROGRESS_UPDATE");return}if(s.type==="MEDIA_DATA"&&s.data){let u=s.data;if(typeof u=="string")try{u=JSON.parse(u)}catch(g){console.error("Error parsing double-encoded MEDIA_DATA string:",g);return}const K=`${t}-${l}`,p=u[K];if(p&&p.progress){const g={progress:p.progress.watched,duration:p.progress.duration,season:p.last_season_watched,episode:p.last_episode_watched};o(g,"MEDIA_DATA")}return}if(s.type==="PLAYER_EVENT"&&s.data)if(s.data.event==="timeupdate"){const u={progress:s.data.time,duration:s.data.duration};u.progress&&u.duration&&o(u,"PLAYER_EVENT")}else s.data.event==="ended"&&(t==="tv"||t==="anime")?console.log('Player reported "ended" event - Videasy will handle next episode automatically.'):s.data.event==="player_ready"&&(console.log("Player is ready."),se(!0))}catch(s){console.error("Error processing message from player:",{origin:n.origin,data:n.data,error:s.message})}},window.addEventListener("message",i),()=>{window.removeEventListener("message",i)}},[a,z,fe,c,m,b]),$(()=>{if(y&&!z&&!he){const r=setTimeout(()=>{he||(console.warn("Player ready timeout, starting fallback progress tracking."),ir())},1e4);return()=>clearTimeout(r)}},[y,z,he]);const ir=()=>{const r=setInterval(()=>{document.hasFocus()&&console.log("Fallback: Checking for progress...")},15e3);return()=>clearInterval(r)};if($(()=>(ee(!1),!y&&!N&&(k.current=setTimeout(()=>{ee(!0),console.log("Stream timeout error")},25e3)),()=>{k.current&&clearTimeout(k.current)}),[y,N,c,m,x]),U)return e("div",{class:"loading-state",children:[e("div",{class:"loading-spinner"}),e("p",{children:"Loading media details..."}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]});if(!a)return e("div",{class:"container",children:e("div",{class:"error-state",children:[e("h2",{children:"Unable to Load Media"}),e("p",{children:"We couldn't load the details for this content. This could be due to:"}),e("ul",{children:[e("li",{children:"Network connectivity issues"}),e("li",{children:"The content may no longer be available"}),e("li",{children:"Server maintenance"})]}),e("button",{onClick:()=>window.location.reload(),class:"btn btn-primary",style:{marginTop:"20px"},children:"Try Again"})]})});const{title:_e,name:$e,overview:lr,vote_average:Tr,release_date:Ne,first_air_date:B,last_air_date:We,runtime:Oe,number_of_seasons:He,genres:Ye,poster_path:je,status:qe}=a,Ee=_r(a.id);(Ne||B)&&new Date(Ne||B).getFullYear();const cr=()=>{Ee?wr(a):br({...a,type:t})};return e("div",{children:[e(vr,{children:e("title",{children:[_e||$e," - Fovi"]})}),er&&e("div",{className:"trailer-modal",onClick:()=>de(!1),children:e("div",{className:"trailer-content",onClick:r=>r.stopPropagation(),children:[e("span",{className:"close-trailer",onClick:()=>de(!1),children:"√ó"}),e("iframe",{src:`https://www.youtube.com/embed/${D.find(r=>r.type==="Trailer")?.key}?autoplay=1`,frameBorder:"0",allow:"autoplay; encrypted-media",allowFullScreen:!0,title:"Trailer"})]})}),e("div",{class:"player-container",children:[!y&&N&&e("div",{class:"stream-error-message",children:[e("p",{children:N.message}),N.canRetry&&e("div",{class:"error-actions",children:[e("button",{onClick:async()=>{Ie(!0),setTimeout(()=>{(async()=>{const o=`${W}/stream-url?type=${t}&id=${l}&source=${x}${t==="tv"||t==="anime"?`&season=${c}&episode=${m}`:""}${t==="anime"?`&dub=${Z}`:""}`;try{const i=await fetch(o),n=await i.json();if(i.ok)_(n.url),ue(n.isDirectSource),me(n.qualities||[]),q(null);else throw new Error(n.message)}catch(i){console.error("Retry failed:",i),q({message:"Retry failed. Please try selecting a different source.",canRetry:!0})}Ie(!1)})()},1e3)},disabled:Me,class:"btn retry-btn",children:Me?"Retrying...":"Retry"}),e("p",{children:"Or try selecting a different source from the list below."})]})]}),!y&&!N&&!Le&&e("div",{class:"stream-loading",children:[e("p",{children:"Loading video stream... "}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]}),!y&&!N&&Le&&e("div",{class:"stream-error-message",children:[e("p",{children:"Sorry, this episode failed to load. Please refresh the page."}),e("div",{class:"error-actions",children:[e("button",{onClick:()=>window.location.reload(),class:"btn retry-btn",children:"Refresh"}),e("p",{children:"Or try selecting a different source from the list below if refreshing doesn't work."})]})]}),z?e("video",{ref:fe,src:y,controls:!0,autoPlay:!0,width:"100%"}):y&&e("iframe",{src:y,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"},frameBorder:"0",allowFullScreen:!0,allow:"autoplay; picture-in-picture",sandbox:"allow-forms allow-pointer-lock allow-same-origin allow-scripts allow-top-navigation",title:"Video Player",loading:"eager",referrerPolicy:"no-referrer-when-downgrade",importance:"high",onLoad:()=>{console.log("üé¨ Player iframe loaded"),se(!0),x!=="videasy"&&H>30?setTimeout(()=>{const r=document.querySelector("iframe");if(r&&r.contentWindow)try{r.contentWindow.postMessage({type:"SEEK_TO",time:H},"*"),console.log(`üìç Sent seek command to restore progress: ${H}s`)}catch(o){console.log("Could not send seek command:",o)}},500):console.log(x==="videasy"?"üìç Videasy native resume - no seeking needed":"üìç No significant progress to resume, starting from beginning")}})]}),e("div",{class:"container",children:[e("div",{class:"media-details-layout",children:[e("div",{class:"poster",children:[e("img",{src:Be(je?`${Ke}${je}`:"https://via.placeholder.com/500x750.png?text=No+Image"),alt:_e||$e}),Fe>0&&e("div",{class:"movie-progress-container",children:[e("div",{class:"movie-progress-bar",children:e("div",{class:"movie-progress",style:{width:`${Math.max(2,Fe)}%`}})}),e("div",{class:"movie-progress-text",children:E.duration_seconds>0?`${Math.floor(E.progress_seconds/60)}m / ${Math.floor(E.duration_seconds/60)}m watched`:`${Math.floor(E.progress_seconds/60)}m watched`})]})]}),e("div",{class:"details",children:[e("div",{class:"title-container",children:[e("h1",{children:_e||$e}),e("button",{onClick:cr,class:`favorite-btn ${Ee?"favorited":""}`,disabled:!Ce,children:Ce?Ee?"‚ô• Favorited":"‚ô° Favorite":"..."}),e("button",{onClick:ar,class:"favorite-btn trailer-btn",children:[e("i",{class:"fas fa-film"})," Trailer"]}),!Ae&&e("span",{class:"login-hint",children:e("small",{children:[e("a",{href:"/login",style:{color:"#007bff",textDecoration:"none"},children:"Log in"})," to save favorites, track progress & continue watching"]})})]}),e("div",{class:"meta",children:[e("span",{class:"rating",children:["‚òÖ ",a.vote_average?a.vote_average.toFixed(1):"N/A"]}),(t==="tv"||t==="anime")&&B&&e("span",{style:{marginLeft:8},children:(()=>{const r=B?new Date(B).getFullYear():null;let o=null;return We?o=new Date(We).getFullYear():qe&&qe.toLowerCase()==="ended"&&(o=r),r&&o&&r===o?`${r}`:r&&o&&o!==r?`${r} - ${o}`:r?`${r} -`:""})()}),Oe&&e("span",{children:[Oe," min"]}),He&&e("span",{children:[He," Seasons"]})]}),e("div",{class:"genres",children:Ye&&Ye.map(r=>e("span",{class:"genre-tag",children:r.name}))}),e("p",{class:"overview",children:lr}),Re.length>0&&e("div",{class:"quality-selector",children:[e("label",{children:"Quality:"}),Re.map(r=>e("button",{class:`quality-btn ${y===r.url?"active":""}`,onClick:()=>_(r.url),children:[r.quality,"p"]}))]})]})]}),t==="anime"&&e("div",{class:"select-container",children:[e("label",{for:"dub-select",children:"Audio:"}),e("select",{id:"dub-select",value:Z,onChange:r=>Qe(r.target.value==="true"),children:[e("option",{value:"false",children:"Subbed"}),e("option",{value:"true",children:"Dubbed"})]})]}),e("div",{class:"selectors-container",children:[(t==="tv"||t==="anime")&&a&&a.seasons&&e("div",{class:"select-container",children:[e("label",{children:"Season:"}),e("div",{class:"selector-buttons",children:a.seasons.filter(r=>r.season_number>0).map(r=>e("button",{class:`selector-btn ${c===r.season_number?"active":""}`,onClick:()=>{console.log(`üéØ User manually selected season ${r.season_number}`),ve.current=!0,be.current=null;const o=`/watch/${t}/${l}/season/${r.season_number}/episode/1`;ae(o,!0)},children:r.name},r.id))})]}),Te.length>1&&e("div",{class:"select-container",children:[e("label",{children:"Source:"}),e("div",{class:"selector-buttons",children:Te.map(r=>e("button",{class:`selector-btn ${x===r?"active":""}`,onClick:()=>Se(r),children:r},r))})]})]}),(t==="tv"||t==="anime")&&c!==null&&m!==null&&e("div",{class:"episodes-container",children:[e("h3",{children:"Episodes"}),Ge?e("div",{class:"loading-spinner"}):e(pr,{children:[e("div",{class:"episode-list",children:A?.episodes?.slice((Y-1)*T,Y*T)?.map(r=>{const o=rr.find(n=>n.season_number===c&&n.episode_number===r.episode_number),i=o&&o.progress_seconds>0?o.duration_seconds&&o.duration_seconds>0?Math.min(100,o.progress_seconds/o.duration_seconds*100):o.progress_seconds>30?5:2:0;return e("div",{class:`episode-card ${r.episode_number===m?"active":""}`,onClick:()=>{console.log(`üéØ User manually selected episode ${r.episode_number}`),ve.current=!0,be.current=null;const n=`/watch/${t}/${l}/season/${c}/episode/${r.episode_number}`;ae(n,!0)},children:[e("div",{class:"episode-card-image",children:[e("img",{src:Be(r.still_path?`${Ke}${r.still_path}`:`https://via.placeholder.com/300x169.png?text=${encodeURIComponent(r.name)}`),alt:r.name}),e("div",{class:"episode-number-badge",children:r.episode_number}),i>0&&e("div",{class:"episode-progress-bar",children:e("div",{class:"episode-progress",style:{width:`${Math.max(2,i)}%`}})})]}),e("div",{class:"episode-card-content",children:[e("h4",{children:[r.name,r.air_date&&e("span",{style:{color:"#aaa",fontWeight:400,fontSize:"0.95em",marginLeft:8},children:["‚Ä¢ ",(()=>{const n=new Date(r.air_date);return isNaN(n)?null:n.toLocaleDateString(void 0,{month:"short",day:"numeric",year:"numeric"})})()]})]}),e("p",{class:"episode-overview",children:r.overview})]})]},r.id)})}),A?.episodes&&A.episodes.length>T&&e("div",{class:"pagination-controls",children:[e("button",{class:"pagination-btn",onClick:()=>j(r=>Math.max(1,r-1)),disabled:Y===1,children:"‚Üê Previous"}),e("div",{class:"pagination-info",children:[e("span",{class:"page-numbers",children:Array.from({length:Math.ceil(A.episodes.length/T)},(r,o)=>o+1).map(r=>e("button",{class:`page-number ${r===Y?"active":""}`,onClick:()=>j(r),children:r},r))}),e("span",{class:"page-text",children:["Page ",Y," of ",Math.ceil(A.episodes.length/T),"(",A.episodes.length," episodes)"]})]}),e("button",{class:"pagination-btn",onClick:()=>j(r=>Math.min(Math.ceil(A.episodes.length/T),r+1)),disabled:Y===Math.ceil(A.episodes.length/T),children:"Next ‚Üí"})]})]})]}),O.length>0&&e("div",{class:"recommendations",children:[e("h2",{children:"More Like This"}),e("div",{class:"movie-grid",children:O.map(r=>e(yr,{item:r,type:t,progress:null,duration:null},`${r.media_type||t}-${r.id}`))})]})]})]})};export{Lr as default};
//# sourceMappingURL=Watch-C6wlxRLn.js.map
