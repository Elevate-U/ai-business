import{b as ae,s as oe,e as ne,a as ls,$ as re,A as Y,f as cs,h as ds,i as Se,j as us,k as Be,u as e,l as ze,I as Ge}from"./index-CWh8w619.js";import{d as g,A as p,y as S,T as hs,q as ms,k as gs}from"./react-vendor-BYlzYzcd.js";import{H as fs}from"./Helmet-Ck9isPaq.js";import{M as ps}from"./MovieCard-bDGZJlZp.js";const vs=async b=>{const{data:{user:a}}=await oe.auth.getUser();if(!a){ne.error("You need to be logged in to save favorites.");return}const E=b.id,{getState:j,setState:I}=ae,F=j(),R=`${E}-tv`;if(F.favoritedMedia.has(R))return;I(y=>({favorites:[{...b,type:"tv"},...y.favorites],favoritedMedia:new Set(y.favoritedMedia).add(R)})),ne.success(`'${b.name||b.title}' has been added to your Favorites.`);const{error:w}=await oe.from("favorites").insert({user_id:a.id,media_id:E,media_type:"tv"});w&&(console.error("Error adding favorite show:",w),I(y=>{const D=new Set(y.favoritedMedia);return D.delete(R),{favoritedMedia:D,favorites:y.favorites.filter(T=>T.id!==E)}}))},ys=async b=>{const{data:{user:a}}=await oe.auth.getUser();if(!a)return;const E=b.id,{getState:j,setState:I}=ae,F=`${E}-tv`,R=j().favorites,w=j().favoritedMedia;I(D=>({favorites:D.favorites.filter(T=>T.id!==E),favoritedMedia:new Set([...D.favoritedMedia].filter(T=>T!==F))})),ne.error(`'${b.name||b.title}' has been removed from your Favorites.`);const{error:y}=await oe.from("favorites").delete().match({user_id:a.id,media_id:E,media_type:"tv"});y&&(console.error("Error removing favorite show:",y),I({favorites:R,favoritedMedia:w}),ne.error(`Failed to remove '${b.name||b.title}' from favorites.`))},bs=b=>ae.getState().favoritedMedia.has(`${b}-tv`),Ms=b=>{const[a,E]=g(null),[j,I]=g([]),[F,R]=g([]),[w,y]=g(""),[D,T]=g(!0),[ws,$s]=g(!1),[c,G]=g(null),[u,J]=g(null),[M,Ee]=g("videasy"),[Pe,Je]=g(["videasy","vidsrc","embedsu"]),[A,ie]=g(null),[Qe,Te]=g(!1),[Q,Xe]=g(!1),[x,q]=g(null),[Me,le]=g(!1),[ke,Ie]=g(!1),ce=p(),[de,O]=g(!1),[Re,X]=g([]),ue=p(null),[Ze,V]=g([]),[$,Z]=g(null),[Ae,De]=g(!1),[he,ee]=g(0),[N,W]=g(1),[me,xe]=g(!1),_=6,se=p(!1),ge=p(null),fe=p(!1),pe=p(!1),es=p(!1),ss=p(null),ts=p(!1),te=p(new Set),rs=p(0);p(0);const ve=p(null),os=p({}),Ue=p({}),Le=p(0),{id:d,type:t,season:U,episode:L}=b.matches,{user:P}=ls(),{setCurrentMediaItem:ye,favoritesFetched:Ce}=ae();S(()=>{if(t==="tv"||t==="anime")if(U&&L&&!isNaN(parseInt(U))&&!isNaN(parseInt(L))){const n=parseInt(U,10),r=parseInt(L,10);G(n),J(r)}else G(1),J(1);else G(null),J(null)},[t,U,L]);const Fe=hs(()=>t!=="movie"||!$||!$.progress_seconds||$.progress_seconds<=0?0:$.duration_seconds>0?Math.min(100,$.progress_seconds/$.duration_seconds*100):$.progress_seconds>30?5:2,[t,$]);ms((s,n)=>{if(!s||!n)return 1;const r=Math.ceil(s/_);return Math.max(1,Math.min(r,Math.ceil(n/_)))},[_]);const be=P?.id,Ne=p(be);S(()=>{Ne.current=be},[be]),S(()=>()=>{te.current.forEach(s=>clearTimeout(s)),te.current.clear()},[c,u]),S(()=>(a&&ye({...a,type:t}),()=>{ye(null)}),[a,t,ye]),S(()=>{if(!d||!t){re("/");return}y(""),O(!1),X([]),E(null),T(!0),V([]),fe.current=!1,pe.current=!1,es.current=!1,ss.current=null,ts.current=!1,W(1),xe(!1),te.current.forEach(n=>clearTimeout(n)),te.current.clear(),rs.current=0,ve.current=null,(async()=>{T(!0);try{const n=new AbortController,r=setTimeout(()=>n.abort(),15e3),[i,f,l]=await Promise.all([fetch(`${Y}/tmdb/${t}/${d}`,{signal:n.signal}).then(o=>{if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);return o.json()}).catch(o=>{throw console.error("Error fetching media details:",o),o}),fetch(`${Y}/tmdb/${t}/${d}/videos`,{signal:n.signal}).then(o=>{if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);return o.json()}).catch(o=>(console.error("Error fetching videos:",o),{results:[]})),fetch(`${Y}/tmdb/${t}/${d}/recommendations`,{signal:n.signal}).then(o=>{if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);return o.json()}).catch(o=>(console.error("Error fetching recommendations:",o),{results:[]}))]);clearTimeout(r),E(i),I(f.results||[]),R(l.results||[])}catch{E(null),I([]),R([])}finally{T(!1)}})()},[d,t,U,L]),S(()=>{(async()=>{if(!P||!a||!d||!t){t==="movie"?Z(null):(t==="tv"||t==="anime")&&V([]);return}try{if((t==="tv"||t==="anime")&&a.seasons&&a.seasons.length>0&&!(U&&L&&!isNaN(parseInt(U))&&!isNaN(parseInt(L)))&&!pe.current&&c!==null&&u!==null){console.log("🎬 Checking for continue watching episode...");const r=await cs(d);r&&r.season&&r.episode?(console.log(`🔄 Continue watching: S${r.season}E${r.episode}`),setTimeout(()=>{G(r.season),J(r.episode);const i=`/watch/${t}/${d}/season/${r.season}/episode/${r.episode}`;re(i,!0)},100)):console.log("📭 No continue watching data found, starting from beginning"),pe.current=!0}if(t==="tv"||t==="anime"){const n=await ds(d);V(n)}else if(t==="movie"){const n=await Se(d,t);console.log("Movie progress data loaded:",n),Z(n)}}catch(n){console.error("Error loading user-specific data:",n)}})()},[P,a,d,t]),S(()=>{c!==null&&!me&&W(1)},[c]),S(()=>{(async()=>{if(!(t!=="tv"&&t!=="anime"||!d||!c||c===null)){Te(!0);try{const n=new AbortController,r=setTimeout(()=>n.abort(),1e4),i=await fetch(`${Y}/tmdb/${t}/${d}/season/${c}`,{signal:n.signal});if(clearTimeout(r),i.ok){const f=await i.json();if(ie(f),u&&f.episodes&&!me){const l=Math.ceil(u/_),o=Math.ceil(f.episodes.length/_),h=Math.max(1,Math.min(l,o));W(h),xe(!0)}}else ie(null)}catch{ie(null)}finally{Te(!1)}}})()},[d,t,c,u,me]),S(()=>{const s=`${c}-${u}`,n=ge.current&&ge.current!==s;if(ge.current=s,se.current&&!n){se.current=!1;return}n&&(se.current=!1),(async()=>{if(!d||!t||!a||(t==="tv"||t==="anime")&&(c===null||u===null))return;q(null),le(!1);let i=0;if(Ne.current)try{const l=await Se(d,t,c,u);l&&l.progress_seconds>30?(i=l.progress_seconds,ee(l.progress_seconds)):ee(0)}catch(l){console.error("Error fetching progress for stream URL:",l),ee(0)}else ee(0);let f=`${Y}/stream-url?type=${t}&id=${d}&source=${M}`;(t==="tv"||t==="anime")&&(f+=`&season=${c}&episode=${u}`,t==="anime"&&(f+=`&dub=${Q}`)),M==="videasy"&&(i>30&&(f+=`&progress=${Math.floor(i)}`),(t==="tv"||t==="anime")&&(f+="&nextEpisode=true&episodeSelector=true&autoplayNextEpisode=true"));try{const l=new AbortController,o=setTimeout(()=>l.abort(),2e4),h=await fetch(f,{signal:l.signal});clearTimeout(o);const m=await h.json();if(!h.ok)throw new Error(m.message||`HTTP ${h.status}`);let v=m.url;if(!v)throw new Error("The streaming service did not provide a valid URL. This content might not be available.");m.isDirectSource?(y(v),X(m.qualities||[]),O(!0)):(y(v),O(!1),X([])),m.currentSource&&m.currentSource!==M&&(se.current=!0,Ee(m.currentSource)),m.availableSources&&Je(m.availableSources),q(null)}catch(l){let o="Could not load the video stream.",h=!0;l.name==="AbortError"?o="Stream request timed out. Please try again.":l.message.includes("unavailable")?o="All streaming sources are currently unavailable. This is usually temporary.":l.message.includes("503")?o="Streaming service is temporarily down. Please try again in a few minutes.":l.message.includes("404")?o="This content is not available from the current source.":l.message.includes("NetworkError")||l.message.includes("fetch")?o="Network connection issue. Please check your internet and try again.":o="Unable to load video stream. This might be due to leaving and returning to the browser.",q({message:o,canRetry:h}),y(""),O(!1)}})()},[d,t,c,u,M,Q,a]),S(()=>{if(P&&a){const s=`${d}-${t}-${c}-${u}`,n=Date.now(),r=os.current;(!r[s]||n-r[s]>5e3)&&(console.log("📝 Adding immediate watch history entry:",{mediaId:d,type:t,season:c,episode:u,title:a.title||a.name}),us({...a,id:a.id,type:t,season:c,episode:u}).then(()=>{console.log("✅ Watch history entry added successfully")}).catch(i=>{console.error("❌ Failed to add watch history entry:",i)}),r[s]=n)}},[P,a,t,c,u,d]),S(()=>{if(P&&console.log("🔐 Progress tracking setup:",{hasUser:!0,userId:P.id,hasMediaDetails:!!a}),!P||!a){P&&!a&&console.log("⚠️ Progress tracking disabled - media details not yet available");return}const s=async(r,i)=>{const f=Date.now();if(f-Le.current<1e3)return;Le.current=f,console.log(`📊 Progress update received via ${i}: `,r);const l=r.season||c,o=r.episode||u;if(r&&r.progress>=0&&r.duration>0){const h=Date.now(),m=`${d}-${t}-${l}-${o}`,v=Ue.current;!v[m]||h-v[m]>5e3?(console.log(`🎬 Attempting to save progress for ${t} ${d}:`,{progress:r.progress,duration:r.duration,season:l,episode:o}),await Be({...a,id:a.id,type:t,season:l,episode:o},r.progress,r.duration)?(console.log("✅ Progress saved successfully"),v[m]=h,l===c&&o===u&&(t==="movie"?Z({progress_seconds:r.progress,duration_seconds:r.duration}):(t==="tv"||t==="anime")&&V(C=>{const k=[...C],K=k.findIndex(Ve=>Ve.season_number===l&&Ve.episode_number===o),z={media_id:parseInt(d,10),media_type:t,season_number:l,episode_number:o,progress_seconds:r.progress,duration_seconds:r.duration};return K>-1?k[K]={...k[K],...z}:k.push(z),k}))):console.error("❌ Failed to save progress")):console.log("⏭️ Progress save skipped (too recent):",{timeSinceLastSave:h-v[m],threshold:1200}),r.duration-r.progress}else console.log("⚠️ Progress update ignored (insufficient data):",{hasProgressData:!!r,progress:r?.progress,duration:r?.duration,meetsThreshold:r?.progress>=0&&r?.duration>0})};let n;if(de){const r=ue.current;if(!r)return;const i=async()=>{const l=await Se(d,t,c,u);l&&l.progress_seconds&&(r.currentTime=l.progress_seconds)},f=async()=>{if(r.currentTime>0){const l=Date.now(),o=`${d}-${t}-${c}-${u}`,h=Ue.current;if(!h[o]||l-h[o]>5e3){const m={progress:Math.round(r.currentTime),duration:Math.round(r.duration),percentage:r.duration>0?r.currentTime/r.duration*100:0};console.log("🎬 Direct video - saving progress:",m),await Be({...a,id:a.id,type:t,season:c,episode:u},m.progress,m.duration)?(console.log("✅ Direct video progress saved successfully"),h[o]=l,t==="movie"?Z({progress_seconds:m.progress,duration_seconds:m.duration}):(t==="tv"||t==="anime")&&V(H=>{const C=[...H],k=C.findIndex(z=>z.season_number===c&&z.episode_number===u),K={media_id:parseInt(d,10),media_type:t,season_number:c,episode_number:u,progress_seconds:m.progress,duration_seconds:m.duration};return k>-1?C[k]={...C[k],...K}:C.push(K),C})):console.error("❌ Failed to save direct video progress")}}};return r.addEventListener("loadedmetadata",i),r.addEventListener("timeupdate",f),()=>{r.removeEventListener("loadedmetadata",i),r.removeEventListener("timeupdate",f)}}else{n=i=>{const f=["player.videasy.net","vidsrc.to","embed.su","vidsrc.xyz","vidsrc.in","vidsrc.pm"],l=new URL(i.origin);if(f.includes(l.hostname))try{const o=typeof i.data=="string"?JSON.parse(i.data):i.data;if(o&&o.type==="PROGRESS_UPDATE"&&o.data){const h={progress:o.data.progress?.watched,duration:o.data.progress?.duration,season:o.data.season||c,episode:o.data.episode||u};s(h,"PROGRESS_UPDATE");return}if(o.type==="MEDIA_DATA"&&o.data){console.warn("Legacy 'MEDIA_DATA' format detected. Player should be updated.");let h=o.data;if(typeof h=="string")try{h=JSON.parse(h)}catch(H){console.error("Error parsing double-encoded MEDIA_DATA string:",H);return}const m=`${t}-${d}`,v=h[m];if(v&&v.progress){const H={progress:v.progress.watched,duration:v.progress.duration,season:v.last_season_watched,episode:v.last_episode_watched};s(H,"MEDIA_DATA")}return}if(o.type==="PLAYER_EVENT"&&o.data)if(o.data.event==="timeupdate"){const h={progress:o.data.time,duration:o.data.duration};h.progress&&h.duration&&s(h,"PLAYER_EVENT")}else o.data.event==="ended"&&(t==="tv"||t==="anime")?console.log('Player reported "ended" event - Videasy will handle next episode automatically.'):o.data.event==="player_ready"&&(console.log("Player is ready."),De(!0))}catch(o){console.error("Error processing message from player:",{origin:i.origin,data:i.data,error:o.message})}},window.addEventListener("message",n);const r=setTimeout(()=>{Ae||(console.log("Player ready timeout, starting fallback progress tracking."),ns())},5e3);return()=>{window.removeEventListener("message",n),clearTimeout(r)}}},[P,a,de,ue,c,u,Ae]);const ns=()=>{const s=setInterval(()=>{document.hasFocus()&&console.log("Fallback: Checking for progress...")},15e3);return()=>clearInterval(s)};if(S(()=>(Ie(!1),!w&&!x&&(ce.current=setTimeout(()=>{Ie(!0),console.log("Stream timeout error")},25e3)),()=>{ce.current&&clearTimeout(ce.current)}),[w,x,c,u,M]),D)return e("div",{class:"loading-state",children:[e("div",{class:"loading-spinner"}),e("p",{children:"Loading media details..."}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]});if(!a)return e("div",{class:"container",children:e("div",{class:"error-state",children:[e("h2",{children:"Unable to Load Media"}),e("p",{children:"We couldn't load the details for this content. This could be due to:"}),e("ul",{children:[e("li",{children:"Network connectivity issues"}),e("li",{children:"The content may no longer be available"}),e("li",{children:"Server maintenance"})]}),e("button",{onClick:()=>window.location.reload(),class:"btn btn-primary",style:{marginTop:"20px"},children:"Try Again"})]})});const{title:we,name:$e,overview:as,vote_average:_s,release_date:We,first_air_date:B,last_air_date:He,runtime:Ke,number_of_seasons:Ye,genres:je,poster_path:qe,status:Oe}=a,_e=bs(a.id);(We||B)&&new Date(We||B).getFullYear();const is=()=>{_e?ys(a):vs({...a,type:t})};return e("div",{children:[e(fs,{children:e("title",{children:[we||$e," - FreeStream"]})}),e("div",{class:"player-container",children:[!w&&x&&e("div",{class:"stream-error-message",children:[e("p",{children:x.message}),x.canRetry&&e("div",{class:"error-actions",children:[e("button",{onClick:async()=>{le(!0),setTimeout(()=>{(async()=>{const n=`${Y}/stream-url?type=${t}&id=${d}&source=${M}${t==="tv"||t==="anime"?`&season=${c}&episode=${u}`:""}${t==="anime"?`&dub=${Q}`:""}`;try{const r=await fetch(n),i=await r.json();if(r.ok)y(i.url),O(i.isDirectSource),X(i.qualities||[]),q(null);else throw new Error(i.message)}catch(r){console.error("Retry failed:",r),q({message:"Retry failed. Please try selecting a different source.",canRetry:!0})}le(!1)})()},1e3)},disabled:Me,class:"btn retry-btn",children:Me?"Retrying...":"Retry"}),e("p",{children:"Or try selecting a different source from the list below."})]})]}),!w&&!x&&!ke&&e("div",{class:"stream-loading",children:[e("p",{children:"Loading video stream... "}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]}),!w&&!x&&ke&&e("div",{class:"stream-error-message",children:[e("p",{children:"Sorry, this episode failed to load. Please refresh the page."}),e("div",{class:"error-actions",children:[e("button",{onClick:()=>window.location.reload(),class:"btn retry-btn",children:"Refresh"}),e("p",{children:"Or try selecting a different source from the list below if refreshing doesn't work."})]})]}),de?e("video",{ref:ue,src:w,controls:!0,autoPlay:!0,width:"100%"}):w&&e("iframe",{src:w,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"},frameBorder:"0",allowFullScreen:!0,allow:"autoplay; picture-in-picture",sandbox:"allow-forms allow-pointer-lock allow-same-origin allow-scripts allow-top-navigation",title:"Video Player",loading:"eager",referrerPolicy:"no-referrer-when-downgrade",importance:"high",onLoad:()=>{console.log("🎬 Player iframe loaded"),De(!0),M!=="videasy"&&he>30?setTimeout(()=>{const s=document.querySelector("iframe");if(s&&s.contentWindow)try{s.contentWindow.postMessage({type:"SEEK_TO",time:he},"*"),console.log(`📍 Sent seek command to restore progress: ${he}s`)}catch(n){console.log("Could not send seek command:",n)}},500):console.log(M==="videasy"?"📍 Videasy native resume - no seeking needed":"📍 No significant progress to resume, starting from beginning")}})]}),e("div",{class:"container",children:[e("div",{class:"media-details-layout",children:[e("div",{class:"poster",children:[e("img",{src:ze(qe?`${Ge}${qe}`:"https://via.placeholder.com/500x750.png?text=No+Image"),alt:we||$e}),Fe>0&&e("div",{class:"movie-progress-container",children:[e("div",{class:"movie-progress-bar",children:e("div",{class:"movie-progress",style:{width:`${Math.max(2,Fe)}%`}})}),e("div",{class:"movie-progress-text",children:$.duration_seconds>0?`${Math.floor($.progress_seconds/60)}m / ${Math.floor($.duration_seconds/60)}m watched`:`${Math.floor($.progress_seconds/60)}m watched`})]})]}),e("div",{class:"details",children:[e("div",{class:"title-container",children:[e("h1",{children:we||$e}),e("button",{onClick:is,class:`favorite-btn ${_e?"favorited":""}`,disabled:!Ce,children:Ce?_e?"♥ Favorited":"♡ Favorite":"..."}),!P&&e("span",{class:"login-hint",children:e("small",{children:[e("a",{href:"/login",style:{color:"#007bff",textDecoration:"none"},children:"Log in"})," to save favorites, track progress & continue watching"]})})]}),e("div",{class:"meta",children:[e("span",{class:"rating",children:["★ ",a.vote_average?a.vote_average.toFixed(1):"N/A"]}),(t==="tv"||t==="anime")&&B&&e("span",{style:{marginLeft:8},children:(()=>{const s=B?new Date(B).getFullYear():null;let n=null;return He?n=new Date(He).getFullYear():Oe&&Oe.toLowerCase()==="ended"&&(n=s),s&&n&&s===n?`${s}`:s&&n&&n!==s?`${s} - ${n}`:s?`${s} -`:""})()}),Ke&&e("span",{children:[Ke," min"]}),Ye&&e("span",{children:[Ye," Seasons"]})]}),e("div",{class:"genres",children:je&&je.map(s=>e("span",{class:"genre-tag",children:s.name}))}),e("p",{class:"overview",children:as}),Re.length>0&&e("div",{class:"quality-selector",children:[e("label",{children:"Quality:"}),Re.map(s=>e("button",{class:`quality-btn ${w===s.url?"active":""}`,onClick:()=>y(s.url),children:[s.quality,"p"]}))]})]})]}),t==="anime"&&e("div",{class:"select-container",children:[e("label",{for:"dub-select",children:"Audio:"}),e("select",{id:"dub-select",value:Q,onChange:s=>Xe(s.target.value==="true"),children:[e("option",{value:"false",children:"Subbed"}),e("option",{value:"true",children:"Dubbed"})]})]}),e("div",{class:"selectors-container",children:[(t==="tv"||t==="anime")&&a&&a.seasons&&e("div",{class:"select-container",children:[e("label",{children:"Season:"}),e("div",{class:"selector-buttons",children:a.seasons.filter(s=>s.season_number>0).map(s=>e("button",{class:`selector-btn ${c===s.season_number?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected season ${s.season_number}`),fe.current=!0,ve.current=null;const n=`/watch/${t}/${d}/season/${s.season_number}/episode/1`;re(n,!0)},children:s.name},s.id))})]}),Pe.length>1&&e("div",{class:"select-container",children:[e("label",{children:"Source:"}),e("div",{class:"selector-buttons",children:Pe.map(s=>e("button",{class:`selector-btn ${M===s?"active":""}`,onClick:()=>Ee(s),children:s},s))})]})]}),(t==="tv"||t==="anime")&&c!==null&&u!==null&&e("div",{class:"episodes-container",children:[e("h3",{children:"Episodes"}),Qe?e("div",{class:"loading-spinner"}):e(gs,{children:[e("div",{class:"episode-list",children:A?.episodes?.slice((N-1)*_,N*_)?.map(s=>{const n=Ze.find(i=>i.season_number===c&&i.episode_number===s.episode_number),r=n&&n.progress_seconds>0?n.duration_seconds&&n.duration_seconds>0?Math.min(100,n.progress_seconds/n.duration_seconds*100):n.progress_seconds>30?5:2:0;return e("div",{class:`episode-card ${s.episode_number===u?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected episode ${s.episode_number}`),fe.current=!0,ve.current=null;const i=`/watch/${t}/${d}/season/${c}/episode/${s.episode_number}`;re(i,!0)},children:[e("div",{class:"episode-card-image",children:[e("img",{src:ze(s.still_path?`${Ge}${s.still_path}`:`https://via.placeholder.com/300x169.png?text=${encodeURIComponent(s.name)}`),alt:s.name}),e("div",{class:"episode-number-badge",children:s.episode_number}),r>0&&e("div",{class:"episode-progress-bar",children:e("div",{class:"episode-progress",style:{width:`${Math.max(2,r)}%`}})})]}),e("div",{class:"episode-card-content",children:[e("h4",{children:[s.name,s.air_date&&e("span",{style:{color:"#aaa",fontWeight:400,fontSize:"0.95em",marginLeft:8},children:["• ",(()=>{const i=new Date(s.air_date);return isNaN(i)?null:i.toLocaleDateString(void 0,{month:"short",day:"numeric",year:"numeric"})})()]})]}),e("p",{class:"episode-overview",children:s.overview})]})]},s.id)})}),A?.episodes&&A.episodes.length>_&&e("div",{class:"pagination-controls",children:[e("button",{class:"pagination-btn",onClick:()=>W(s=>Math.max(1,s-1)),disabled:N===1,children:"← Previous"}),e("div",{class:"pagination-info",children:[e("span",{class:"page-numbers",children:Array.from({length:Math.ceil(A.episodes.length/_)},(s,n)=>n+1).map(s=>e("button",{class:`page-number ${s===N?"active":""}`,onClick:()=>W(s),children:s},s))}),e("span",{class:"page-text",children:["Page ",N," of ",Math.ceil(A.episodes.length/_),"(",A.episodes.length," episodes)"]})]}),e("button",{class:"pagination-btn",onClick:()=>W(s=>Math.min(Math.ceil(A.episodes.length/_),s+1)),disabled:N===Math.ceil(A.episodes.length/_),children:"Next →"})]})]})]}),F.length>0&&e("div",{class:"recommendations",children:[e("h2",{children:"More Like This"}),e("div",{class:"movie-grid",children:F.map(s=>e(ps,{item:s,type:t,progress:null,duration:null},`${s.media_type||t}-${s.id}`))})]})]})]})};export{Ms as default};
//# sourceMappingURL=Watch-fNrH_GN2.js.map
