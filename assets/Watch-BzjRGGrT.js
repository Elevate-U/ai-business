import{b as ae,s as oe,e as ne,a as os,$ as re,A as K,f as ns,h as as,i as Se,j as is,k as qe,u as e,l as Oe,I as Ve}from"./index-Dg7sRPgL.js";import{d as m,A as v,y as S,T as ls,q as cs,k as ds}from"./react-vendor-BYlzYzcd.js";import{H as us}from"./Helmet-CZgiig1F.js";import{M as gs}from"./MovieCard-C3sHO4aB.js";const hs=async y=>{const{data:{user:a}}=await oe.auth.getUser();if(!a){ne.error("You need to be logged in to save favorites.");return}const E=y.id,{getState:Y,setState:I}=ae,N=Y(),A=`${E}-tv`;if(N.favoritedMedia.has(A))return;I(p=>({favorites:[{...y,type:"tv"},...p.favorites],favoritedMedia:new Set(p.favoritedMedia).add(A)})),ne.success(`'${y.name||y.title}' has been added to your Favorites.`);const{error:w}=await oe.from("favorites").insert({user_id:a.id,media_id:E,media_type:"tv"});w&&(console.error("Error adding favorite show:",w),I(p=>{const U=new Set(p.favoritedMedia);return U.delete(A),{favoritedMedia:U,favorites:p.favorites.filter(M=>M.id!==E)}}))},ms=async y=>{const{data:{user:a}}=await oe.auth.getUser();if(!a)return;const E=y.id,{getState:Y,setState:I}=ae,N=`${E}-tv`,A=Y().favorites,w=Y().favoritedMedia;I(U=>({favorites:U.favorites.filter(M=>M.id!==E),favoritedMedia:new Set([...U.favoritedMedia].filter(M=>M!==N))})),ne.error(`'${y.name||y.title}' has been removed from your Favorites.`);const{error:p}=await oe.from("favorites").delete().match({user_id:a.id,media_id:E,media_type:"tv"});p&&(console.error("Error removing favorite show:",p),I({favorites:A,favoritedMedia:w}),ne.error(`Failed to remove '${y.name||y.title}' from favorites.`))},fs=y=>ae.getState().favoritedMedia.has(`${y}-tv`),Ss=y=>{const[a,E]=m(null),[Y,I]=m([]),[N,A]=m([]),[w,p]=m(""),[U,M]=m(!0),[ps,vs]=m(!1),[c,G]=m(null),[u,J]=m(null),[k,Ee]=m("videasy"),[Pe,Be]=m(["videasy","vidsrc","embedsu"]),[R,ie]=m(null),[ze,Te]=m(!1),[Q,Ge]=m(!1),[x,j]=m(null),[Me,le]=m(!1),[ke,Ie]=m(!1),ce=v(),[de,q]=m(!1),[Ae,X]=m([]),ue=v(null),[Je,O]=m([]),[b,Z]=m(null),[Re,Ue]=m(!1),[ge,ee]=m(0),[H,W]=m(1),[he,xe]=m(!1),$=6,se=v(!1),me=v(null),fe=v(!1),pe=v(!1),Qe=v(!1),Xe=v(null),Ze=v(!1),te=v(new Set),es=v(0);v(0);const ve=v(null),{id:d,type:t,season:D,episode:L}=y.matches,{user:P}=os(),{setCurrentMediaItem:ye,favoritesFetched:De}=ae();S(()=>{if(t==="tv"||t==="anime")if(D&&L&&!isNaN(parseInt(D))&&!isNaN(parseInt(L))){const n=parseInt(D,10),r=parseInt(L,10);G(n),J(r)}else G(1),J(1);else G(null),J(null)},[t,D,L]);const Le=ls(()=>t!=="movie"||!b||!b.progress_seconds||b.progress_seconds<=0?0:b.duration_seconds>0?Math.min(100,b.progress_seconds/b.duration_seconds*100):b.progress_seconds>30?5:2,[t,b]);cs((s,n)=>{if(!s||!n)return 1;const r=Math.ceil(s/$);return Math.max(1,Math.min(r,Math.ceil(n/$)))},[$]);const we=P?.id,Ce=v(we);v(0),S(()=>{Ce.current=we},[we]),S(()=>()=>{te.current.forEach(s=>clearTimeout(s)),te.current.clear()},[c,u]),S(()=>(a&&ye({...a,type:t}),()=>{ye(null)}),[a,t,ye]),S(()=>{if(!d||!t){re("/");return}p(""),q(!1),X([]),E(null),M(!0),O([]),fe.current=!1,pe.current=!1,Qe.current=!1,Xe.current=null,Ze.current=!1,W(1),xe(!1),te.current.forEach(n=>clearTimeout(n)),te.current.clear(),es.current=0,ve.current=null,(async()=>{M(!0);try{const n=new AbortController,r=setTimeout(()=>n.abort(),15e3),[i,f,l]=await Promise.all([fetch(`${K}/tmdb/${t}/${d}`,{signal:n.signal}).then(o=>{if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);return o.json()}).catch(o=>{throw console.error("Error fetching media details:",o),o}),fetch(`${K}/tmdb/${t}/${d}/videos`,{signal:n.signal}).then(o=>{if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);return o.json()}).catch(o=>(console.error("Error fetching videos:",o),{results:[]})),fetch(`${K}/tmdb/${t}/${d}/recommendations`,{signal:n.signal}).then(o=>{if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);return o.json()}).catch(o=>(console.error("Error fetching recommendations:",o),{results:[]}))]);clearTimeout(r),E(i),I(f.results||[]),A(l.results||[])}catch{E(null),I([]),A([])}finally{M(!1)}})()},[d,t,D,L]),S(()=>{(async()=>{if(!P||!a||!d||!t){t==="movie"?Z(null):(t==="tv"||t==="anime")&&O([]);return}try{if((t==="tv"||t==="anime")&&a.seasons&&a.seasons.length>0&&!(D&&L&&!isNaN(parseInt(D))&&!isNaN(parseInt(L)))&&!pe.current&&c!==null&&u!==null){console.log("🎬 Checking for continue watching episode...");const r=await ns(d);r&&r.season&&r.episode?(console.log(`🔄 Continue watching: S${r.season}E${r.episode}`),setTimeout(()=>{G(r.season),J(r.episode);const i=`/watch/${t}/${d}/season/${r.season}/episode/${r.episode}`;re(i,!0)},100)):console.log("📭 No continue watching data found, starting from beginning"),pe.current=!0}if(t==="tv"||t==="anime"){const n=await as(d);O(n)}else if(t==="movie"){const n=await Se(d,t);console.log("Movie progress data loaded:",n),Z(n)}}catch(n){console.error("Error loading user-specific data:",n)}})()},[P,a,d,t]),S(()=>{c!==null&&!he&&W(1)},[c]),S(()=>{(async()=>{if(!(t!=="tv"&&t!=="anime"||!d||!c||c===null)){Te(!0);try{const n=new AbortController,r=setTimeout(()=>n.abort(),1e4),i=await fetch(`${K}/tmdb/${t}/${d}/season/${c}`,{signal:n.signal});if(clearTimeout(r),i.ok){const f=await i.json();if(ie(f),u&&f.episodes&&!he){const l=Math.ceil(u/$),o=Math.ceil(f.episodes.length/$),g=Math.max(1,Math.min(l,o));W(g),xe(!0)}}else ie(null)}catch{ie(null)}finally{Te(!1)}}})()},[d,t,c,u,he]),S(()=>{const s=`${c}-${u}`,n=me.current&&me.current!==s;if(me.current=s,se.current&&!n){se.current=!1;return}n&&(se.current=!1),(async()=>{if(!d||!t||(t==="tv"||t==="anime")&&(c===null||u===null))return;j(null),le(!1);let i=0;if(Ce.current)try{const l=await Se(d,t,c,u);l&&l.progress_seconds>30?(i=l.progress_seconds,ee(l.progress_seconds)):ee(0)}catch(l){console.error("Error fetching progress for stream URL:",l),ee(0)}else ee(0);let f=`${K}/stream-url?type=${t}&id=${d}&source=${k}`;(t==="tv"||t==="anime")&&(f+=`&season=${c}&episode=${u}`,t==="anime"&&(f+=`&dub=${Q}`)),k==="videasy"&&(i>30&&(f+=`&progress=${Math.floor(i)}`),(t==="tv"||t==="anime")&&(f+="&nextEpisode=true&episodeSelector=true&autoplayNextEpisode=true"));try{const l=new AbortController,o=setTimeout(()=>l.abort(),2e4),g=await fetch(f,{signal:l.signal});clearTimeout(o);const h=await g.json();if(!g.ok)throw new Error(h.message||`HTTP ${g.status}`);let _=h.url;if(!_)throw new Error("The streaming service did not provide a valid URL. This content might not be available.");h.isDirectSource?(p(_),X(h.qualities||[]),q(!0)):(p(_),q(!1),X([])),h.currentSource&&h.currentSource!==k&&(se.current=!0,Ee(h.currentSource)),h.availableSources&&Be(h.availableSources),j(null)}catch(l){let o="Could not load the video stream.",g=!0;l.name==="AbortError"?o="Stream request timed out. Please try again.":l.message.includes("unavailable")?o="All streaming sources are currently unavailable. This is usually temporary.":l.message.includes("503")?o="Streaming service is temporarily down. Please try again in a few minutes.":l.message.includes("404")?o="This content is not available from the current source.":l.message.includes("NetworkError")||l.message.includes("fetch")?o="Network connection issue. Please check your internet and try again.":o="Unable to load video stream. This might be due to leaving and returning to the browser.",j({message:o,canRetry:g}),p(""),q(!1)}})()},[d,t,c,u,k,Q]),S(()=>{if(P&&a){const s=`${d}-${t}-${c}-${u}`,n=Date.now(),r=window.lastHistoryUpdate||{};(!r[s]||n-r[s]>5e3)&&(console.log("📝 Adding immediate watch history entry:",{mediaId:d,type:t,season:c,episode:u,title:a.title||a.name}),is({...a,id:a.id,type:t,season:c,episode:u}).then(()=>{console.log("✅ Watch history entry added successfully")}).catch(i=>{console.error("❌ Failed to add watch history entry:",i)}),window.lastHistoryUpdate={...r,[s]:n})}},[P,a,t,c,u,d]),S(()=>{if(P&&console.log("🔐 Progress tracking setup:",{hasUser:!0,userId:P.id,hasMediaDetails:!!a}),!P||!a){P&&!a&&console.log("⚠️ Progress tracking disabled - media details not yet available");return}const s=async(r,i)=>{console.log(`📊 Progress update received via ${i}:`,r);const f=r.season||c,l=r.episode||u;if(r&&r.progress>=0&&r.duration>0){const o=Date.now(),g=`${d}-${t}-${f}-${l}`,h=window.lastProgressSave||{};!h[g]||o-h[g]>5e3?(console.log(`🎬 Attempting to save progress for ${t} ${d}:`,{progress:r.progress,duration:r.duration,season:f,episode:l}),await qe({...a,id:a.id,type:t,season:f,episode:l},r.progress,r.duration)?(console.log("✅ Progress saved successfully"),window.lastProgressSave={...h,[g]:o},f===c&&l===u&&(t==="movie"?Z({progress_seconds:r.progress,duration_seconds:r.duration}):(t==="tv"||t==="anime")&&O(C=>{const T=[...C],F=T.findIndex(z=>z.season_number===f&&z.episode_number===l),B={media_id:parseInt(d,10),media_type:t,season_number:f,episode_number:l,progress_seconds:r.progress,duration_seconds:r.duration};return F>-1?T[F]={...T[F],...B}:T.push(B),T}))):console.error("❌ Failed to save progress")):console.log("⏭️ Progress save skipped (too recent):",{timeSinceLastSave:o-h[g],threshold:1200}),r.duration-r.progress}else console.log("⚠️ Progress update ignored (insufficient data):",{hasProgressData:!!r,progress:r?.progress,duration:r?.duration,meetsThreshold:r?.progress>=0&&r?.duration>0})};let n;if(de){const r=ue.current;if(!r)return;const i=async()=>{const l=await Se(d,t,c,u);l&&l.progress_seconds&&(r.currentTime=l.progress_seconds)},f=async()=>{if(r.currentTime>0){const l=Date.now(),o=`${d}-${t}-${c}-${u}`,g=window.lastProgressSave||{};if(!g[o]||l-g[o]>5e3){const h={progress:Math.round(r.currentTime),duration:Math.round(r.duration),percentage:r.duration>0?r.currentTime/r.duration*100:0};console.log("🎬 Direct video - saving progress:",h),await qe({...a,id:a.id,type:t,season:c,episode:u},h.progress,h.duration)?(console.log("✅ Direct video progress saved successfully"),window.lastProgressSave={...g,[o]:l},t==="movie"?Z({progress_seconds:h.progress,duration_seconds:h.duration}):(t==="tv"||t==="anime")&&O(C=>{const T=[...C],F=T.findIndex(z=>z.season_number===c&&z.episode_number===u),B={media_id:parseInt(d,10),media_type:t,season_number:c,episode_number:u,progress_seconds:h.progress,duration_seconds:h.duration};return F>-1?T[F]={...T[F],...B}:T.push(B),T})):console.error("❌ Failed to save direct video progress")}}};return r.addEventListener("loadedmetadata",i),r.addEventListener("timeupdate",f),()=>{r.removeEventListener("loadedmetadata",i),r.removeEventListener("timeupdate",f)}}else{n=i=>{const f=["player.videasy.net","vidsrc.to","embed.su","vidsrc.xyz","vidsrc.in","vidsrc.pm"],l=new URL(i.origin);if(f.includes(l.hostname))try{const o=typeof i.data=="string"?JSON.parse(i.data):i.data;if(o&&o.type==="PROGRESS_UPDATE"&&o.data){const g={progress:o.data.progress?.watched,duration:o.data.progress?.duration,season:o.data.season||c,episode:o.data.episode||u};s(g,"PROGRESS_UPDATE");return}if(o.type==="MEDIA_DATA"&&o.data){console.warn("Legacy 'MEDIA_DATA' format detected. Player should be updated.");let g=o.data;if(typeof g=="string")try{g=JSON.parse(g)}catch(C){console.error("Error parsing double-encoded MEDIA_DATA string:",C);return}const h=`${t}-${d}`,_=g[h];if(_&&_.progress){const C={progress:_.progress.watched,duration:_.progress.duration,season:_.last_season_watched,episode:_.last_episode_watched};s(C,"MEDIA_DATA")}return}if(o.type==="PLAYER_EVENT"&&o.data)if(o.data.event==="timeupdate"){const g={progress:o.data.time,duration:o.data.duration};g.progress&&g.duration&&s(g,"PLAYER_EVENT")}else o.data.event==="ended"&&(t==="tv"||t==="anime")?console.log('Player reported "ended" event - Videasy will handle next episode automatically.'):o.data.event==="player_ready"&&(console.log("Player is ready."),Ue(!0))}catch(o){console.error("Error processing message from player:",{origin:i.origin,data:i.data,error:o.message})}},window.addEventListener("message",n);const r=setTimeout(()=>{Re||(console.log("Player ready timeout, starting fallback progress tracking."),ss())},5e3);return()=>{window.removeEventListener("message",n),clearTimeout(r)}}},[P,a,de,ue,c,u,Re]);const ss=()=>{const s=setInterval(()=>{document.hasFocus()&&console.log("Fallback: Checking for progress...")},15e3);return()=>clearInterval(s)};if(S(()=>(Ie(!1),!w&&!x&&(ce.current=setTimeout(()=>{Ie(!0),console.log("Stream timeout error")},1e4)),()=>{ce.current&&clearTimeout(ce.current)}),[w,x,c,u,k]),U)return e("div",{class:"loading-state",children:[e("div",{class:"loading-spinner"}),e("p",{children:"Loading media details..."}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]});if(!a)return e("div",{class:"container",children:e("div",{class:"error-state",children:[e("h2",{children:"Unable to Load Media"}),e("p",{children:"We couldn't load the details for this content. This could be due to:"}),e("ul",{children:[e("li",{children:"Network connectivity issues"}),e("li",{children:"The content may no longer be available"}),e("li",{children:"Server maintenance"})]}),e("button",{onClick:()=>window.location.reload(),class:"btn btn-primary",style:{marginTop:"20px"},children:"Try Again"})]})});const{title:be,name:$e,overview:ts,vote_average:ys,release_date:Fe,first_air_date:V,last_air_date:Ne,runtime:He,number_of_seasons:We,genres:Ke,poster_path:Ye,status:je}=a,_e=fs(a.id);(Fe||V)&&new Date(Fe||V).getFullYear();const rs=()=>{_e?ms(a):hs({...a,type:t})};return e("div",{children:[e(us,{children:e("title",{children:[be||$e," - FreeStream"]})}),e("div",{class:"player-container",children:[!w&&x&&e("div",{class:"stream-error-message",children:[e("p",{children:x.message}),x.canRetry&&e("div",{class:"error-actions",children:[e("button",{onClick:async()=>{le(!0),setTimeout(()=>{(async()=>{const n=`${K}/stream-url?type=${t}&id=${d}&source=${k}${t==="tv"||t==="anime"?`&season=${c}&episode=${u}`:""}${t==="anime"?`&dub=${Q}`:""}`;try{const r=await fetch(n),i=await r.json();if(r.ok)p(i.url),q(i.isDirectSource),X(i.qualities||[]),j(null);else throw new Error(i.message)}catch(r){console.error("Retry failed:",r),j({message:"Retry failed. Please try selecting a different source.",canRetry:!0})}le(!1)})()},1e3)},disabled:Me,class:"btn retry-btn",children:Me?"Retrying...":"Retry"}),e("p",{children:"Or try selecting a different source from the list below."})]})]}),!w&&!x&&!ke&&e("div",{class:"stream-loading",children:[e("p",{children:"Loading video stream... "}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]}),!w&&!x&&ke&&e("div",{class:"stream-error-message",children:[e("p",{children:"Sorry, this episode failed to load. Please refresh the page."}),e("div",{class:"error-actions",children:[e("button",{onClick:()=>window.location.reload(),class:"btn retry-btn",children:"Refresh"}),e("p",{children:"Or try selecting a different source from the list below if refreshing doesn't work."})]})]}),de?e("video",{ref:ue,src:w,controls:!0,autoPlay:!0,width:"100%"}):w&&e("iframe",{src:w,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"},frameBorder:"0",allowFullScreen:!0,allow:"autoplay; picture-in-picture",sandbox:"allow-forms allow-pointer-lock allow-same-origin allow-scripts allow-top-navigation",title:"Video Player",loading:"eager",referrerPolicy:"no-referrer-when-downgrade",importance:"high",onLoad:()=>{console.log("🎬 Player iframe loaded"),Ue(!0),k!=="videasy"&&ge>30?setTimeout(()=>{const s=document.querySelector("iframe");if(s&&s.contentWindow)try{s.contentWindow.postMessage({type:"SEEK_TO",time:ge},"*"),console.log(`📍 Sent seek command to restore progress: ${ge}s`)}catch(n){console.log("Could not send seek command:",n)}},500):console.log(k==="videasy"?"📍 Videasy native resume - no seeking needed":"📍 No significant progress to resume, starting from beginning")}})]}),e("div",{class:"container",children:[e("div",{class:"media-details-layout",children:[e("div",{class:"poster",children:[e("img",{src:Oe(Ye?`${Ve}${Ye}`:"https://via.placeholder.com/500x750.png?text=No+Image"),alt:be||$e}),Le>0&&e("div",{class:"movie-progress-container",children:[e("div",{class:"movie-progress-bar",children:e("div",{class:"movie-progress",style:{width:`${Math.max(2,Le)}%`}})}),e("div",{class:"movie-progress-text",children:b.duration_seconds>0?`${Math.floor(b.progress_seconds/60)}m / ${Math.floor(b.duration_seconds/60)}m watched`:`${Math.floor(b.progress_seconds/60)}m watched`})]})]}),e("div",{class:"details",children:[e("div",{class:"title-container",children:[e("h1",{children:be||$e}),e("button",{onClick:rs,class:`favorite-btn ${_e?"favorited":""}`,disabled:!De,children:De?_e?"♥ Favorited":"♡ Favorite":"..."}),!P&&e("span",{class:"login-hint",children:e("small",{children:[e("a",{href:"/login",style:{color:"#007bff",textDecoration:"none"},children:"Log in"})," to save favorites, track progress & continue watching"]})})]}),e("div",{class:"meta",children:[e("span",{class:"rating",children:["★ ",a.vote_average?a.vote_average.toFixed(1):"N/A"]}),(t==="tv"||t==="anime")&&V&&e("span",{style:{marginLeft:8},children:(()=>{const s=V?new Date(V).getFullYear():null;let n=null;return Ne?n=new Date(Ne).getFullYear():je&&je.toLowerCase()==="ended"&&(n=s),s&&n&&s===n?`${s}`:s&&n&&n!==s?`${s} - ${n}`:s?`${s} -`:""})()}),He&&e("span",{children:[He," min"]}),We&&e("span",{children:[We," Seasons"]})]}),e("div",{class:"genres",children:Ke&&Ke.map(s=>e("span",{class:"genre-tag",children:s.name}))}),e("p",{class:"overview",children:ts}),Ae.length>0&&e("div",{class:"quality-selector",children:[e("label",{children:"Quality:"}),Ae.map(s=>e("button",{class:`quality-btn ${w===s.url?"active":""}`,onClick:()=>p(s.url),children:[s.quality,"p"]}))]})]})]}),t==="anime"&&e("div",{class:"select-container",children:[e("label",{for:"dub-select",children:"Audio:"}),e("select",{id:"dub-select",value:Q,onChange:s=>Ge(s.target.value==="true"),children:[e("option",{value:"false",children:"Subbed"}),e("option",{value:"true",children:"Dubbed"})]})]}),e("div",{class:"selectors-container",children:[(t==="tv"||t==="anime")&&a&&a.seasons&&e("div",{class:"select-container",children:[e("label",{children:"Season:"}),e("div",{class:"selector-buttons",children:a.seasons.filter(s=>s.season_number>0).map(s=>e("button",{class:`selector-btn ${c===s.season_number?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected season ${s.season_number}`),fe.current=!0,ve.current=null;const n=`/watch/${t}/${d}/season/${s.season_number}/episode/1`;re(n,!0)},children:s.name},s.id))})]}),Pe.length>1&&e("div",{class:"select-container",children:[e("label",{children:"Source:"}),e("div",{class:"selector-buttons",children:Pe.map(s=>e("button",{class:`selector-btn ${k===s?"active":""}`,onClick:()=>Ee(s),children:s},s))})]})]}),(t==="tv"||t==="anime")&&c!==null&&u!==null&&e("div",{class:"episodes-container",children:[e("h3",{children:"Episodes"}),ze?e("div",{class:"loading-spinner"}):e(ds,{children:[e("div",{class:"episode-list",children:R?.episodes?.slice((H-1)*$,H*$)?.map(s=>{const n=Je.find(i=>i.season_number===c&&i.episode_number===s.episode_number),r=n&&n.progress_seconds>0?n.duration_seconds&&n.duration_seconds>0?Math.min(100,n.progress_seconds/n.duration_seconds*100):n.progress_seconds>30?5:2:0;return e("div",{class:`episode-card ${s.episode_number===u?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected episode ${s.episode_number}`),fe.current=!0,ve.current=null;const i=`/watch/${t}/${d}/season/${c}/episode/${s.episode_number}`;re(i,!0)},children:[e("div",{class:"episode-card-image",children:[e("img",{src:Oe(s.still_path?`${Ve}${s.still_path}`:`https://via.placeholder.com/300x169.png?text=${encodeURIComponent(s.name)}`),alt:s.name}),e("div",{class:"episode-number-badge",children:s.episode_number}),r>0&&e("div",{class:"episode-progress-bar",children:e("div",{class:"episode-progress",style:{width:`${Math.max(2,r)}%`}})})]}),e("div",{class:"episode-card-content",children:[e("h4",{children:[s.name,s.air_date&&e("span",{style:{color:"#aaa",fontWeight:400,fontSize:"0.95em",marginLeft:8},children:["• ",(()=>{const i=new Date(s.air_date);return isNaN(i)?null:i.toLocaleDateString(void 0,{month:"short",day:"numeric",year:"numeric"})})()]})]}),e("p",{class:"episode-overview",children:s.overview})]})]},s.id)})}),R?.episodes&&R.episodes.length>$&&e("div",{class:"pagination-controls",children:[e("button",{class:"pagination-btn",onClick:()=>W(s=>Math.max(1,s-1)),disabled:H===1,children:"← Previous"}),e("div",{class:"pagination-info",children:[e("span",{class:"page-numbers",children:Array.from({length:Math.ceil(R.episodes.length/$)},(s,n)=>n+1).map(s=>e("button",{class:`page-number ${s===H?"active":""}`,onClick:()=>W(s),children:s},s))}),e("span",{class:"page-text",children:["Page ",H," of ",Math.ceil(R.episodes.length/$),"(",R.episodes.length," episodes)"]})]}),e("button",{class:"pagination-btn",onClick:()=>W(s=>Math.min(Math.ceil(R.episodes.length/$),s+1)),disabled:H===Math.ceil(R.episodes.length/$),children:"Next →"})]})]})]}),N.length>0&&e("div",{class:"recommendations",children:[e("h2",{children:"More Like This"}),e("div",{class:"movie-grid",children:N.map(s=>e(gs,{item:s,type:t,progress:null,duration:null},`${s.media_type||t}-${s.id}`))})]})]})]})};export{Ss as default};
//# sourceMappingURL=Watch-BzjRGGrT.js.map
