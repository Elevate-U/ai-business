{"version":3,"file":"Anime-Cw-De89L.js","sources":["../../src/pages/Anime.jsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useEffect, useRef, useCallback } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport { useStore } from '../store';\nimport MovieCard from '../components/MovieCard';\nimport { getContinueWatching } from '../utils/watchHistory';\nimport { useAuth } from '../context/Auth';\nimport { API_BASE_URL } from '../config';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport './Home.css';\nimport './Anime.css';\n\nconst Anime = () => {\n    const [loading, setLoading] = useState(true);\n    const [topAnime, setTopAnime] = useState([]);\n    const [popularAnime, setPopularAnime] = useState([]);\n    const [trendingAnime, setTrendingAnime] = useState([]);\n    const [currentlyAiring, setCurrentlyAiring] = useState([]);\n    const [upcomingAnime, setUpcomingAnime] = useState([]);\n    const [error, setError] = useState(null);\n    const [retryCount, setRetryCount] = useState(0);\n    const [audioPreference, setAudioPreference] = useState(() => {\n        return localStorage.getItem('anime-audio-preference') || 'subbed';\n    });\n    const [selectedAnime, setSelectedAnime] = useState(null);\n    const [animeDetails, setAnimeDetails] = useState(null);\n    const [detailsLoading, setDetailsLoading] = useState(false);\n    const [videasyAvailable, setVideasyAvailable] = useState(true);\n    const [anilistAvailable, setAnilistAvailable] = useState(true);\n    \n    // Rate limiting state\n    const rateLimitRef = useRef({\n        requests: [],\n        maxRequests: 90, // AniList allows 90 requests per minute\n        timeWindow: 60000 // 1 minute\n    });\n    \n    const { user } = useAuth();\n    const { \n        continueWatching, \n        continueWatchingFetched, \n        fetchContinueWatching \n    } = useStore();\n\n    useEffect(() => {\n        if (user && !continueWatchingFetched) {\n            fetchContinueWatching();\n        }\n    }, [user, continueWatchingFetched, fetchContinueWatching]);\n\n    // Filter continue watching for only anime content\n    const animeWatchHistory = continueWatching.filter(item => item.type === 'anime');\n\n    // Rate limiting function for AniList API\n    const checkRateLimit = useCallback(() => {\n        const now = Date.now();\n        const { requests, maxRequests, timeWindow } = rateLimitRef.current;\n        \n        // Remove requests older than the time window\n        const recentRequests = requests.filter(time => now - time < timeWindow);\n        rateLimitRef.current.requests = recentRequests;\n        \n        if (recentRequests.length >= maxRequests) {\n            const oldestRequest = Math.min(...recentRequests);\n            const waitTime = timeWindow - (now - oldestRequest);\n            return { allowed: false, waitTime };\n        }\n        \n        // Add current request timestamp\n        rateLimitRef.current.requests.push(now);\n        return { allowed: true, waitTime: 0 };\n    }, []);\n\n    // Enhanced AniList data fetching with rate limiting and error handling\n    const fetchAniListData = async (query, variables = {}, retries = 3) => {\n        // Check rate limit\n        const rateCheck = checkRateLimit();\n        if (!rateCheck.allowed) {\n            console.warn(`Rate limit exceeded. Waiting ${rateCheck.waitTime}ms`);\n            await new Promise(resolve => setTimeout(resolve, rateCheck.waitTime));\n        }\n\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n\n            const response = await fetch(`${API_BASE_URL}/anilist`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                },\n                body: JSON.stringify({\n                    query: query,\n                    variables: variables\n                }),\n                signal: controller.signal\n            });\n\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                if (response.status === 429) {\n                    // Rate limited by server\n                    const retryAfter = response.headers.get('Retry-After') || 60;\n                    console.warn(`Server rate limit hit. Retrying after ${retryAfter}s`);\n                    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n                    if (retries > 0) {\n                        return fetchAniListData(query, variables, retries - 1);\n                    }\n                }\n                throw new Error(`AniList API error: ${response.status}`);\n            }\n\n            const data = await response.json();\n            \n            if (data.errors) {\n                console.error('AniList GraphQL errors:', data.errors);\n                throw new Error('GraphQL errors in response');\n            }\n\n            setAnilistAvailable(true);\n            return data;\n        } catch (error) {\n            console.error('Error fetching from AniList:', error);\n            \n            if (error.name === 'AbortError') {\n                setError('Request timed out. Please check your connection.');\n            } else if (retries > 0) {\n                console.log(`Retrying AniList request. ${retries} attempts remaining.`);\n                await new Promise(resolve => setTimeout(resolve, 1000 * (4 - retries))); // Exponential backoff\n                return fetchAniListData(query, variables, retries - 1);\n            } else {\n                setAnilistAvailable(false);\n                setError('AniList service temporarily unavailable. Some features may be limited.');\n            }\n            return null;\n        }\n    };\n\n    // Enhanced mapping function with comprehensive metadata\n    const mapAniListToTMDBFormat = (media) => {\n        return {\n            id: media.id,\n            title: media.title.english || media.title.romaji,\n            name: media.title.english || media.title.romaji,\n            poster_path: media.coverImage.large,\n            overview: media.description ? media.description.replace(/<[^>]*>/g, '') : '',\n            vote_average: media.averageScore ? media.averageScore / 10 : 0,\n            popularity: media.popularity || 0,\n            first_air_date: media.startDate ? `${media.startDate.year}-${media.startDate.month || '01'}-${media.startDate.day || '01'}` : '',\n            media_type: 'anime',\n            anilist_id: media.id,\n            seasons: media.format === 'MOVIE' ? [] : [{ season_number: 1 }],\n            // Enhanced metadata\n            genres: media.genres || [],\n            studios: media.studios?.nodes || [],\n            episodes: media.episodes,\n            duration: media.duration,\n            status: media.status,\n            format: media.format,\n            season: media.season,\n            seasonYear: media.seasonYear,\n            source: media.source,\n            hashtag: media.hashtag,\n            trailer: media.trailer,\n            isAdult: media.isAdult,\n            meanScore: media.meanScore,\n            favourites: media.favourites,\n            tags: media.tags || [],\n            relations: media.relations?.edges || [],\n            nextAiringEpisode: media.nextAiringEpisode\n        };\n    };\n\n    // Conditional routing logic for anime content detection\n    const handleAnimeClick = useCallback((animeItem) => {\n        // Check if this is anime content and redirect accordingly\n        if (animeItem.media_type === 'anime' || animeItem.type === 'anime') {\n            // Use AniList ID for routing if available\n            const animeId = animeItem.anilist_id || animeItem.id;\n            \n            // Check if Videasy is available for streaming\n            if (videasyAvailable) {\n                // Redirect to watch page with anime type and AniList ID\n                route(`/watch/anime/${animeId}`);\n            } else {\n                // Show fallback options or error\n                setError('Streaming service temporarily unavailable. Please try again later.');\n            }\n        }\n    }, [videasyAvailable]);\n\n    // Audio preference persistence\n    const handleAudioPreferenceChange = useCallback((preference) => {\n        setAudioPreference(preference);\n        localStorage.setItem('anime-audio-preference', preference);\n    }, []);\n\n    // Fetch detailed anime information\n    const fetchAnimeDetails = async (animeId) => {\n        if (!anilistAvailable) return null;\n\n        setDetailsLoading(true);\n        const detailQuery = `\n            query ($id: Int) {\n                Media(id: $id, type: ANIME) {\n                    id\n                    title {\n                        romaji\n                        english\n                        native\n                    }\n                    description\n                    startDate {\n                        year\n                        month\n                        day\n                    }\n                    endDate {\n                        year\n                        month\n                        day\n                    }\n                    season\n                    seasonYear\n                    type\n                    format\n                    status\n                    episodes\n                    duration\n                    chapters\n                    volumes\n                    genres\n                    synonyms\n                    source\n                    isAdult\n                    meanScore\n                    averageScore\n                    popularity\n                    favourites\n                    hashtag\n                    countryOfOrigin\n                    isLicensed\n                    airingSchedule {\n                        nodes {\n                            airingAt\n                            timeUntilAiring\n                            episode\n                        }\n                    }\n                    trailer {\n                        id\n                        site\n                        thumbnail\n                    }\n                    coverImage {\n                        extraLarge\n                        large\n                        medium\n                        color\n                    }\n                    bannerImage\n                    tags {\n                        id\n                        name\n                        description\n                        category\n                        rank\n                        isGeneralSpoiler\n                        isMediaSpoiler\n                        isAdult\n                    }\n                    relations {\n                        edges {\n                            id\n                            relationType\n                            node {\n                                id\n                                title {\n                                    romaji\n                                    english\n                                }\n                                format\n                                type\n                                status\n                                coverImage {\n                                    medium\n                                }\n                            }\n                        }\n                    }\n                    studios {\n                        edges {\n                            isMain\n                            node {\n                                id\n                                name\n                            }\n                        }\n                    }\n                    nextAiringEpisode {\n                        airingAt\n                        timeUntilAiring\n                        episode\n                    }\n                }\n            }\n        `;\n\n        try {\n            const data = await fetchAniListData(detailQuery, { id: animeId });\n            if (data?.data?.Media) {\n                setAnimeDetails(data.data.Media);\n                return data.data.Media;\n            }\n        } catch (error) {\n            console.error('Error fetching anime details:', error);\n        } finally {\n            setDetailsLoading(false);\n        }\n        return null;\n    };\n\n    // Check service availability\n    const checkServiceAvailability = async () => {\n        try {\n            // Check Videasy availability\n            const videasyCheck = await fetch(`${API_BASE_URL}/health/videasy`, {\n                method: 'GET',\n                signal: AbortSignal.timeout(5000)\n            });\n            setVideasyAvailable(videasyCheck.ok);\n\n            // Check AniList availability\n            const anilistCheck = await fetch(`${API_BASE_URL}/health/anilist`, {\n                method: 'GET',\n                signal: AbortSignal.timeout(5000)\n            });\n            setAnilistAvailable(anilistCheck.ok);\n        } catch (error) {\n            console.warn('Service availability check failed:', error);\n            // Assume services are available if health check fails\n        }\n    };\n\n    useEffect(() => {\n        checkServiceAvailability();\n    }, []);\n\n    useEffect(() => {\n        const fetchAnimeData = async () => {\n            setLoading(true);\n            setError(null);\n            \n            // Enhanced GraphQL queries with comprehensive metadata\n            const trendingQuery = `\n                query {\n                    Page(page: 1, perPage: 20) {\n                        media(type: ANIME, sort: TRENDING_DESC) {\n                            id\n                            title {\n                                romaji\n                                english\n                                native\n                            }\n                            coverImage {\n                                large\n                                medium\n                                color\n                            }\n                            bannerImage\n                            description\n                            averageScore\n                            meanScore\n                            popularity\n                            favourites\n                            startDate {\n                                year\n                                month\n                                day\n                            }\n                            endDate {\n                                year\n                                month\n                                day\n                            }\n                            format\n                            status\n                            episodes\n                            duration\n                            genres\n                            season\n                            seasonYear\n                            source\n                            hashtag\n                            isAdult\n                            trailer {\n                                id\n                                site\n                                thumbnail\n                            }\n                            studios {\n                                nodes {\n                                    id\n                                    name\n                                }\n                            }\n                            tags {\n                                id\n                                name\n                                rank\n                            }\n                            nextAiringEpisode {\n                                airingAt\n                                timeUntilAiring\n                                episode\n                            }\n                        }\n                    }\n                }\n            `;\n            \n            const popularQuery = `\n                query {\n                    Page(page: 1, perPage: 20) {\n                        media(type: ANIME, sort: POPULARITY_DESC) {\n                            id\n                            title {\n                                romaji\n                                english\n                                native\n                            }\n                            coverImage {\n                                large\n                                medium\n                                color\n                            }\n                            bannerImage\n                            description\n                            averageScore\n                            meanScore\n                            popularity\n                            favourites\n                            startDate {\n                                year\n                                month\n                                day\n                            }\n                            endDate {\n                                year\n                                month\n                                day\n                            }\n                            format\n                            status\n                            episodes\n                            duration\n                            genres\n                            season\n                            seasonYear\n                            source\n                            hashtag\n                            isAdult\n                            trailer {\n                                id\n                                site\n                                thumbnail\n                            }\n                            studios {\n                                nodes {\n                                    id\n                                    name\n                                }\n                            }\n                            tags {\n                                id\n                                name\n                                rank\n                            }\n                            nextAiringEpisode {\n                                airingAt\n                                timeUntilAiring\n                                episode\n                            }\n                        }\n                    }\n                }\n            `;\n            \n            const topRatedQuery = `\n                query {\n                    Page(page: 1, perPage: 20) {\n                        media(type: ANIME, sort: SCORE_DESC) {\n                            id\n                            title {\n                                romaji\n                                english\n                                native\n                            }\n                            coverImage {\n                                large\n                                medium\n                                color\n                            }\n                            bannerImage\n                            description\n                            averageScore\n                            meanScore\n                            popularity\n                            favourites\n                            startDate {\n                                year\n                                month\n                                day\n                            }\n                            endDate {\n                                year\n                                month\n                                day\n                            }\n                            format\n                            status\n                            episodes\n                            duration\n                            genres\n                            season\n                            seasonYear\n                            source\n                            hashtag\n                            isAdult\n                            trailer {\n                                id\n                                site\n                                thumbnail\n                            }\n                            studios {\n                                nodes {\n                                    id\n                                    name\n                                }\n                            }\n                            tags {\n                                id\n                                name\n                                rank\n                            }\n                            nextAiringEpisode {\n                                airingAt\n                                timeUntilAiring\n                                episode\n                            }\n                        }\n                    }\n                }\n            `;\n            \n            const currentlyAiringQuery = `\n                query {\n                    Page(page: 1, perPage: 20) {\n                        media(type: ANIME, status: RELEASING, sort: POPULARITY_DESC) {\n                            id\n                            title {\n                                romaji\n                                english\n                                native\n                            }\n                            coverImage {\n                                large\n                                medium\n                                color\n                            }\n                            bannerImage\n                            description\n                            averageScore\n                            meanScore\n                            popularity\n                            favourites\n                            startDate {\n                                year\n                                month\n                                day\n                            }\n                            endDate {\n                                year\n                                month\n                                day\n                            }\n                            format\n                            status\n                            episodes\n                            duration\n                            genres\n                            season\n                            seasonYear\n                            source\n                            hashtag\n                            isAdult\n                            trailer {\n                                id\n                                site\n                                thumbnail\n                            }\n                            studios {\n                                nodes {\n                                    id\n                                    name\n                                }\n                            }\n                            tags {\n                                id\n                                name\n                                rank\n                            }\n                            nextAiringEpisode {\n                                airingAt\n                                timeUntilAiring\n                                episode\n                            }\n                        }\n                    }\n                }\n            `;\n            \n            const upcomingQuery = `\n                query {\n                    Page(page: 1, perPage: 20) {\n                        media(type: ANIME, status: NOT_YET_RELEASED, sort: POPULARITY_DESC) {\n                            id\n                            title {\n                                romaji\n                                english\n                                native\n                            }\n                            coverImage {\n                                large\n                                medium\n                                color\n                            }\n                            bannerImage\n                            description\n                            averageScore\n                            meanScore\n                            popularity\n                            favourites\n                            startDate {\n                                year\n                                month\n                                day\n                            }\n                            endDate {\n                                year\n                                month\n                                day\n                            }\n                            format\n                            status\n                            episodes\n                            duration\n                            genres\n                            season\n                            seasonYear\n                            source\n                            hashtag\n                            isAdult\n                            trailer {\n                                id\n                                site\n                                thumbnail\n                            }\n                            studios {\n                                nodes {\n                                    id\n                                    name\n                                }\n                            }\n                            tags {\n                                id\n                                name\n                                rank\n                            }\n                            nextAiringEpisode {\n                                airingAt\n                                timeUntilAiring\n                                episode\n                            }\n                        }\n                    }\n                }\n            `;\n\n            try {\n                if (!anilistAvailable) {\n                    setError('AniList service is currently unavailable. Please try again later.');\n                    setLoading(false);\n                    return;\n                }\n\n                const [trendingData, popularData, topRatedData, currentlyAiringData, upcomingData] = await Promise.all([\n                    fetchAniListData(trendingQuery),\n                    fetchAniListData(popularQuery),\n                    fetchAniListData(topRatedQuery),\n                    fetchAniListData(currentlyAiringQuery),\n                    fetchAniListData(upcomingQuery)\n                ]);\n\n                if (trendingData?.data) {\n                    setTrendingAnime(trendingData.data.Page.media.map(mapAniListToTMDBFormat));\n                }\n                \n                if (popularData?.data) {\n                    setPopularAnime(popularData.data.Page.media.map(mapAniListToTMDBFormat));\n                }\n                \n                if (topRatedData?.data) {\n                    setTopAnime(topRatedData.data.Page.media.map(mapAniListToTMDBFormat));\n                }\n                \n                if (currentlyAiringData?.data) {\n                    setCurrentlyAiring(currentlyAiringData.data.Page.media.map(mapAniListToTMDBFormat));\n                }\n                \n                if (upcomingData?.data) {\n                    setUpcomingAnime(upcomingData.data.Page.media.map(mapAniListToTMDBFormat));\n                }\n\n                setRetryCount(0); // Reset retry count on success\n            } catch (error) {\n                console.error('Error fetching anime data:', error);\n                if (retryCount < 3) {\n                    setRetryCount(prev => prev + 1);\n                    setTimeout(() => {\n                        fetchAnimeData();\n                    }, 2000 * (retryCount + 1)); // Exponential backoff\n                } else {\n                    setError('Failed to load anime data after multiple attempts. Please refresh the page.');\n                }\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchAnimeData();\n    }, [anilistAvailable, retryCount]);\n\n    // Enhanced section rendering with deep linking support\n    const renderSection = (title, items) => {\n        if (!items || items.length === 0) {\n            return null;\n        }\n        \n        return (\n            <section class=\"home-section\">\n                <h2>{title}</h2>\n                <div class=\"scrolling-row\">\n                    {items.map(item => (\n                        <MovieCard \n                            key={`${title}-${item.id}`} \n                            item={item} \n                            type=\"anime\"\n                            onClick={() => handleAnimeClick(item)}\n                        />\n                    ))}\n                </div>\n            </section>\n        );\n    };\n\n    // Service status indicator\n    const ServiceStatusIndicator = () => (\n        <div class=\"service-status\">\n            <div class={`status-indicator ${anilistAvailable ? 'online' : 'offline'}`}>\n                <span class=\"status-dot\"></span>\n                AniList: {anilistAvailable ? 'Online' : 'Offline'}\n            </div>\n            <div class={`status-indicator ${videasyAvailable ? 'online' : 'offline'}`}>\n                <span class=\"status-dot\"></span>\n                Videasy: {videasyAvailable ? 'Online' : 'Offline'}\n            </div>\n        </div>\n    );\n\n    // Audio preference selector\n    const AudioPreferenceSelector = () => (\n        <div class=\"audio-preference-selector\">\n            <label htmlFor=\"audio-preference\">Default Audio:</label>\n            <select\n                id=\"audio-preference\"\n                value={audioPreference}\n                onChange={(e) => handleAudioPreferenceChange(e.target.value)}\n                class=\"audio-select\"\n            >\n                <option value=\"subbed\">Subtitled (Sub)</option>\n                <option value=\"dubbed\">Dubbed (Dub)</option>\n            </select>\n            <small class=\"preference-note\">\n                This preference will be applied when watching anime episodes\n            </small>\n        </div>\n    );\n\n    // Error boundary and retry mechanism\n    const ErrorDisplay = ({ error, onRetry }) => (\n        <div class=\"error-container\">\n            <div class=\"error-message\">\n                <h3>Something went wrong</h3>\n                <p>{error}</p>\n                <div class=\"error-actions\">\n                    <button onClick={onRetry} class=\"retry-button\">\n                        Try Again\n                    </button>\n                    <button \n                        onClick={() => window.location.reload()} \n                        class=\"refresh-button\"\n                    >\n                        Refresh Page\n                    </button>\n                </div>\n            </div>\n            <ServiceStatusIndicator />\n        </div>\n    );\n\n    // Loading state with service status\n    if (loading) {\n        return (\n            <div class=\"container home-page anime-page\">\n                <h1 class=\"main-title\">Anime</h1>\n                <ServiceStatusIndicator />\n                <LoadingSpinner text=\"Loading anime data...\" />\n                {retryCount > 0 && (\n                    <p class=\"retry-info\">\n                        Retrying... (Attempt {retryCount + 1}/4)\n                    </p>\n                )}\n            </div>\n        );\n    }\n\n    // Error state\n    if (error && !anilistAvailable) {\n        return (\n            <div class=\"container home-page anime-page\">\n                <h1 class=\"main-title\">Anime</h1>\n                <ErrorDisplay \n                    error={error} \n                    onRetry={() => {\n                        setError(null);\n                        setRetryCount(0);\n                        checkServiceAvailability();\n                    }} \n                />\n            </div>\n        );\n    }\n\n    return (\n        <div class=\"container home-page anime-page\">\n            <h1 class=\"main-title\">Anime</h1>\n            \n            <div class=\"anime-controls\">\n                <AudioPreferenceSelector />\n                <ServiceStatusIndicator />\n            </div>\n            \n            {error && (\n                <div class=\"warning-message\">\n                    <p>{error}</p>\n                </div>\n            )}\n            \n            {animeWatchHistory.length > 0 && (\n                <section class=\"home-section\">\n                    <h2>Continue Watching</h2>\n                    <div class=\"scrolling-row scrolling-row--compact\">\n                        {animeWatchHistory.map(item => (\n                            <MovieCard \n                                key={`continue-watching-${item.id}`} \n                                item={item} \n                                type=\"anime\" \n                                progress={item.progress_seconds}\n                                duration={item.duration_seconds}\n                                onClick={() => handleAnimeClick(item)}\n                            />\n                        ))}\n                    </div>\n                </section>\n            )}\n            \n            {renderSection('Trending Anime', trendingAnime)}\n            {renderSection('Currently Airing', currentlyAiring)}\n            {renderSection('Popular Anime', popularAnime)}\n            {renderSection('Top Rated Anime', topAnime)}\n            {renderSection('Upcoming Anime', upcomingAnime)}\n            \n            {!loading && \n             trendingAnime.length === 0 && \n             popularAnime.length === 0 && \n             topAnime.length === 0 && \n             currentlyAiring.length === 0 && \n             upcomingAnime.length === 0 && (\n                <div class=\"no-content\">\n                    <h3>No anime content available</h3>\n                    <p>Please check your connection and try again.</p>\n                    <button \n                        onClick={() => window.location.reload()} \n                        class=\"retry-button\"\n                    >\n                        Refresh Page\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Anime;"],"names":["Anime","loading","setLoading","useState","topAnime","setTopAnime","popularAnime","setPopularAnime","trendingAnime","setTrendingAnime","currentlyAiring","setCurrentlyAiring","upcomingAnime","setUpcomingAnime","error","setError","retryCount","setRetryCount","audioPreference","setAudioPreference","selectedAnime","setSelectedAnime","animeDetails","setAnimeDetails","detailsLoading","setDetailsLoading","videasyAvailable","setVideasyAvailable","anilistAvailable","setAnilistAvailable","rateLimitRef","useRef","user","useAuth","continueWatching","continueWatchingFetched","fetchContinueWatching","useStore","useEffect","animeWatchHistory","item","checkRateLimit","useCallback","now","requests","maxRequests","timeWindow","recentRequests","time","oldestRequest","fetchAniListData","query","variables","retries","rateCheck","resolve","controller","timeoutId","response","API_BASE_URL","retryAfter","data","mapAniListToTMDBFormat","media","handleAnimeClick","animeItem","animeId","route","handleAudioPreferenceChange","preference","checkServiceAvailability","videasyCheck","anilistCheck","fetchAnimeData","trendingQuery","popularQuery","topRatedQuery","currentlyAiringQuery","upcomingQuery","trendingData","popularData","topRatedData","currentlyAiringData","upcomingData","prev","renderSection","title","items","jsxs","jsx","MovieCard","ServiceStatusIndicator","AudioPreferenceSelector","ErrorDisplay","onRetry","LoadingSpinner"],"mappings":"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"}